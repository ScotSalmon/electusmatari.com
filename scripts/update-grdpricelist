#!/usr/bin/env python

import sys
sys.path.extend(["/home/forcer/Projects/twf/dev/",
                 "/home/forcer/Projects/eveutil/2.0/lib"])

import csv
import ftplib
import StringIO
import sys

from lib import evemetrics

import evelib.api as api
import twf.db as db
import evelib.db.industry as industry

from evelib.db import *

def main():
    products = getproduceable()
    products.sort(lambda a, b: cmp(a.typename, b.typename))
    prices = evemetrics.get_prices([product.typename for product in products],
                                   ["Heimatar", "The Forge"])

    iconf = IndustryConfig()
    s = StringIO.StringIO()
    w = csv.writer(s)
    c = db.cursor('dbccp')
    for product in products:
        try:
            productioncost = industry.cost(product, iconf);
        except RuntimeError:
            pass
        else:
            p = prices[product.typename]
            heim = p.index(regions=["Heimatar"])
            heimmov = p.movement(regions=["Heimatar"])
            jita = p.index(regions=["The Forge"])
            last = p.last_upload()
            w.writerow([product.typename, productioncost,
                        heim, heimmov, jita, last['Heimatar']])
    s.seek(0)
    f = file("/home/forcer/.private.txt")
    lines = [line.strip().split(":") for line in f.readlines()]
    pws = dict((s, (u, p)) for (s, u, p) in lines)
    (u, p) = pws['ftp.forcer.de-deliveries']
    ftp = ftplib.FTP('ftp.forcer.de')
    ftp.login(u, p)
    ftp.storbinary("STOR grd-pricelist.txt", s)
    ftp.quit()

def getproduceable():
    blueprints = getblueprints()
    result = []
    for bp in blueprints:
        if not bp.blueprinttype.published or not bp.producttype.published:
            continue
        mgroups = [x.marketgroupname for x in bp.producttype.marketgroups]
        # Gradient does not produce ships of Amarrian design
        if 'Amarr' in mgroups and 'Ships' in mgroups:
            continue
        # No T2 salvage
        if 'Rigs' in mgroups and bp.producttype.attribute("techLevel") == 2:
            continue
        # No compressed ore or ice
        if bp.blueprinttype.group.groupname in ('Ore Compression Blueprints',
                                                'Ice Compression Blueprints'):
            continue
        # Special starbase modules, boosters and anchorable equipment
        # is also excluded.
        if bp.producttype.group.category.categoryname in ('Structure',
                                                          'Implant',
                                                          'Celestial'):
            continue
        # No COSMOS blueprints, either
        if bp.producttype.metagroup in ('Storyline',):
            continue
        result.append(bp.producttype)
    result.sort(lambda a, b: cmp(a.typename, b.typename))
    return result

def getblueprints():
    blueprints = {}
    grd = api.corp()
    assets = grd.AssetList()
    getassetblueprints(blueprints, assets.assets)
    jobs = grd.IndustryJobs()
    getindustryblueprints(blueprints, jobs.jobs)
    getinventionblueprints(blueprints, blueprints.values())
    return blueprints.values()

def getassetblueprints(result, assets):
    for row in assets:
        if row.typeID not in result:
            try:
                bptype = invBlueprintTypes.get(db.cursor('dbccp'),
                                               'blueprinttypeid',
                                               row.typeID)
            except RowDoesNotExistError:
                pass
            else:
                if bptype.producttype.published:
                    result[bptype.blueprinttypeid] = bptype
        if hasattr(row, 'contents'):
            getassetblueprints(result, row.contents)

def getindustryblueprints(result, jobs):
    for row in jobs:
        typeid = row.installedItemTypeID
        if typeid not in result:
            result[typeid] = invBlueprintTypes.get(db.cursor('dbccp'),
                                                   'blueprinttypeid',
                                                   typeid)

def getinventionblueprints(result, blueprints):
    for bp in blueprints:
        for invbp in bp.inventionblueprints:
            typeid = invbp.blueprinttypeid
            if typeid not in result:
                result[typeid] = invbp

class IndustryConfig(object):
    def __init__(self, decryptor=None):
        self._index = None
        self.decryptor = decryptor
        if decryptor is None:
            self.decryptor = industry.NoDecryptor()

    def index(self, invtype):
        if self._index is None:
            self._index = {}
            f = file("/home/forcer/public_html/eve/gmi/current.txt")
            lines = list(csv.reader(f))[1:]
            for row in lines:
                if row[1] != '':
                    self._index[row[0]] = float(row[1])
        return self._index.get(invtype.typename, None)

    def get_blueprint(self, invtype):
        tl = int(invtype.attribute("techLevel") or 1.0)
        if tl == 1:
            return self.t1blueprint(invtype)
        elif tl == 2:
            return self.t2blueprint(invtype)
        elif tl == 3:
            return self.t3blueprint(invtype)
        else:
            raise RuntimeError("Unknown tech level %s for %s" %
                               (tl, invtype.typename))

    def t1blueprint(self, invtype):
        cat = invtype.group.category.categoryname
        if cat in ['Module', 'Charge', 'Drone', 'Commodity']:
            return industry.Blueprint(me=40,
                                      safetymargin=self.safetymargin(invtype))
        elif cat in ['Ship', 'Deployable']:
            return industry.Blueprint(me=10,
                                      safetymargin=self.safetymargin(invtype))
        else:
            raise RuntimeError("No ME for category %s (%s)" %
                               (cat, invtype.typename))

    t2bpos = {"Claymore": industry.Blueprint(me=5),
              "Dual 180MM Autocannon II": industry.Blueprint(me=8),
              "425MM Autocannon II": industry.Blueprint(me=90),
              "1200MM Artillery Cannon II": industry.Blueprint(me=52),
              "Aurora M": industry.Blueprint(me=3),
              "Barrage S": industry.Blueprint(me=0),
              "Barrage L": industry.Blueprint(me=0),
              "Quake M": industry.Blueprint(me=0),
              "Tremor S": industry.Blueprint(me=0),
              "Tremor M": industry.Blueprint(me=1),
              "Havoc Fury ": industry.Blueprint(me=0)}
    def t2blueprint(self, invtype):
        if invtype.typename in self.t2bpos:
            return self.t2bpos[invtype.typename]
        return industry.InventedBlueprint(invtype,
                                          self.safetymargin(invtype),
                                          self.decryptor)

    def t3blueprint(self, invtype):
        raise RuntimeError("T3 not supported yet")
        return industry.ReverseEngineeredBlueprint(invtype,
                                                   self.safetymargin(invtype))

    def safetymargin(self, invtype):
        tl = int(invtype.attribute("techLevel") or 1.0)
        if tl == 1:
            group = invtype.group.groupname
            if group in ['Carrier']:
                return 1.2
            elif group in ['Dreadnought']:
                return 1.1
            else:
                return 1.0
        elif tl == 2:
            cat = invtype.group.category.categoryname
            if cat == 'Charge':
                return 1.5
            elif invtype.typename == 'Covert Ops Cloaking Device II':
                return 2.5
            else:
                return 1.2
        elif tl == 3:
            return 2.0
        else:
            raise RuntimeError('Unknown tech level %s (%s)' %
                               (tl, invtype.typename))

if __name__ == '__main__':
    main()
