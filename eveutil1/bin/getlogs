#!/usr/bin/env python

import datetime

import psycopg2

from lib import characters
from lib import cache

def main():
    grd = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    db = psycopg2.connect("host=localhost dbname=eve user=forcer")
    c = db.cursor()
    insert_logs(grd, c)
    db.commit()
    db.close()

def insert_logs(corp, c):
    for account in [1000, 1001, 1002, 1003, 1004, 1005, 1006]:
        # j = get_journal(corp, account)
        # for entry in j:
        #     sql_insert_journal_entry(c, account, entry)
        t = get_transactions(corp, account)
        for transaction in t:
            sql_insert_transaction(c, account, transaction)

def sql_insert_journal_entry(c, account, j):
    # Journal unique key: accountkey, refDateTime, OwnerID1, OwnerID2,
    # walletKey, argID1
    # Could be used at some point.
    c.execute("SELECT COUNT(*) FROM grd_journal "
              "WHERE refID = %s AND account = %s",
              (j.refID, account))
    if c.fetchone()[0] > 0:
        return
    c.execute("INSERT INTO grd_journal (account, date, refID, refTypeID, "
              " ownerName1, ownerID1, ownerName2, ownerID2, argName1, "
              " argID1, amount, balance, reason) "
              "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
              (account, datetime.datetime.utcfromtimestamp(j.date),
               j.refID, j.refTypeID, j.ownerName1, j.ownerID1, j.ownerName2,
               j.ownerID2, j.argName1, j.argID1, j.amount, j.balance,
               j.reason))

def sql_insert_transaction(c, account, t):
    c.execute("SELECT COUNT(*) FROM grd_transactions "
              "WHERE transactionID = %s AND account = %s",
              (t.transactionID, account))
    if c.fetchone()[0] > 0:
        return
    c.execute("INSERT INTO grd_transactions (account, date, transactionID, "
              " quantity, typeName, typeID, price, characterID, "
              " characterName, clientID, clientName, stationID, stationName, "
              " transactionType, transactionFor) "
              "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, "
              " %s, %s, %s, %s)",
              (account, 
               datetime.datetime.utcfromtimestamp(t.transactionDateTime),
               t.transactionID, t.quantity, t.typeName, t.typeID, t.price,
               t.characterID, t.characterName, t.clientID, t.clientName,
               t.stationID, t.stationName, t.transactionType,
               t.transactionFor))
    
def get_journal(corp, account):
    journal = []
    data = corp.WalletJournal(accountKey=account)
    while data is not None:
        for entry in data.entries:
            journal.append(entry)
        if len(data.entries) < 1000:
            break
        try:
            data = corp.WalletJournal(accountKey=account,
                                      beforeRefID=min([x.refID for x
                                                       in data.entries]))
        except:
            break
    journal.sort(lambda a, b: cmp(a.date, b.date))
    return journal

def get_transactions(corp, account):
    transactions = []
    data = corp.WalletTransactions(accountKey=account)
    while data is not None:
        for entry in data.transactions:
            transactions.append(entry)
        if len(data.transactions) < 1000:
            break
        try:
            data = corp.WalletTransactions(accountKey=account,
                                           beforeTransID=min([x.transactionID for x in data.transactions]))
        except:
            break
    transactions.sort(lambda a, b: cmp(a.transactionDateTime,
                                       b.transactionDateTime))
    return transactions

if __name__ == '__main__':
    main()

# CREATE TABLE grd_journal (
#   id BIGSERIAL,
#   account INT NOT NULL,
#   date TIMESTAMP NOT NULL,
#   refID INT NOT NULL,
#   refTypeID INT NOT NULL,
#   ownerName1 VARCHAR(255) NOT NULL,
#   ownerID1 INT NOT NULL,
#   ownerName2 VARCHAR(255) NOT NULL,
#   ownerID2 INT NOT NULL,
#   argName1 VARCHAR(255) NOT NULL,
#   argID1 INT NOT NULL,
#   amount FLOAT NOT NULL,
#   balance FLOAT NOT NULL,
#   reason VARCHAR(255) NOT NULL
# );
# 
# CREATE TABLE grd_transactions (
#   id BIGSERIAL,
#   account INT NOT NULL,
#   date TIMESTAMP NOT NULL,
#   transactionID INT NOT NULL,
#   quantity INT NOT NULL,
#   typeName VARCHAR(255) NOT NULL,
#   typeID INT NOT NULL,
#   price FLOAT NOT NULL,
#   clientID INT NOT NULL,
#   clientName VARCHAR(255) NOT NULL,
#   characterID INT NOT NULL,
#   characterName VARCHAR(255) NOT NULL,
#   stationID INT NOT NULL,
#   stationName VARCHAR(255) NOT NULL,
#   transactionType VARCHAR(255) NOT NULL,
#   transactionFor VARCHAR(255) NOT NULL
# );
