#!/usr/bin/env python

import sys

from lib import characters, cache, index, evedb, util

CHARID = 827502933
STATIONID = 60004828

MARKET = []
[    # Ships
    'Stabber', 'Thrasher', 'Rifter',
    'Caracal', 'Griffin',
    # Projectile ammo
    'EMP L', 'EMP M', 'EMP S',
    'Fusion L', 'Fusion M', 'Fusion S',
    'Phased Plasma L', 'Phased Plasma M', 'Phased Plasma S',
    # Cruise Missiles
    'Cataclysm Cruise Missile', 'Paradise Cruise Missile',
    'Wrath Cruise Missile', 'Devastator Cruise Missile',
    # Torpedos
    'Juggernaut Torpedo', 'Bane Torpedo',
    'Inferno Torpedo', 'Mjolnir Torpedo',
    # Heavy Missiles
    'Scourge Heavy Missile', 'Havoc Heavy Missile',
    'Thunderbolt Heavy Missile', 'Widowmaker Heavy Missile',
    # Heavy Assault Missiles
    'Fulmination Assault Missile', 'Hellfire Assault Missile',
    'Terror Assault Missile',
    # Light missiles
    'Sabretooth Light Missile', 'Bloodclaw Light Missile',
    'Flameburst Light Missile', 'Piranha Light Missile',
    # Rockets
    'Foxfire Rocket', 'Gremlin Rocket',
    'Phalanx Rocket',
    # Rigs
    'Medium Capacitor Control Circuit I', 'Small Capacitor Control Circuit I',
    'Medium Trimark Armor Pump I', 'Small Trimark Armor Pump I',
    ]

def main():
    corp = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    index_prices = index.get()
    sell_order = {}
    in_production = {}

    for order in corp.MarketOrders().orders:
        if order.orderState != 0:
            continue
        # 1) If it's a buy order, check for index price
        typename = typeid2name(order.typeID)
        if typename in index_prices:
            index_price = index_prices[typename]
        else:
            index_price = None
        if order.bid == 1 and index_price and order.volRemaining > 0 and order.price > index_price:
            print("%s (%s/%s) buys %s at %s, index is at %s" %
                  (charid2name(order.charID),
                   staid2name(order.stationID),
                   order.range,
                   typename,
                   util.humane(order.price),
                   util.humane(index_price)))
        # 2) If it's my sell order in Dal, remember type and amount
        if order.charID == CHARID and order.stationID == STATIONID and not order.bid:
            if typename not in sell_order:
                sell_order[typename] = (0, 0)
            (remaining, entered) = sell_order[typename]
            remaining += order.volRemaining
            entered = max(entered, order.volEntered)
            sell_order[typename] = (remaining, entered)
    
    for job in corp.IndustryJobs().jobs:
        # 1) If it's manufacturing in Dal, remember that it's being
        # manufactured
        if job.installerID == CHARID and job.containerID == STATIONID and job.completed != 1:
            in_production[typeid2name(job.outputTypeID)] = True

    print
    
    for name in MARKET:
        if name not in sell_order:
            if name in in_production:
                print("%s out, but in production." % name)
            else:
                print("%s out, none in production." % name)
        else:
            (remaining, entered) = sell_order[name]
            if remaining < entered/2.0:
                if name in in_production:
                    print("%s low (%s/%s), but in production." % 
                          (name, remaining, entered))
                else:
                    print("%s low (%s/%s), none in production." %
                          (name, remaining, entered))
            elif "-v" in sys.argv:
                print("%s ok (%s/%s)." %
                      (name, remaining, entered))
                

db = evedb.connect()

types = {}
def typeid2name(typeid):
    if typeid not in types:
        c = db.cursor()
        c.execute("SELECT typename FROM invtypes WHERE typeid = %s",
                  (typeid,))
        try:
            types[typeid] = c.fetchone()[0]
        except:
            types[typeid] = str(typeid)
    return types[typeid]

chars = {}
def charid2name(charid):
    if charid not in chars:
        api = characters.api()
        chars[charid] = api.eve.CharacterName(ids=charid).characters[0].name
    return chars[charid]

def staid2name(staid):
    c = db.cursor()
    c.execute("SELECT stationname FROM stastations WHERE stationid = %s",
              (staid,))
    return c.fetchone()[0]

main()
