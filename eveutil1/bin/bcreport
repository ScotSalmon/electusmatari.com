#!/usr/bin/env python

# Simple reporter of battleclinic kills

import csv
import datetime
import optparse
import StringIO
from lib import evedb

db = evedb.connect()

def main():
    parser = optparse.OptionParser(usage="%prog <file>",
                                   version="%prog 0.1")
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("Please specify a file name")

    report = Report()
    for (ts, killtype, shiptype, victim, system,
         security, involved) in csv.reader(file(args[0])):
        ts = datetime.datetime.strptime(ts, "%Y-%m-%d %H:%M")
        security = float(security)
        involved = int(involved)
        report.add(Kill(ts, killtype, shiptype, victim, system,
                        security, involved))
    print report.generate()

class Kill(object):
    def __init__(self, ts, killtype, shiptype, victim, system,
                 security, involved):
        self.ts = ts
        self.killtype = killtype
        self.shiptype = shiptype
        self.victim = victim
        self.system = system
        self.security = security
        self.involved = involved

class Report(object):
    def __init__(self):
        self.start = None
        self.end = None
        self.activity = Activity()
        self.fleetsize = Series()
        self.member = {}
        self.region = {}
        self.shiptype = {}
        self.kills = 0
        self.losses = 0

    def generate(self):
        s = StringIO.StringIO()
        w = s.write
        w("[size=x-large][b]Automated Report[/b][/size]\n")
        w("Based on %s kills and %s losses from %s to %s\n" %
          (self.kills, self.losses,
           self.start.strftime("%Y-%m-%d %H:%M"),
           self.end.strftime("%Y-%m-%d %H:%M")))
        w("\n")
        w("[size=large][b]Activity[/b][/size]\n")
        w("\n")
        w("[code]\n")
        perc = make_percentages(self.activity.hours)
        w(" ".join(["%02i" % n for n in range(0, 24)]) + "\n")
        w(" ".join(["%02i" % int(round(perc[n]*100)) for n in range(0, 24)])
          + "\n")
        w("[/code]\n\n")
        w("[size=large][b]Fleet Size[/b][/size]\n")
        w("\n")
        w("Average: %i (stddev %.1f)\n" % (round(self.fleetsize.average()),
                                           self.fleetsize.stddev()))
        w("Median: %s\n" % int(round(self.fleetsize.median())))
        w("\n")
        w("[size=large][b]Regions[/b][/size]\n")
        w("\n")
        w("[b]Kills[/b]\n")
        w(self.reportlist(self.region["kill"]))
        w("[b]Losses[/b]\n")
        w(self.reportlist(self.region["loss"]))
        w("\n")
        w("[size=large][b]Ship Types Flown[/b][/size]\n")
        w("\n")
        w(self.reportlist(self.shiptype))
        w("\n")
        w("[size=large][b]Known Members[/b][/size]\n")
        w("\n")
        member = self.member.keys()
        member.sort(lambda a, b: cmp(a.lower(), b.lower()))
        w("[list=1]\n")
        for name in member:
            w("[*]%s\n" % name)
        w("[/list]\n")
        s.seek(0)
        return s.read()

    def reportlist(self, d):
        s = StringIO.StringIO()
        w = s.write
        l = d.items()
        l.sort(lambda a, b: cmp(a[1], b[1]), reverse=True)
        w("[list=1]\n")
        for (name, count) in l:
            w("[*]%s (%s)\n" % (name, count))
        w("[/list]\n")
        s.seek(0)
        return s.read()

    def add(self, kill):
        if self.start is None or kill.ts < self.start:
            self.start = kill.ts
        if self.end is None or kill.ts > self.end:
            self.end = kill.ts
        self.add_activity(kill)
        self.add_fleetsize(kill)
        self.add_member(kill)
        self.add_region(kill)
        self.add_shiptype(kill)
        self.add_total(kill)

    def add_activity(self, kill):
        self.activity.add(kill.ts)

    def add_fleetsize(self, kill):
        if kill.killtype == 'kill':
            self.fleetsize.add(kill.involved)

    def add_member(self, kill):
        if kill.killtype == 'loss':
            self.member[kill.victim] = True

    def add_region(self, kill):
        reg = system2region(kill.system)
        self.region.setdefault(kill.killtype, {})
        self.region[kill.killtype].setdefault(reg, 0)
        self.region[kill.killtype][reg] += 1

    def add_shiptype(self, kill):
        if kill.killtype == 'loss':
            group = invtype2group(kill.shiptype)
            self.shiptype.setdefault(group, 0)
            self.shiptype[group] += 1

    def add_total(self, kill):
        if kill.killtype == 'kill':
            self.kills += 1
        else:
            self.losses += 1

class Activity(object):
    def __init__(self):
        # self.minutes = [0] * (24*60)
        self.hours = [0] * 24

    def add(self, ts):
        bef = (ts.hour - 1) % 24
        aft = (ts.hour + 1) % 24
        self.hours[ts.hour] += 0.5
        self.hours[bef] += 0.25
        self.hours[aft] += 0.25

class Series(object):
    def __init__(self):
        self.entries = []

    def add(self, amount):
        self.entries.append(amount)

    def average(self):
        return sum(self.entries) / float(len(self.entries))

    def median(self):
        self.entries.sort()
        return self.entries[int(len(self.entries) / 2)]

    def stddev(self):
        import math
        a = self.average()
        return math.sqrt(sum([(x-a)**2 for x in self.entries]) /
                         len(self.entries))

def make_percentages(l):
    total = float(sum(l))
    return [x/total for x in l]

_groups = None
def invtype2group(invtype):
    global _groups
    if _groups is None:
        c = db.cursor()
        c.execute("SELECT t.typename, g.groupname "
                  "FROM invTypes t "
                  "     INNER JOIN invgroups g "
                  "       ON t.groupid = g.groupid ")
        _groups = dict(c.fetchall())
    return _groups[invtype]

_regions = None
def system2region(system):
    global _regions
    if _regions is None:
        c = db.cursor()
        c.execute("SELECT s.solarsystemname, r.regionname "
                  "FROM mapsolarsystems s "
                  "     INNER JOIN mapregions r "
                  "       ON s.regionid = r.regionid ")
        _regions = dict(c.fetchall())
    return _regions[system]

if __name__ == '__main__':
    main()
