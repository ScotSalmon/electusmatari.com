#!/usr/bin/env python

# kireport --- killmail reporter

# Copyright (C) 2009 Arkady Sadik <arkady@arkady-sadik.de>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import csv
import datetime
import os
import math
import sys

from collections import defaultdict
from optparse import OptionParser

from lib import killinfo
from lib.util import eve_time
from lib import evedb

db = evedb.connect()
verbose = False

def log(s):
    if verbose:
        sys.stderr.write(s)

def main():
    parser = OptionParser(usage="%prog [OPTIONS] [DIRECTORIES] ...",
                          version="%prog 1.0")
    parser.add_option("--about", dest="about", metavar="ENTITY",
                      help="Generate a report about ENTITY",
                      default=None)
    parser.add_option("--after", dest="after_date", metavar="DATE",
                      help="Ignore kills before DATE",
                      default=None)
    parser.add_option("--before", dest="before_date", metavar="DATE",
                      help="Ignore kills past DATE",
                      default=None)
    parser.add_option("--timestamps", dest="timestamps", action="store_true",
                      help="Only report time stamps of kills", default=False)
    parser.add_option("--dailykills", dest="dailykills", action="store_true",
                      help="Report shift-wise daily kills", default=False)
    parser.add_option("--verbose", dest="verbose", action="store_true",
                      help="Be verbose", default=False)
    (options, args) = parser.parse_args()
    if len(args) == 0:
        args = ["."]
    global verbose
    verbose = options.verbose

    after_date = None
    before_date = None
    if options.after_date:
        after_date = datetime.datetime.strptime(options.after_date,
                                               "%Y-%m-%d")
    if options.before_date:
        before_date = datetime.datetime.strptime(options.before_date,
                                             "%Y-%m-%d")

    (about, kills) = load_kills(args, after_date, before_date, options.about)
    r = Report(about)
    for k in kills:
        r.add(k)
    if options.timestamps:
        r.report_timestamps()
    elif options.dailykills:
        r.report_dailykills()
    else:
        r.report()

class Report(object):
    def __init__(self, about):
        self.about = about
        # (timestamp, own_involved, allied_involved), ...
        self.kills = []
        # (timestamp, region), ...
        self.losses = []
        # entity => [(timestamp, involved), ...]
        self.allies = {}
        # entity => [(timestamp, involved), ...]
        self.enemies = {}
        # corp => [alliance, ...]
        self.alliances = {}
        # corp => [alliance, ...]
        self.pilots = {}
        # system => [timestamp, ...]
        self.systems = {}
        # region => [timestamp, ...]
        self.regions = {}
        # [(system, corp, type), ...]
        self.tower = []
        # name => (timestamp, security)
        self.security = {}

    def add(self, ki):
        self.add_alliances(ki)
        self.add_kill(ki)
        self.add_allies(ki)
        self.add_pilots(ki)
        self.add_area(ki)
        self.add_tower(ki)
        self.add_security(ki)

    def add_alliances(self, ki):
        for pilot in [ki.victim] + ki.involved:
            if pilot.corp not in self.alliances:
                self.alliances[pilot.corp] = {}
            if pilot.ally not in self.alliances[pilot.corp]:
                self.alliances[pilot.corp][pilot.ally] = 0
            self.alliances[pilot.corp][pilot.ally] += 1

    def add_kill(self, ki):
        if ki.victim.belongs_to(self.about):
            self.losses.append((ki.timestamp, system2region(ki.system)))
        else:
            (own_involved, own_capitals_involved) = ki.count_involved(self.about)
            total_involved = len(ki.involved)
            self.kills.append((ki.timestamp,
                               own_involved,
                               total_involved - own_involved,
                               system2region(ki.system),
                               own_capitals_involved))

    def add_allies(self, ki):
        involved = {}
        for pilot in ki.involved:
            if pilot.belongs_to(self.about):
                continue
            if pilot.corp not in involved:
                involved[pilot.corp] = 0
            involved[pilot.corp] += 1
            if pilot.ally != "None":
                if pilot.ally not in involved:
                    involved[pilot.ally] = 0
                involved[pilot.ally] += 1
        if ki.victim.belongs_to(self.about):
            for (name, count) in involved.items():
                if name not in self.enemies:
                    self.enemies[name] = []
                self.enemies[name].append((ki.timestamp, count))
        else:
            for (name, count) in involved.items():
                if name not in self.allies:
                    self.allies[name] = []
                self.allies[name].append((ki.timestamp, count))

    def add_pilots(self, ki):
        for pilot in [ki.victim] + ki.involved:
            if pilot.belongs_to(self.about):
                if pilot.name not in self.pilots:
                    self.pilots[pilot.name] = []
                self.pilots[pilot.name].append((ki.timestamp, pilot.ship))

    def add_area(self, ki):
        if ki.system not in self.systems:
            self.systems[ki.system] = []
        self.systems[ki.system].append(ki.timestamp)
        region = system2region(ki.system)
        if region not in self.regions:
            self.regions[region] = []
        self.regions[region].append(ki.timestamp)

    def add_tower(self, ki):
        for tower in ki.tower:
            self.tower.append((ki.system,
                               tower.corp,
                               tower.ship))

    def add_security(self, ki):
        for pilot in ki.involved:
            if not pilot.belongs_to(self.about):
                continue
            (lastdate, laststatus) = self.security.get(pilot.name, (None, 0))
            if lastdate is None or lastdate < ki.timestamp:
                self.security[pilot.name] = (ki.timestamp,
                                             pilot.security)

    def report_timestamps(self):
        kills = []
        for (region, timestamps) in self.regions.items():
            kills.extend((ts, region) for ts in timestamps)
        kills.sort()
        w = csv.writer(sys.stdout)
        for (ts, region) in kills:
            w.writerow([ts, region])

    def report_dailykills(self):
        kills = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: 0)))
        for (ts, oi, ai, region) in self.kills:
            date = ts.strftime("%Y-%m-%d")
            hour = int(ts.strftime("%H"))
            if hour >= 6 and hour < 14:
                shift = 1
            elif hour >= 14 and hour < 22:
                shift = 2
            elif hour >= 22 or hour < 6:
                shift = 3
            else:
                raise RuntimeException, "Bad hour %i" % hour
            kills[date][region][shift] += 1
        killlist = []
        for (date, regions) in kills.items():
            for (region, shifts) in regions.items():
                killlist.append([date, region,
                                 shifts[1], shifts[2], shifts[3]])
        killlist.sort()
        w = csv.writer(sys.stdout)
        for row in killlist:
            w.writerow(row)

    def report(self):
        print("= Automated Intel Report on '%s' =" % self.about)
        print("Generated on %s based on %i kills and %i losses from %s to %s."  %
              (eve_time(datetime.datetime.now()),
               len(self.kills), len(self.losses),
               eve_time(min([k[0] for k in self.kills] +
                            [l[0] for l in self.losses])),
               eve_time(max([k[0] for k in self.kills] + 
                            [l[0] for l in self.losses]))))
        print
        self.report_activity()
        self.report_area()
        self.report_group("Allies", self.allies)
        self.report_group("Enemies", self.enemies)
        self.report_pilots()

    def report_activity(self):
        print("== Activity ==")
        total_count = len(self.kills)
        solo_kills = [k for k in self.kills
                      if k[1] == 1 and k[2] == 0]
        fleet_kills = [k for k in self.kills
                       if (k[1] + k[2]) > 1]
        own_fleet_kills = [k for k in self.kills
                           if k[1] > 1 and k[2] == 0]
        allied_fleet_kills = [k for k in self.kills
                              if k[2] > 0]
        capital_fleet_kills = [k for k in self.kills
                               if k[4] > 0]
        self.report_fleet("All kills", self.kills)
        self.report_fleet("Fleet kills", fleet_kills)
        self.report_fleet("Fleet kills without allies", own_fleet_kills)
        self.report_fleet("Fleet kills with allies", allied_fleet_kills)
        self.report_fleet("Solo kills", solo_kills, averages=False)
        self.report_fleet("Capital Fleet kills", capital_fleet_kills)

    def report_fleet(self, name, fleet_kills, averages=True):
        total_count = len(self.kills)
        print("=== %s ===" % name)
        print("Count: %i (%.1f%%)" %
              (len(fleet_kills), (len(fleet_kills)/float(total_count))*100))
        if len(fleet_kills) == 0:
            print
            return
        if averages:
            print("Sizes: Avg %.1f, stddev %.1f, median %.1f, max %i" %
                  (avg([k[1]+k[2] for k in fleet_kills]),
                   stddev([k[1]+k[2] for k in fleet_kills]),
                   median([k[1]+k[2] for k in fleet_kills]),
                   max([k[1]+k[2] for k in fleet_kills])))
        print
        print("Percentage distribution per hour:")
        print " ".join("%02i" % h for h in range(0, 24))
        print " ".join("%2i" % round(x)
                       for x in hour_activity(fleet_kills, "percentages"))
        print
        if averages:
            print("Fleet size per hour:")
            print(" ".join("%02i" % h for h in range(0, 24)))
            print(" ".join("%2i" % round(x)
                           for x in hour_activity(fleet_kills, "pilots")))
            print
        print("Percentage distribution per weekday:")
        wd = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
        print(" ".join("%3s" % wd[d] for d in range(0, 7)))
        print(" ".join("%3i" % round(x)
                       for x in weekday_activity(fleet_kills, "percentages")))
        print
        if averages:
            print("Fleet size per weekday:")
            wd = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']
            print(" ".join("%3s" % wd[d] for d in range(0, 7)))
            print(" ".join("%3i" % round(x)
                           for x in weekday_activity(fleet_kills, "pilots")))
            print

    def report_area(self):
        total_count = len(self.kills) + len(self.losses)
        print "== Area of Operation =="
        print "=== Regions ==="
        regions = []
        for (name, timestamps) in self.regions.items():
            regions.append((len(timestamps),
                            name,
                            min(timestamps),
                            max(timestamps)))
        regions.sort()
        regions.reverse()
        for i in range(0, min(10, len(regions))):
            (kills, region, after_date, before_date) = regions[i]
            print("%2i. %s (%i kills / %i%%, last on %s)" %
                  (i+1, region, kills, (kills/float(total_count))*100,
                   eve_time(before_date)))
        print
        print "=== Systems ==="
        systems = []
        for (name, timestamps) in self.systems.items():
            systems.append((len(timestamps),
                            name,
                            min(timestamps),
                            max(timestamps)))
        systems.sort()
        systems.reverse()
        for i in range(0, min(10, len(systems))):
            (kills, system, after_date, before_date) = systems[i]
            print("%2i. %s, %s (%i kills / %i%%, last on %s)" %
                  (i+1, system, system2region(system),
                   kills, (kills/float(total_count))*100,
                   eve_time(before_date)))
        print
        print "=== Control Towers ==="
        towers = dict((("%s (%s / %s)" % (system, name, corp)),
                       (system, name, corp))
                       for (system, name, corp) in self.tower).values()
        towers.sort()
        i = 1
        for (system, corp, name) in towers:
            if (self.about == corp or 
                self.about in self.alliances.get(corp, [])):

                print "%2i. %s (%s / %s)" % (i, system, name, corp)
                i += 1
        print

    def report_group(self, name, group):
        total_count = len(self.kills)
        print("== %s ==" % name)
        grouplist = []
        for (corp, alliances) in self.alliances.items():
            if len(alliances) == 1 and 'None' not in alliances and corp in group:
                del group[corp]
        for (name, involved) in group.items():
            if name in self.alliances:
                alliance_counts = self.alliances[name].items()
                alliance_counts.sort(lambda a, b: cmp((b[1], a[0]),
                                                      (a[1], b[0])))
                name = ("%s (%s)" %
                        (name, ", ".join("%s x%i" % (name, count)
                                         for (name, count)
                                         in alliance_counts)))
            #count = sum([inv for (timestamp, inv) in involved])
            count = len(involved)
            last_seen = max([timestamp for (timestamp, inv) in involved])
            grouplist.append((count, name, last_seen))
        grouplist.sort()
        grouplist.reverse()
        for i in range(0, min(10, len(grouplist))):
            (count, name, last_seen) = grouplist[i]
            print("%2i. %s (%i kills / %i%%, last on %s)" %
                  (i+1, name, count, (count/float(total_count))*100,
                   eve_time(last_seen)))
        print

    def report_pilots(self):
        total_count = len(self.kills)
        print("== Pilots ==")
        self.report_security()
        caps = capitals()
        cap_pilots = {}
        falcon_pilots = {}
        all_pilots = {}
        for (pilot, activities) in self.pilots.items():
            for (timestamp, ship) in activities:
                if ship in caps:
                    if pilot not in cap_pilots:
                        cap_pilots[pilot] = {}
                    if ship not in cap_pilots[pilot]:
                        cap_pilots[pilot][ship] = []
                    cap_pilots[pilot][ship].append(timestamp)
                if ship == 'Falcon':
                    if pilot not in falcon_pilots:
                        falcon_pilots[pilot] = []
                    falcon_pilots[pilot].append(timestamp)
                if pilot not in all_pilots:
                    all_pilots[pilot] = {}
                if ship not in all_pilots[pilot]:
                    all_pilots[pilot][ship] = 0
                all_pilots[pilot][ship] += 1
        print("=== Capital Ship Pilots ===")
        pilots = cap_pilots.keys()
        pilots.sort(lambda a, b: cmp(a.lower(), b.lower()))
        for i in range(0, len(pilots)):
            name = pilots[i]
            ships = []
            appearances = []
            for (ship, timestamps) in cap_pilots[name].items():
                ships.append((len(timestamps), ship))
                appearances.extend(timestamps)
            ships.sort()
            ships.reverse()
            pilot_count = sum(all_pilots[name].values())
            print("%3i. %s (%i appearances / %i%%, last on %s: %s)" %
                  (i+1,
                   name,
                   len(appearances),
                   round((len(appearances)/float(pilot_count))*100),
                   max(appearances),
                   ", ".join(["%ix %s" % (count, name)
                              for (count, name) in ships])))
        print
        print("=== Falcon Pilots ===")
        pilots = falcon_pilots.keys()
        pilots.sort(lambda a, b: cmp(a.lower(), b.lower()))
        for i in range(0, len(pilots)):
            pilot = pilots[i]
            falcon_count = len(falcon_pilots[pilot])
            pilot_count = sum(all_pilots[pilot].values())
            print("%3i. %s (%i appearances in Falcon / %i%%)" %
                  (i+1, pilot, falcon_count,
                   round((falcon_count/float(pilot_count))*100)))
        print
        print("=== Known Pilots ===")
        pilots = all_pilots.keys()
        pilots.sort(lambda a, b: cmp(a.lower(), b.lower()))
        for i in range(0, len(pilots)):
            pilot = pilots[i]
            pilot_count = sum(all_pilots[pilot].values())
            ships = {}
            for (ts, ship) in self.pilots[pilot]:
                if ship not in ships:
                    ships[ship] = 0
                ships[ship] += 1
            ships = [(count, ship) for (ship, count) in ships.items()]
            ships.sort()
            ships.reverse()
            print("%3i. %s (%i appearances / %i%%, last on %s: %s)" %
                  (i+1,
                   pilot,
                   pilot_count,
                   round((pilot_count/float(total_count))*100),
                   max([ts for (ts, ship) in self.pilots[pilot]]),
                   ", ".join("%ix %s" % (count, ship)
                             for (count, ship) in ships)))
        print
        
    def report_security(self):
        print("=== Outlaws ===")
        noutlaws = sum(1 for (lastdate, security) in self.security.values()
                       if security <= -5.0)
        ntotal = len(self.security)
        if ntotal > 0:
            print("All time: %i / %i, %.1f%%"
                  % (noutlaws, ntotal, ((noutlaws*1.0) / ntotal)*100))
        lastmonth = (datetime.datetime.utcnow() - datetime.timedelta(days=30))
        noutlaws = sum(1 for (lastdate, security) in self.security.values()
                       if lastdate > lastmonth and security <= -5.0)
        ntotal = sum(1 for (lastdate, security) in self.security.values()
                     if lastdate > lastmonth)
        if ntotal > 0:
            print("Last month: %i / %i, %.1f%%"
                  % (noutlaws, ntotal, ((noutlaws*1.0) / ntotal)*100))
        lastweek = (datetime.datetime.utcnow() - datetime.timedelta(days=7))
        noutlaws = sum(1 for (lastdate, security) in self.security.values()
                       if lastdate > lastweek and security <= -5.0)
        ntotal = sum(1 for (lastdate, security) in self.security.values()
                     if lastdate > lastweek)
        if ntotal > 0:
            print("Last week: %i / %i, %.1f%%"
                  % (noutlaws, ntotal, ((noutlaws*1.0) / ntotal)*100))
        print

class Kill(object):
    def __init__(self, timestamp, system, victim, involved, tower):
        self.timestamp = timestamp
        self.system = system
        self.victim = victim
        self.involved = involved
        self.tower = tower

    def __repr__(self):
        return "<Kill: %s>" % self.victim

    def is_about(self, about):
        for pilot in [self.victim] + self.involved:
            if pilot.belongs_to(about):
                return True
        return False

    def count_involved(self, name):
        count = 0
        capcount = 0
        for pilot in self.involved:
            if pilot.belongs_to(name):
                count += 1
                if pilot.uses_cap():
                    capcount += 1
        return count, capcount

class Pilot(object):
    def __init__(self, name, corp, ally, ship, security=None, faction=""):
        self.name = name
        self.corp = corp
        if ally.lower() == "none":
            self.ally = "None"
        else:
            self.ally = ally
        if faction.lower() == "none":
            self.faction = "None"
        else:
            self.faction = faction
        self.ship = ship
        if security is not None:
            self.security = float(security.replace(",", "."))
        else:
            self.security = None

    def __repr__(self):
        return "<Pilot: %s / %s / %s>" % (self.name, self.corp, self.ally)

    def belongs_to(self, about):
        if (self.corp.lower() == about.lower() or
            self.ally.lower() == about.lower() or
            self.faction.lower() == about.lower()):
            return True
        return False

    def uses_cap(self):
        return self.ship in capitals()

def load_kills(directories, after_date, before_date, about):
    total_count = 0
    dropped_before = 0
    dropped_after = 0
    kills = []
    for f in directory_files(directories):
        total_count += 1
        try:
            kill = translate_killinfo(killinfo.load(file(f)))
        except Exception, e:
            sys.stderr.write("Error parsing file %s\n" % f)
            raise
        if after_date is not None and kill.timestamp < after_date:
            dropped_before += 1
            continue
        if before_date is not None and kill.timestamp > before_date:
            dropped_after += 1
            continue
        kills.append(kill)
    log("Loaded %i kills.\n" % total_count)
    if after_date:
        log("Dropped %i kills from before %s.\n" %
            (dropped_before, after_date.strftime("%Y-%m-%d")))
    if before_date:
        log("Dropped %i kills from after %s.\n" %
            (dropped_after, before_date.strftime("%Y-%m-%d")))
    if about is None:
        about = get_about(kills)
        log("Guessing we are reporting about '%s'.\n" % about)
    before = len(kills)
    kills = [k for k in kills if k.is_about(about)]
    log("Dropped %i kills not about '%s'.\n" %
        ((before-len(kills)),
         about))
    log("Analyzing %i kills.\n" % len(kills))
    return (about, kills)

def translate_killinfo(ki):
    """Translate a killinfo into an internal format."""
    if 'Victim' in ki.victim:
        victim_name = ki.victim['Victim']
    else:
        victim_name = ki.victim['Moon']
    return Kill(ki.timestamp,
                ki.victim['System'],
                Pilot(victim_name, ki.victim['Corp'], ki.victim['Alliance'],
                      ki.victim['Destroyed'],
                      faction=ki.victim['Faction']),
                [Pilot(party['Name'], party['Corp'], party['Alliance'],
                       party['Ship'],
                       security=party['Security'],
                       faction=party['Faction'])
                 for party in ki.involved
                 if party['Capsuleer']],
                [Pilot(party['Name'], party['Corp'], 'None', party['Name'])
                 for party in ki.involved
                 if 'Control Tower' in party['Name'] and
                 not party['Capsuleer']])

def get_about(kills):
    about = {}
    for kill in kills:
        this_about = {}
        for pilot in [kill.victim] + kill.involved:
            if pilot.corp.lower() != 'none':
                this_about[pilot.corp] = True
            if pilot.ally.lower() != 'none':
                this_about[pilot.ally] = True
            for name in this_about.keys():
                if name not in about:
                    about[name] = 0
                about[name] += 1
    about = [(count, name) for (name, count) in about.items()]
    about.sort()
    return about[-1][1]

def hour_activity(kills, reporttype):
    if reporttype == 'pilots':
        act_bin = [0 for x in range(0, 24)]
        den_bin = [0 for x in range(0, 24)]
        for (timestamp, own, allied, region, capinvolved) in kills:
            act_bin[hour(timestamp)] += 0.5*(own+allied)
            act_bin[hour(timestamp, -1)] += 0.25*(own+allied)
            act_bin[hour(timestamp, +1)] += 0.25*(own+allied)
            den_bin[hour(timestamp)] += 0.5
            den_bin[hour(timestamp, -1)] += 0.25
            den_bin[hour(timestamp, +1)] += 0.25
        data = []
        for h in range(0, 24):
            if den_bin[h] == 0:
                assert act_bin[h] == 0
                data.append(0)
            else:
                data.append(act_bin[h]/den_bin[h])
        return data
    elif reporttype == 'percentages':
        bin = [0 for x in range(0, 24)]
        div = len(kills)
        for (timestamp, own, allied, region, capinvolved) in kills:
            bin[hour(timestamp)] += 0.5
            bin[hour(timestamp, -1)] += 0.25
            bin[hour(timestamp, +1)] += 0.25
        return [((bin[h]/div)*100) for h in range(0, 24)]

def weekday_activity(kills, reporttype):
    if reporttype == 'pilots':
        act_bin = [0 for x in range(0, 24)]
        den_bin = [0 for x in range(0, 24)]
        for (timestamp, own, allied, region, capinvolved) in kills:
            if timestamp.hour >= 22:
                act_bin[timestamp.weekday()] += 0.75*(own+allied)
                act_bin[(timestamp.weekday() + 1) % 7] += 0.25*(own+allied)
                den_bin[timestamp.weekday()] += 0.75
                den_bin[(timestamp.weekday() + 1) % 7] += 0.25
            elif timestamp.hour <= 2:
                act_bin[timestamp.weekday()] += 0.75*(own+allied)
                act_bin[(timestamp.weekday() + 1) % 7] += 0.25*(own+allied)
                den_bin[timestamp.weekday()] += 0.75
                den_bin[(timestamp.weekday() + 1) % 7] += 0.25
            else:
                act_bin[timestamp.weekday()] += (own+allied)
                den_bin[timestamp.weekday()] += 1
        data = []
        for d in range(0, 7):
            if den_bin[d] == 0:
                assert act_bin[d] == 0
                data.append(0)
            else:
                data.append(act_bin[d]/den_bin[d])
        return data
    elif reporttype == 'percentages':
        bin = [0 for x in range(0, 7)]
        div = len(kills)
        for (timestamp, own, allied, region, capinvolved) in kills:
            if timestamp.hour >= 22:
                bin[timestamp.weekday()] += 0.75
                bin[(timestamp.weekday() + 1) % 7] += 0.25
            elif timestamp.hour <= 2:
                bin[timestamp.weekday()] += 0.75
                bin[(timestamp.weekday() - 1) % 7] += 0.25
            else:
                bin[timestamp.weekday()] += 1
        return [((bin[d]/float(div))*100) for d in range(0, 7)]

def hour(t, add=0):
    h = (t.hour + (t.minute/60.0)) + add
    return int(round(h)) % 24

system2region_mapping = {}
def system2region(system):
    if system not in system2region_mapping:
        c = db.cursor()
        c.execute("""
SELECT r.regionname
FROM mapSolarSystems s
     INNER JOIN mapRegions r
       ON s.regionID = r.regionID
WHERE s.solarSystemName = %s
""", (system,))
        if c.rowcount != 1:
            sys.stderr.write("Bad system name %s\n" % system)
            sys.exit(1)
        system2region_mapping[system] = c.fetchone()[0]
    return system2region_mapping[system]

capitals_cache = None
def capitals():
    global capitals_cache
    if capitals_cache is None:
        c = db.cursor()
        c.execute("""
SELECT t.typeName
FROM invTypes t
     INNER JOIN invGroups g
       ON t.groupID = g.groupID
WHERE g.groupName IN ('Carrier', 'Dreadnought', 'Supercarrier', 'Titan')
""")
        capitals_cache = [name for (name,) in c.fetchall()]
    return capitals_cache

def avg(lis):
    return sum(lis)/len(lis)

def median(lis):
    lis.sort()
    if (len(lis) % 2) == 0:
        mid = int(len(lis) / 2.0)
        return (lis[mid-1] + lis[mid]) / 2.0
    else:
        return float(lis[len(lis) / 2])

def stddev(lis):
    a = avg(lis)
    return math.sqrt(sum([(x-a)**2 for x in lis])/len(lis))

def directory_files(agenda):
    for entry in agenda:
        if os.path.isdir(entry):
            agenda.extend([os.path.join(entry, filename)
                           for filename in os.listdir(entry)
                           if not filename.startswith(".")])
        else:
            yield entry

main()
