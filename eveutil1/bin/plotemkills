#!/usr/bin/env python

import csv
import datetime

from collections import defaultdict

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib import dates
from matplotlib.patches import FancyArrowPatch

def main():
    days = 28*3
    fullhistory(days, '/home/forcer/public_html/em-kills.png')
    fullhistory(days, '/home/forcer/public_html/em-kills-1st.png',
                aboutshift=1)
    fullhistory(days, '/home/forcer/public_html/em-kills-2nd.png',
                aboutshift=2)
    fullhistory(days, '/home/forcer/public_html/em-kills-3rd.png',
                aboutshift=3)
    shifthistory(days, '/home/forcer/public_html/em-kills-shiftwise.png')

def shift(s):
    def is_time(time):
        hour = int(time.split(":")[0])
        if hour >= 6 and hour < 14:
            shift = 1
        elif hour >= 14 and hour < 22:
            shift = 2
        elif hour >= 22 or hour < 6:
            shift = 3
        else:
            raise RuntimeException, "Bad hour %i" % hour
        return shift == s
    return is_time

def fullhistory(days, outfile, aboutshift=None):
    fig = plt.figure()
    kplt = fig.add_subplot(111)
    mvgstart = (datetime.datetime.strptime("2006-08-20", "%Y-%m-%d")
                + datetime.timedelta(days=days))

    if aboutshift is None:
        select = lambda time: True
    else:
        select = shift(aboutshift)

    kpdra = getkills("2006-08-20", days, 
                     lambda ts, kpd, lpd: kpd.get(ts, 0),
                     select=select)
    lpdra = getkills("2006-08-20", days,
                     lambda ts, kpd, lpd: lpd.get(ts, 0),
                     select=select)
    def efficiency(ts, kpd, lpd):
        if kpd.get(ts, 0) == 0:
            if lpd.get(ts, 0) == 0:
                return None
            else:
                return 0
        else:
            return kpd[ts] / float(kpd[ts] + lpd.get(ts, 0))
    epdra = getkills("2006-08-20", days, efficiency,
                     select=select)

    yl = dates.YearLocator()
    ml = dates.MonthLocator()
    kplt.xaxis.set_major_locator(yl)
    kplt.xaxis.set_minor_locator(ml)
    kplt.set_xlabel('Time')
    kplt.set_ylabel('Kills')
    kplt.grid(True)

    eplt = kplt.twinx()
    eplt.set_autoscale_on(False)
    eplt.xaxis.set_major_locator(yl)
    eplt.xaxis.set_minor_locator(ml)
    eplt.set_yticks([0, 0.5, 1])
    eplt.set_ylim(0, 6)
    eplt.set_ylabel('Efficiency')
    eplt.axhline(y=0.5, color='r', alpha=0.5)

    addemdates(eplt, mvgstart)

    kplt.plot([x[0] for x in kpdra],
              [x[1] for x in kpdra],
              'g-', label="Kills")
    kplt.plot([x[0] for x in lpdra],
              [x[1] for x in lpdra],
              'r-', label="Losses")
    eplt.plot([x[0] for x in epdra],
              [x[1] for x in epdra],
              'b-', label="Efficiency")
    kplt.legend(loc='upper left')
    kplt.set_xlim(xmin=mvgstart, xmax=kpdra[-1][0])
    eplt.set_xlim(xmin=mvgstart, xmax=kpdra[-1][0])
    fig.savefig(outfile, width=800, height=600)

def shifthistory(days, outfile):
    fig = plt.figure()
    kplt = fig.add_subplot(111)
    mvgstart = (datetime.datetime.strptime("2006-08-20", "%Y-%m-%d")
                + datetime.timedelta(days=days))

    s1 = getkills("2006-08-20", days, 
                  lambda ts, kpd, lpd: kpd.get(ts, 0),
                  select=shift(1))
    s2 = getkills("2006-08-20", days, 
                  lambda ts, kpd, lpd: kpd.get(ts, 0),
                  select=shift(2))
    s3 = getkills("2006-08-20", days, 
                  lambda ts, kpd, lpd: kpd.get(ts, 0),
                  select=shift(3))

    yl = dates.YearLocator()
    ml = dates.MonthLocator()
    kplt.xaxis.set_major_locator(yl)
    kplt.xaxis.set_minor_locator(ml)
    kplt.set_xlabel('Time')
    kplt.set_ylabel('Kills')
    kplt.grid(True)

    eplt = kplt.twinx()
    eplt.set_autoscale_on(False)
    eplt.xaxis.set_major_locator(yl)
    eplt.xaxis.set_minor_locator(ml)
    eplt.set_yticks([])
    eplt.set_ylim(0, 6)

    addemdates(eplt, mvgstart)

    kplt.plot([x[0] for x in s1],
              [x[1] for x in s1],
              'g-', label="1st Shift")
    kplt.plot([x[0] for x in s2],
              [x[1] for x in s2],
              'r-', label="2nd Shift")
    kplt.plot([x[0] for x in s3],
              [x[1] for x in s3],
              'c-', label="3rd Shift")
    kplt.set_xlim(xmin=mvgstart, xmax=s2[-1][0])
    eplt.set_xlim(xmin=mvgstart, xmax=s2[-1][0])
    kplt.legend(loc='upper left')
    fig.savefig(outfile, width=800, height=600)

def getkills(start, days, f,
             getvalue=lambda shiptype, value: 1,
             select=lambda x: True):
    killlist = list(csv.reader(file("em-kills.txt")))
    kpd = defaultdict(lambda: 0)
    lpd = defaultdict(lambda: 0)
    for (day, time, region, killorloss, ship, value, republic) in killlist:
        if select(time):
            if killorloss == 'kill':
                kpd[day] += getvalue(ship, float(value))
            else:
                lpd[day] += getvalue(ship, float(value))
    killdata = {}
    start = datetime.datetime.strptime(killlist[0][0], "%Y-%m-%d")
    end = datetime.datetime.strptime(killlist[-1][0], "%Y-%m-%d")
    inc = datetime.timedelta(days=1)
    now = start
    while now <= end:
        nowiso = now.strftime("%Y-%m-%d")
        killdata[nowiso] = f(nowiso, kpd, lpd)
        now += inc
    kpd = killdata.items()
    kpd.sort()
    kpdra = zip([datetime.datetime.strptime(x[0], "%Y-%m-%d") for x in kpd],
                raverage([x[1] for x in kpd], days),
                [x[1] for x in kpd])
    return kpdra

def raverage(seq, n):
    result = []
    for i in range(0, len(seq)):
        subseq = [x for x in seq[max(0, (i+1-n)):i+1]
                  if x is not None]
        if len(subseq) == 0:
            result.append("NaN")
        else:
            result.append(sum(subseq) / float(len(subseq)))
    return result

def addemdates(plt, xmin=False):
    smallskip = 0.05
    bigskip = 0.25
    battle_y = 5.75
    war_y = 4.80
    corp_y = 2.9
    def d(date):
        return datetime.datetime.strptime(date, "%Y-%m-%d")
    def war(start, end, label):
        plt.axvspan(d(start), d(end), color="k", alpha=0.05)
    def longwar(start, end, label, pos=0):
        yst = war_y
        ax = plt
        (_, xmax) = ax.get_xlim()
        start = dates.date2num(d(start))
        if end is None:
            end = xmax
        else:
            end = dates.date2num(d(end))
        ax.annotate(label, (start, yst-bigskip*pos), alpha=0.8)
        ax.add_patch(FancyArrowPatch((start, (yst-smallskip)-bigskip*pos),
                                     (end, (yst-smallskip)-bigskip*pos),
                                     arrowstyle="->",
                                     mutation_scale=30,
                                     alpha=0.5
                                     ))
    def corp(start, end, label, pos=0, labelstart=False):
        yst = corp_y
        ax = plt
        (_, xmax) = ax.get_xlim()
        start = dates.date2num(d(start))
        if end is None:
            end = xmax
            color = 'g'
        else:
            end = dates.date2num(d(end))
            color = 'r'
        if labelstart:
            labelstart = dates.date2num(labelstart) + 10
        else:
            labelstart = start
        ax.annotate(label, (labelstart, yst-bigskip*pos),
                    alpha=0.8)
        ax.add_patch(FancyArrowPatch((start, (yst-smallskip)-bigskip*pos),
                                     (end, (yst-smallskip)-bigskip*pos),
                                     arrowstyle="->",
                                     mutation_scale=30,
                                     alpha=0.5,
                                     color=color
                                     ))
        
    def battle(timestamp, label, pos=0):
        yst = battle_y
        plt.axvline(d(timestamp), color="r", linestyle="-", alpha=0.5)
        plt.annotate(label, (d(timestamp), yst-bigskip*pos), alpha=0.8)

    war("2008-02-08", "2008-02-22", "Misfits war")
    war("2008-03-04", "2008-03-12", "PRVTR war")
    war("2008-04-17", "2008-05-01", "LUPU war")
    war("2008-05-10", "2008-05-12", "SANDS war")
    war("2008-05-17", "2008-06-02", "ZER0 war")
    war("2008-07-17", "2008-07-25", "HAND war")
    war("2008-07-19", "2008-07-26", "AFC war")
    war("2008-01-03", "2008-01-04", "DRDSV war")
    war("2008-08-05", "2008-08-21", "AFEW war")
    war("2008-08-26", "2008-09-02", "PRVTR war")
    war("2008-09-19", "2008-10-02", "Bosena campaign")
    war("2008-09-24", "2008-10-01", "BYDI war")
    war("2008-10-17", "2008-10-24", "TOMB war")
    war("2008-10-31", "2008-11-13", "Evati campaign")
    war("2008-11-20", "2008-11-23", "METH war")
    war("2008-11-28", "2008-11-13", "MH campaign")
    war("2008-12-08", "2008-12-13", "I.M.M war")
    war("2008-12-29", "2009-01-23", "MODE wars")
    war("2009-01-16", "2009-01-22", "Amamake campaign")
    war("2009-01-31", "2009-02-03", "FA!LD war")
    war("2009-02-01", "2009-02-08", "MODE war")
    war("2009-02-13", "2009-03-05", "MH campaign")
    war("2009-02-19", "2009-02-20", "DEC-X war")
    war("2009-03-20", "2009-04-03", "MEN. war")
    war("2009-04-17", "2009-04-30", "GW campaign")
    war("2009-05-08", "2009-05-21", "Amamake campaign")
    war("2009-07-06", "2009-07-20", "T7M war")
    war("2009-08-01", "2009-08-24", "AGGR war")
    war("2009-08-28", "2009-09-01", "Brin campaign")
    war("2009-09-15", "2009-09-29", "SHDC war")
    war("2009-10-27", "2009-11-04", "EXALT war")
    war("2009-10-31", "2009-11-27", "PRVTR war")
    war("2009-11-11", "2009-11-18", "DEMON war")
    war("2010-03-07", "2010-03-14", "TOWM war")
    war("2010-03-16", "2010-03-23", "DELAI war")
    war("2010-04-01", "2010-04-08", "SOL war")
    war("2010-04-18", "2010-04-22", "SYMB war")
    war("2010-04-20", "2010-04-29", "SRE war")
    war("2010-04-27", "2010-05-03", "CRUEL war")
    war("2010-05-05", "2010-05-10", "SRE war 2")
    war("2010-05-31", "2010-06-04", "Everto war")
    war("2010-05-19", "2010-06-04", "SRE war 3")
    war("2010-06-05", "2010-06-13", "Merc wars")
    war("2010-06-10", "2010-06-18", "PRVTR war")
    war("2010-06-18", "2010-07-24", "Mean war")
    war("2010-06-22", "2010-07-05", "FOCU war")
    war("2010-07-23", "2010-08-06", "RECLM war")
    war("2010-10-05", "2010-10-12", "THC2 war")
    war("2010-10-27", "2010-11-03", "FSBS war")
    war("2010-10-23", "2010-11-07", "TEXN war")
    war("2011-01-01", "2011-01-15", "APAX war")
    war("2011-01-15", "2011-01-23", "1PG war")
    war("2011-02-13", "2011-02-20", "YOINK war")

    longwar("2007-02-16", "2008-06-10", "PIE", 0)
    longwar("2007-07-07", "2008-11-24", "VV", 1)
    longwar("2007-08-19", "2008-11-24", "BOBBY", 2)
    longwar("2008-06-17", "2009-02-17", "VFOR", 3)
    longwar("2009-01-08", None, "PIE", 0)
    longwar("2009-02-17", "2009-03-31", "AFC", 2)
    longwar("2009-07-02", "2009-08-14", "EA1", 2)
    longwar("2009-12-11", "2010-01-17", "Militia", 2)
    longwar("2010-05-21", "2010-06-30", "Jovians", 2)
    longwar("2010-11-25", "2010-12-24", "Metropolis", 3)
    longwar("2011-01-28", "2011-03-04", "Phobos", 2)

    corp("2006-07-12", None, "RE-AW", pos=0, labelstart=xmin)
    corp("2007-04-09", None, "GRD", pos=1)
    corp("2008-11-07", None, "SOERR", pos=2)
    corp("2009-02-19", None, "BIONE", pos=3)
    corp("2009-08-09", None, "TWB", pos=4)
    corp("2009-09-03", None, "TCMS", pos=5)
    corp("2007-01-16", "2009-01-16", "CLTY", pos=6)
    corp("2010-05-08", None, "CLTY", pos=6)
    corp("2010-10-06", None, "LUTI", pos=7)
    corp("2011-02-03", None, "SIF", pos=8)

    corp("2007-12-31", "2009-05-26", "LIBER", pos=8)
    corp("2008-05-05", "2008-06-09", "IXDS", pos=9)
    corp("2008-08-02", "2008-08-24", "VOR.", pos=9)
    corp("2008-12-31", "2009-02-22", "SERAB", pos=9)
    corp("2009-06-02", "2009-12-13", "CAFCO", pos=9)
    corp("2010-02-26", "2010-05-12", "CYBCO", pos=9)
    corp("2010-05-02", "2010-06-13", "COVU", pos=8)

    battle("2007-08-05", "Battle of Jark", pos=0)
    battle("2008-03-09", "Battle of Brin", pos=0)
    battle("2008-06-08", "Battle of Gyng", pos=1)
    battle("2008-09-27", "Battle of M-M", pos=2)
    battle("2009-03-21", "Battle of Oddelulf", pos=1)
    # battle("2009-10-18", "PODLA", 3)

if __name__ == '__main__':
    main()
