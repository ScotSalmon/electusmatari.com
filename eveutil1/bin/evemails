#!/usr/bin/env python

import datetime
import psycopg2

from lib import characters, eveapi
from lib import evedb
from lib import dbutil

def main():
    db = psycopg2.connect(database="eve")
    c = db.cursor()
    chars = characters.list()
    for charname in chars:
        charid = chars[charname][2]
        char = characters.char(charname)
        try:
            get_mails(char, c, charid)
        except eveapi.Error:
            pass
        try:
            get_notifications(char, c, charid)
        except eveapi.Error:
            pass
    db.commit()
    print_new(c)

def get_mails(char, c, charid):
    mails = char.MailMessages()
    for msg in mails.mailMessages:
        recipients = []
        if type(msg.toCorpOrAllianceID) is int:
            recipients.append(msg.toCorpOrAllianceID)
        if type(msg.toCharacterIDs) is str:
            recipients.extend([int(x) for x in msg.toCharacterIDs.split(",")])
        elif type(msg.toCharacterIDs) is int:
            recipients.append(msg.toCharacterIDs)
        save_mail(c, charid,
                  msg.messageID,
                  msg.senderID,
                  datetime.datetime.utcfromtimestamp(msg.sentDate),
                  msg.title,
                  recipients,
                  [int(x) for x in msg.toListIDs.split(",")
                   if x.isdigit()],
                  't' if msg.read else 'f')

def save_mail(c, charid, msgid, senderid, sent, title,
              recipients, lists, read):
    c.execute("SELECT read FROM api_mailmessages "
              "WHERE id = %s", (msgid,))
    if c.rowcount == 1:
        (oldread,) = c.fetchone()
        if read != oldread:
            c.execute("UPDATE api_mailmessages SET read = %s WHERE id = %s",
                      (read, msgid))
        return
    dbutil.ensure_characterids([senderid] + recipients)
    c.execute("INSERT INTO api_mailmessages (id, owner_id, sender_id, "
              "    sentdate, title, read) VALUES (%s, %s, %s, %s, %s, %s) "
              "RETURNING id",
              (msgid, charid, senderid, sent, title, read))
    (msgid,) = c.fetchone()
    for recipientid in recipients:
        c.execute("INSERT INTO api_mail_recipients (message_id, name_id) "
                  " VALUES (%s, %s)",
                  (msgid, recipientid))

def get_notifications(char, c, charid):
    notif = char.Notifications()
    for note in notif.notifications:
        save_note(c, charid,
                  note.notificationID,
                  note.typeID,
                  note.senderID,
                  datetime.datetime.utcfromtimestamp(note.sentDate),
                  't' if note.read else 'f')

def save_note(c, charid, noteid, typeid, senderid, sent, read):
    c.execute("SELECT read FROM api_notifications "
              "WHERE id = %s", (noteid,))
    if c.rowcount == 1:
        (oldread,) = c.fetchone()
        if read != oldread:
            c.execute("UPDATE api_notifications SET read = %s WHERE id = %s",
                      (read, noteid))
        return
    dbutil.ensure_characterids([charid, senderid])
    c.execute("INSERT INTO api_notifications (owner_id, id, type_id, "
              "    sender_id, sent, read) "
              "VALUES (%s, %s, %s, %s, %s, %s)",
              (charid, noteid, typeid, senderid, sent, read))

def print_new(c):
    c.execute("SELECT o.name AS owner, "
              "       n.sent AS sent, "
              "       s.name AS sender, "
              "       nt.name AS title "
              "FROM api_notifications n "
              "     INNER JOIN api_names o "
              "       ON n.owner_id = o.id "
              "     INNER JOIN api_notificationtypes nt "
              "       ON n.type_id = nt.id "
              "     INNER JOIN api_names s "
              "       ON n.sender_id = s.id "
              "WHERE NOT read "
              ""
              "UNION "
              ""
              "SELECT o.name AS owner, "
              "       m.sentdate AS sent, "
              "       s.name AS sender, "
              "       m.title AS title "
              "FROM api_mailmessages m "
              "     INNER JOIN api_names o "
              "       ON m.owner_id = o.id "
              "     INNER JOIN api_names s "
              "       ON m.sender_id = s.id "
              "WHERE NOT read "
              ""
              "ORDER BY sent")
    for (owner, sent, sender, title) in c.fetchall():
        print "%s %-15s %-15s %s" % (sent.strftime("%Y-%m-%d %H:%M"),
                                     owner,
                                     sender,
                                     title)


if __name__ == '__main__':
    main()


"""
CREATE TABLE api_names (
  id INTEGER PRIMARY KEY,
  name VARCHAR(255) NOT NULL
);

CREATE TABLE api_mail_recipients (
  id SERIAL PRIMARY KEY,
  message_id INTEGER NOT NULL REFERENCES api_mailmessages(id),
  name_id INTEGER NOT NULL REFERENCES api_names(id)
);

CREATE TABLE api_mail_lists (
  id SERIAL PRIMARY KEY,
  message_id INTEGER NOT NULL REFERENCES api_mailmessages(id),
  mailinglist_id INTEGER NOT NULL
);

CREATE TABLE api_mailmessages (
  id INTEGER PRIMARY KEY,
  sender_id INTEGER NOT NULL REFERENCES api_names(id),
  sentdate TIMESTAMP NOT NULL,
  title TEXT NOT NULL,
  read BOOLEAN NOT NULL
);
"""
