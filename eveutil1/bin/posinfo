#!/usr/bin/env python

import datetime
import sys

from lib import characters, cache, evedb, util

db = evedb.connect()

def stamp(ts):
    return util.eve_time(datetime.datetime.utcfromtimestamp(ts))

def main():
    grd = characters.corp(configfile="/home/forcer/.grdkey",
                          cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    towers = []
    for sb in grd.StarbaseList().starbases:
        detail = grd.StarbaseDetail(itemID=sb.itemID)
        typename = get_typename(sb.typeID)
        if sb.moonID == 0:
            location = get_system(sb.locationID)
        else:
            location = get_moon(sb.moonID)
        if sb.state == 0:
            state = "Unanchored since %s" % stamp(sb.stateTimestamp)
            short_state = "Unanchored"
        elif sb.state == 1:
            state = "Offline"
            short_state = "Offline"
        elif sb.state == 2:
            state = "Onlining until %s" % stamp(sb.onlineTimestamp)
            short_state = "Onlining"
        elif sb.state == 3:
            state = "REINFORCED until %s" % stamp(sb.stateTimestamp)
            short_state = "REINFORCED"
        elif sb.state == 4:
            state = "Online since %s" % stamp(sb.onlineTimestamp)
            short_state = "Online"
        else:
            state = "Unknown state %s" % sb.state
            short_state = "Unknown"
        access = []
        if detail.generalSettings.allowCorporationMembers:
            access.append("Corp")
        if detail.generalSettings.allowAllianceMembers:
            access.append("Alliance")
        if len(access) == 0:
            access = ["Password only"]
        standing = (detail.combatSettings.onStandingDrop.standing/100.0)
        flags = []
        if not detail.combatSettings.onCorporationWar.enabled:
            flags.append("Don't Attack on War")
        if detail.combatSettings.onAggression.enabled:
            flags.append("Attack on Aggression")
        if detail.combatSettings.onStatusDrop.enabled:
            flags.append("Attack on Sec Status Drop")
        (fuel_timer, stront_timer) = get_fuel(sb.typeID, detail.fuel)
        towers.append({"location": location,
                       "typename": typename,
                       "state": state,
                       "short_state": short_state,
                       "access": access,
                       "standing": standing,
                       "fuel_timer": fuel_timer,
                       "stront_timer": stront_timer,
                       "flags": flags})
    towers.sort(lambda a, b: cmp(a["fuel_timer"], b["fuel_timer"]))
    for t in towers:
        if "-v" in sys.argv:
            print "* %s (%s)" % (t["location"], t["typename"])
            print "%s" % t["state"]
            print "Access: %s" % ", ".join(t["access"])
            print "Attack if standing below %s" % t["standing"]
            print "Fuel: %s" % humane_hours(t["fuel_timer"])
            print "Stront: %s" % humane_hours(t["stront_timer"])
            print "Notes: %s" % ", ".join(t["flags"])
            print
        else:
            print "%7s  %-10s  %s (%s)" % (humane_hours(t["fuel_timer"]),
                                           t["short_state"],
                                           t["location"],
                                           t["typename"])
        
def get_fuel(typeid, fuel):
    have_fuel = dict((r.typeID, r.quantity) for r in fuel)
    c = db.cursor()
    c.execute("SELECT r.resourcetypeid, r.quantity, p.purposetext "
              "FROM ccp.invcontroltowerresources r "
              "INNER JOIN ccp.invcontroltowerresourcepurposes p "
              " ON r.purpose = p.purpose "
              "WHERE controltowertypeid = %s "
              "  AND minSecurityLevel IS NULL",
              (typeid,))
    stront_timer = 24*365
    fuel_timer = 24*365
    for (fuelid, needed, purpose) in c.fetchall():
        if purpose == 'Online':
            fuel_timer = min(fuel_timer,
                             have_fuel.get(fuelid, 0) / needed)
        elif purpose == 'Reinforce':
            stront_timer = min(stront_timer,
                               have_fuel.get(fuelid, 0) / needed)
    return fuel_timer, stront_timer

def humane_hours(hours):
    if hours > 24:
        return "%2sd %2sh" % (int(hours) / 24, int(hours) % 24)
    else:
        return "%2sh   " % hours    

typenames = {}
def get_typename(typeid):
    if typeid not in typenames:
        c = db.cursor()
        c.execute("SELECT typename FROM ccp.invtypes WHERE typeid = %s",
                  (typeid,))
        if c.rowcount == 0:
            return "<TypeID %s>" % typeid
        typenames[typeid] = c.fetchone()[0]
    return typenames[typeid]

moons = {}
def get_moon(moonid):
    if moonid not in moons:
        c = db.cursor()
        c.execute("SELECT itemname FROM ccp.mapdenormalize "
                  "WHERE itemid = %s",
                  (moonid,))
        if c.rowcount == 0:
            return "<MoonID %s>" % moonid
        moons[moonid] = c.fetchone()[0]
    return moons[moonid]

systems = {}
def get_system(sysid):
    if sysid not in systems:
        c = db.cursor()
        c.execute("SELECT solarsystemname FROM ccp.mapsolarsystems "
                  "WHERE solarsystemid = %s",
                  (sysid,))
        if c.rowcount == 0:
            return "<SystemID %s>" % sysid
        systems[sysid] = c.fetchone()[0]
    return systems[sysid]

if __name__ == '__main__':
    main()
