#!/usr/bin/env python

import datetime
import psycopg2

from optparse import OptionParser

from lib.util import humane

def main():
   parser = OptionParser(usage="%prog [OPTIONS]",
                         version="%prog 1.0")
   parser.add_option("--begin", dest="after_date", metavar="DATE",
                     help="Ignore entries before DATE",
                     default=None)
   parser.add_option("--end", dest="before_date", metavar="DATE",
                     help="Ignore entries past DATE",
                     default=None)
   (options, args) = parser.parse_args()
   db = psycopg2.connect("dbname=eve user=forcer")
   c = db.cursor()
   if options.after_date is not None:
      start = datetime.datetime.strptime(options.after_date, "%Y-%m-%d")
   else:
      start = datetime.datetime.strptime("1990-01-01", "%Y-%m-%d")
   if options.before_date is not None:
      end = datetime.datetime.strptime(options.before_date, "%Y-%m-%d")
   else:
      end = datetime.datetime.utcnow() + datetime.timedelta(days=1)
   c.execute("SELECT SUM(price*quantity), SUM(quantity), "
             "       typename, stationname "
             "FROM grd_transactions "
             "WHERE transactiontype = 'sell' "
             "  AND charactername IN ('Damian Trias', 'Challis Drant', 'Sloth Arnini') "
             "  AND date >= %s "
             "  AND date < %s "
             "GROUP BY stationname, typename "
             , (start, end))
   sales = {}
   total = 0
   for (income, quantity, typename, stationname) in c.fetchall():
       if stationname not in sales:
           sales[stationname] = []
       sales[stationname].append((income, typename, quantity))
       total += income
   stations = sales.keys()
   stations.sort()
   header("Damian Report", "^")
   print "(%s - %s)" % (start.strftime("%Y-%m-%d"),
                        (end-datetime.timedelta(days=1)).strftime("%Y-%m-%d"))
   print
   print "Total: %s M" % humane(total / (1000.0 * 1000))
   print
   for station in stations:
       sales_here = sales[station]
       sales_here.sort(reverse=True)
       header(station, "=")
       print "Total: %s M" % humane(sum(income for (income, t, q)
                                        in sales_here) / (1000.0 * 1000))
       print
       for (income, typename, quantity) in sales_here:
           print "%10s M %s x%s" % (humane(income/(1000.0*1000)),
                                    typename,
                                    humane(quantity))
       print

def header(title, underline="="):
   print title
   print underline * len(title)


if __name__ == '__main__':
    main()
