#!/usr/bin/env python

import datetime

from lib import characters
from lib import evedb
from lib import cache

db = evedb.connect()

def main():
    times = []
    chars = characters.list()
    for name in chars:
        (userid, apikey, charid) = chars[name]
        char = characters.char(name, cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
        corp = characters.corp(name, cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
        times.extend(skills(name, char))
        times.extend(sijobs(name, char, corp, charid))
        times.extend(orders(name, char, corp, charid))
    times.sort()
    for (finish, activity, text) in times:
        print("%s (%4s) [%-5s] %s" %
              (finish.strftime("%m-%d %H:%M"),
               delta(finish-datetime.datetime.utcnow()),
               activity,
               text))

def skills(name, char):
    return [(make_time(skill.endTime),
             "Skill",
             "%s finishes %s %s" %
             (name,
              typename(skill.typeID),
              skill.level))
            for skill in char.SkillQueue().skillqueue
            if skill.endTime != u'']

def sijobs(name, char, corp, charid):
    result = []
    try:
        char_jobs = char.IndustryJobs().jobs
    except:
        char_jobs = []
    try:
        corp_jobs = corp.IndustryJobs().jobs
    except:
        corp_jobs = []
    for job in list(char_jobs) + list(corp_jobs):
        if job.completed == 0 and str(job.installerID) == charid:
            activity = activity_name(job.activityID)
            if activity == 'Manufacturing':
                activity = "Manuf"
                text = ("%s x %s in %s" %
                        (typename(job.outputTypeID),
                         job.runs,
                         systemname(job.installedInSolarSystemID)))
            elif activity == 'Researching Time Productivity':
                activity = "PE"
                text = ("%s to PE %s in %s" %
                        (typename(job.outputTypeID),
                         job.installedItemProductivityLevel + job.runs,
                         systemname(job.installedInSolarSystemID)))
            elif activity == 'Researching Material Productivity':
                activity = "ME"
                text = ("%s to ME %s in %s" %
                        (typename(job.outputTypeID),
                         job.installedItemMaterialLevel + job.runs,
                         systemname(job.installedInSolarSystemID)))
            elif activity == 'Copying':
                activity = "Copy"
                text = ("%s %s-run x %s in %s" %
                        (typename(job.outputTypeID),
                         job.licensedProductionRuns,
                         job.runs,
                         systemname(job.installedInSolarSystemID)))
            elif activity == 'Invention':
                activity = "Inv"
                text = ("%s %s-run x %s in %s" %
                        (typename(job.outputTypeID),
                         job.licensedProductionRuns,
                         job.runs,
                         systemname(job.installedInSolarSystemID)))
            else:
                text = ("%s x %s in %s" %
                        (typename(job.outputTypeID),
                         job.runs,
                         systemname(job.installedInSolarSystemID)))
            result.append((make_time(job.endProductionTime),
                           activity,
                           text))
    return result

def orders(name, char, corp, charid):
    try:
        char_orders = char.MarketOrders().orders
        corp_orders = corp.MarketOrders().orders
    except:
        char_orders = []
        corp_orders = []
        
    result = []
    for order in list(char_orders) + list(corp_orders):
        if order.orderState == 0 and order.volRemaining > 0 and str(order.charID) == charid:
            done = make_time(order.issued + order.duration*24*60*60)
            if ((done - datetime.datetime.utcnow()) < datetime.timedelta(7)):
                if order.bid:
                    activity = "Buy"
                else:
                    activity = "Sale"
                text = ("%s x %s (%.2f ISK) in %s" %
                        (typename(order.typeID),
                         order.volRemaining,
                         order.price,
                         stationsystem(order.stationID)))
                result.append((done, activity, text))
    return result

def make_time(secs):
    return datetime.datetime.utcfromtimestamp(secs)

def delta(d):
    if d < datetime.timedelta(0):
        return "done"
    elif d.days > 1:
        return "%sd" % d.days
    else:
        seconds = d.seconds + (d.days*24*60*60)
        if seconds > 60*60*2:
            return "%sh" % (seconds/(60*60))
        elif seconds > 60*2:
            return "%sm" % (seconds/60)
        else:
            return "%ss" % seconds

typename_map = {}
def typename(typeid):
    if typeid not in typename_map:
        c = db.cursor()
        c.execute("SELECT typeName FROM ccp.invTypes WHERE typeID = %s",
                  (typeid,))
        typename_map[typeid] = c.fetchone()[0]
    return typename_map[typeid]

activity_name_map = {}
def activity_name(activityid):
    if activityid not in activity_name_map:
        c = db.cursor()
        c.execute("SELECT activityName FROM ccp.ramActivities WHERE activityID = %s",
                  (activityid,))
        activity_name_map[activityid] = c.fetchone()[0]
    return activity_name_map[activityid]

systemname_map = {}
def systemname(sysid):
    if sysid not in systemname_map:
        c = db.cursor()
        c.execute("SELECT solarSystemName FROM ccp.mapSolarSystems WHERE solarSystemID = %s",
                  (sysid,))
        systemname_map[sysid] = c.fetchone()[0]
    return systemname_map[sysid]

stationsystem_map = {}
def stationsystem(stationid):
    if stationid not in stationsystem_map:
        c = db.cursor()
        c.execute("""SELECT sys.solarSystemName
                       FROM ccp.staStations st
                            INNER JOIN ccp.mapSolarSystems sys
                              ON st.solarSystemID = sys.solarSystemID
                     WHERE st.stationID = %s""",
                  (stationid,))
        stationsystem_map[stationid] = c.fetchone()[0]
    return stationsystem_map[stationid]

main()
