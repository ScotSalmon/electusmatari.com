#!/usr/bin/env python

import collections

from lib import evemetrics
from lib import util
from lib import evedb

MOONMINERALS = {
    "Atmospheric Gases": 0,
    "Cadmium": 16,
    "Caesium": 32,
    "Chromium": 16,
    "Cobalt": 8,
    "Dysprosium": 64,
    "Evaporite Deposits": 0,
    "Hafnium": 32,
    "Hydrocarbons": 0,
    "Mercury": 32,
    "Neodymium": 64,
    "Platinum": 16,
    "Promethium": 64,
    "Scandium": 8,
    "Silicates": 0,
    "Technetium": 32,
    "Thulium": 64,
    "Titanium": 8,
    "Tungsten": 8,
    "Vanadium": 16
    }

def main():
    prices = collections.defaultdict(lambda: (0, 0))
    emtr = evemetrics.EveMetrics()
    for th in emtr.history(['The Forge'], MOONMINERALS.keys()):
        for reg in th.regions:
            for day in reg.days:
                (total, vol) = prices[th.typename]
                total += day.average * day.movement
                vol += day.movement
                prices[th.typename] = (total, vol)
    prices = [(tn, 100*total/vol) for (tn, (total, vol)) in prices.items()]
    prices.extend(posprices())
    prices.sort(lambda a, b: cmp(a[1], b[1]),
                reverse=1)
    for name, price in prices:
        if name in MOONMINERALS:
            print "%15s %s (r%i)" % (util.humane(int(price*24*7)),
                                     name,
                                     MOONMINERALS[name])
        else:
            print "%15s -- %s" % (util.humane(int(price*24*7)),
                                  name)

def posprices():
    db = evedb.connect()
    c = db.cursor()
    c.execute("SELECT tt.typename, rt.typename, ctr.quantity "
              "FROM invcontroltowerresources ctr "
              "     INNER JOIN invtypes tt "
              "       ON ctr.controltowertypeid = tt.typeid "
              "     INNER JOIN invtypes rt "
              "       ON ctr.resourcetypeid = rt.typeid "
              "     INNER JOIN invcontroltowerresourcepurposes ctrp "
              "       ON ctr.purpose = ctrp.purpose "
              "WHERE tt.typename LIKE 'Minmatar Control Tower%%' "
              "  AND ctrp.purposetext in ('Online', 'Power', 'CPU') "
              "  AND ctr.minsecuritylevel IS NULL")
    resources = c.fetchall()
    fueltypes = dict((resource, True) for (tower, resource, quantity)
                     in resources).keys()
    prices = collections.defaultdict(lambda: (0, 0))
    emtr = evemetrics.EveMetrics()
    for th in emtr.history(['The Forge'], fueltypes):
        for reg in th.regions:
            for day in reg.days:
                (total, vol) = prices[th.typename]
                total += day.average * day.movement
                vol += day.movement
                prices[th.typename] = (total, vol)
    prices = dict((tn, total/vol) for (tn, (total, vol)) in prices.items())
    towercost = collections.defaultdict(lambda: 0)
    for tower, resource, quantity in resources:
        towercost[tower] += quantity * prices[resource]
    return towercost.items()

main()
