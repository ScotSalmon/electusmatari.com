#!/usr/bin/env python

from collections import defaultdict

from lib import characters, cache, evedb
from lib.util import humane

db = evedb.connect()

################
# Requirements #
################

aralgrund = 'Aralgrund IV - Freedom Extension Retail Center'
egbi_cap = 'Egbinger IX - Moon 8 - Minmatar Mining Corporation Mining Outpost'
dal = 'Dal III - Moon 1 - Republic Fleet Assembly Plant'

REQ_MINERALS = []
#      [(dal, u'PRODUCTION', mineral, quantity, [])
#       for (mineral, quantity)
#       in [('Tritanium', 20000000),
#           ('Pyerite', 8000000),
#           ('Mexallon', 3000000),
#           ('Isogen', 1000000),
#           ('Nocxium', 300000),
#           ('Zydrine', 15000),
#           ('Megacyte', 10000),
#           ('Strontium Clathrates', 9000)]]
#          +
#           [('Pator VII (Kulheim) - Republic Security Services Assembly Plant',
#             u'PRODUCTION', mineral, quantity, [])
#            for (mineral, quantity)
#            in [('Tritanium', 100000000),
#                ('Pyerite', 20000000),
#                ('Mexallon', 5000000),
#                ('Isogen', 2000000),
#                ('Nocxium', 400000),
#                ('Zydrine', 200000),
#                ('Megacyte', 50000),
#                ('Morphite', 20000),
#                ('Strontium Clathrates', 25000)]]
#            +
#            [('Konora VI - Kaalakiota Corporation Factory',
#              u'PRODUCTION', mineral, quantity, [])
#             for (mineral, quantity)
#             in [('Tritanium', 100000000),
#                 ('Pyerite', 20000000),
#                 ('Mexallon', 5000000),
#                 ('Isogen', 2000000),
#                 ('Nocxium', 400000),
#                 ('Zydrine', 100000),
#                 ('Megacyte', 50000),
#                 ('Strontium Clathrates', 25000)]]
#            +
#            [('Egbinger XI - Moon 3 - Republic Fleet Testing Facilities',
#              u'PRODUCTION', mineral, quantity, [])
#             for (mineral, quantity)
#             in [('Tritanium', 100000000),
#                 ('Pyerite', 20000000),
#                 ('Mexallon', 5000000),
#                 ('Isogen', 2000000),
#                 ('Nocxium', 400000),
#                 ('Zydrine', 200000),
#                 ('Megacyte', 50000)]]
#            +
#            [('Evati V - Moon 1 - Boundless Creation Factory',
#              u'PRODUCTION', mineral, quantity, [])
#             for (mineral, quantity)
#             in [('Tritanium', 50000000),
#                 ('Pyerite', 25000000),
#                 ('Mexallon', 10000000),
#                 ('Isogen', 500000),
#                 ('Nocxium', 200000),
#                 ('Zydrine', 50000),
#                 ('Megacyte', 15000),
#                 ('Strontium Clathrates', 12000)]]
#            +
#            [('Istodard IX - Moon 5 - Republic Fleet Assembly Plant',
#              u'PRODUCTION', mineral, quantity, [])
#             for (mineral, quantity)
#             in [('Tritanium', 20000000),
#                 ('Pyerite', 8000000),
#                 ('Mexallon', 2000000),
#                 ('Isogen', 600000),
#                 ('Nocxium', 200000),
#                 ('Zydrine', 30000),
#                 ('Megacyte', 5000)]]
           

REQ_CAP_BASE = []
for (item, quantity) in [('Liquid Ozone', 20000),
                         ('Hydrogen Isotopes', 256000),
                         ('Oxygen Isotopes', 224000),
                         ('Nitrogen Isotopes', 32000),
                         ('Helium Isotopes', 32000),
                         ('Strontium Clathrates', 27000),
                         ('EMP XL', 14800),
                         ('Fusion XL', 14800),
                         ('Phased Plasma XL', 14800),
                         ('Proton XL', 14800),
                         ('Nuclear XL', 14800),
                         ('Carbonized Lead XL', 14800),
                         ('Antimatter Charge XL', 14800),
                         ('Iron Charge XL', 14800),
                         ('Doom Citadel Torpedo', 3900),
                         ('Purgatory Citadel Torpedo', 3900),
                         ('Rift Citadel Torpedo', 3900),
                         ('Thor Citadel Torpedo', 3900),
                         ('Catastrophe Citadel Cruise Missile', 3200),
                         ('Rajas Citadel Cruise Missile', 3200),
                         ('Sol Citadel Cruise Missile', 3200),
                         ('Thunar Citadel Cruise Missile', 3200)]:
    for office in [egbi_cap, aralgrund]:
        REQ_CAP_BASE.append((office, u'CORP OPS', item, quantity, []))

REQ_SKYDANCERS = []
for office in ['Aralgrund IV - Freedom Extension Retail Center',
               'Bosboger VI - Moon 7 - Republic Security Services Assembly Plant',
               'Dal III - Moon 1 - Republic Fleet Assembly Plant',
               'Egbinger IX - Moon 8 - Minmatar Mining Corporation Mining Outpost',
               'Evati V - Moon 1 - Boundless Creation Factory',
               'Gelfiven III - Moon 1 - Republic Fleet Assembly Plant',
               # 'Gelfiven X - Moon 4 - Minmatar Mining Corporation Refinery',
               'Gultratren III - Moon 12 - Republic Justice Department Tribunal',
               'Heild VII - Moon 12 - Republic Fleet Assembly Plant',
               'Istodard IX - Moon 5 - Republic Fleet Assembly Plant',
               'Hadozeko IX - Moon 11 - Boundless Creation Factory',
               'Konora VI - Kaalakiota Corporation Factory',
               'N-DQ0D IV - Trust Partners Trading Post',
               'Pator VII (Kulheim) - Republic Security Services Assembly Plant',
               'Trytedald VII - Moon 19 - TransStellar Shipping Storage'
               ]:
    for (item, quantity, contents) in [('Probe', 1,
                                        [('Cynosural Field Generator I', 1),
                                         ('Liquid Ozone', 450)]),
                                       ('Kestrel', 1,
                                        [('Cynosural Field Generator I', 1),
                                         ('Liquid Ozone', 450)]),
                                       ('Imicus', 1,
                                        [('Cynosural Field Generator I', 1),
                                         ('Liquid Ozone', 450)]),
                                       ('Liquid Ozone', 10000, [])
                                       ]:
        REQ_SKYDANCERS.append((office, u'CORP OPS', item, quantity, contents))

# HQ Cans

REQ_CANS = [
    # Forward Base
    # ('Pator VII (Kulheim) - Republic Security Services Assembly Plant',
    #  u'CORP OPS', 'General Freight Container', 1, [
    #         
    #         ]),
    # FDT
    ('Pator VII (Kulheim) - Republic Security Services Assembly Plant',
     u'CORP OPS', 'Station Container', 1, [
            ])
            ]

REQUIRED = REQ_MINERALS + REQ_CAP_BASE + REQ_SKYDANCERS + REQ_CANS

####################
# Requirements End #
####################


def main():
    stock = get_stock()
    missing = defaultdict(lambda: defaultdict(lambda: []))
    for (station, hangar, item, quantity, contents
         ) in check_reserves(REQUIRED, stock):
        missing[station][hangar].append((item, quantity, contents))
    stations = missing.keys()
    stations.sort()
    for st in stations:
        print st
        hangars = missing[st].keys()
        hangars.sort()
        for hangar in hangars:
            print "- %s:" % hangar
            hangar_contents = missing[st][hangar]
            hangar_contents.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
            for (item, quantity, contents) in hangar_contents:
                if quantity > 1:
                    print "  - %s x %s" % (item, humane(quantity))
                else:
                    print "  - %s" % item
                contents.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))
                for (citem, cquantity) in contents:
                    if cquantity > 1:
                        print "    - %s x %s" % (citem, humane(cquantity))
                    else:
                        print "    - %s" % citem
        print

def check_reserves(required, stock):
    # r_ => requested
    # s_ => stock
    missing = []
    for (r_station, r_hangar, r_item, r_quantity, r_contents) in required:
        missing_quantity = r_quantity
        missing_contents = dict(r_contents)
        for (s_station, s_hangar, s_item, s_quantity, s_contents) in stock:
            if (r_station == s_station and r_hangar == s_hangar and r_item == s_item):
                missing_quantity -= s_quantity
                for (sc_item, sc_quantity) in s_contents:
                    if sc_item in missing_contents:
                        missing_contents[sc_item] -= sc_quantity
        for item in missing_contents.keys():
            if missing_contents[item] <= 0:
                del missing_contents[item]
        if missing_quantity > 0 or len(missing_contents) > 0:
            missing.append((r_station, r_hangar, r_item,
                            missing_quantity, missing_contents.items()))
    return missing

def get_stock():
    grd = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    data = grd.AssetList()
    stock = []
    for row in data.assets:
        if typename(row.typeID) == 'Office':
            stname = station_name(row.locationID)
            if not hasattr(row, 'contents'):
                continue
            for item in row.contents:
                if hasattr(item, 'contents'):
                    contents = get_contents(item.contents)
                else:
                    contents = []
                stock.append((stname,
                              flagname(item.flag),
                              typename(item.typeID),
                              item.quantity,
                              contents))
    return stock

station_d = None
def station_name(locID):
    global station_d
    if station_d is None:
        c = db.cursor()
        c.execute("SELECT stationid, stationname FROM stastations")
        station_d = dict(c.fetchall())
    return station_d[locID - 6000001]

flag_d = None
def flagname(flagid):
    global flag_d
    if flag_d is None:
        c = db.cursor()
        c.execute("SELECT flagid, flagname FROM invFlags")
        flag_d = dict(c.fetchall())
    name = flag_d[flagid]
    if name == 'CorpMarket':
        return 'Deliveries'
    elif name == 'Hangar':
        return hangarname(1)
    elif name.startswith('CorpSAG'):
        return hangarname(int(name[7:]))
    else:
        return name

hangar_d = None
def hangarname(num):
    global hangar_d
    if hangar_d is None:
        grd = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
        grdcs = grd.CorporationSheet()
        hangar_d = dict((div.accountKey - 999,
                         div.description)
                        for div in grdcs.divisions)
    return hangar_d[num]

type_d = {}
def typename(typeid):
    if typeid not in type_d:
        c = db.cursor()
        c.execute("select typename from invtypes where typeid = %s",
                  (typeid,))
        type_d[typeid] = c.fetchone()[0]
    return type_d[typeid]

def get_contents(contents):
    cont = []
    for item in contents:
        cont.append((typename(item.typeID),
                     item.quantity))
        if hasattr(item, 'contents'):
            cont.extend(get_contents(item.contents))
    return cont

if __name__ == '__main__':
    main()
