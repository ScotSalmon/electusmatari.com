#!/usr/bin/env python

import datetime
import math
import psycopg2

from optparse import OptionParser

from lib import evedb
from lib.util import humane


REPUBLIC_REGIONS = [
    'Heimatar',
    'Metropolis',
    'Molden Heath'
    ]

GREATER_REPUBLIC_REGIONS = REPUBLIC_REGIONS + [
    'Great Wildlands'
    ]

AREAS = [
   ('Konora area',
    ['Hulf']),
   ('Metro pipe',
    ['Inkelm', 'Ergruk', 'Rollera']),
   ('Hadozeko area',
    ['Tiat', 'Essin', 'Eugidi', 'Angils']),
   ('Evati area',
    ['Aldodan']),
   ('Hagilur area',
    ['Barvigrard', 'Fribrodi']),
   ('Amamake area',
    ['Hed', 'Huvilma']),
   ('Gusandall area',
    ['Benurad', 'Evannater', 'Akimamur', 'Wiedadur']),
   ('Upper MH (Oddelulf)',
    ['Fittakan']),
   ('Istodard pocket',
    ['Almur']),
   ('Lower MH (Egbinger)',
    ['Tartatven', 'Elfrard']),
   ('Skarkon area',
    ['Besateoden', 'Eoldulf']),
   ('B-VIP pipe',
    ['V-4QJC']),
   ('BRT pipe',
    ['AP-S8F', 'HRJG-D']),
   ('Central GW',
    ['730-KH', 'Q-PVMK']),
   ('LXTC pipe',
    ['DYK-G8']),
   ('N-RAEL pipe',
    ['I3-2J0', 'L-TEVM']),
   ('GW backwater',
    ['BB8E-G', 'IYOO-M', 'K-DLD2', 'T-W4L3',
     'U-3HAO', 'V-LQBF', 'W-3Y6D']),
   ('Upper Heimatar (Pator)',
    ['Sveipar', 'Erada']),
   ('Lower Heimatar (Rens)',
    ['Odengsolf', 'Ortner']),
   ('Heimatar backwater',
    ['Osta', 'Urtfer']),
   ('Ani constellation',
    ['Ani']),
   ('Eram area',
    ['Meinigefur', 'Argeir']),
   ('Illuin area',
    ['Gedur']),
   ('Metropolis backwater',
    ['Lorundio', 'Ankard', 'Jonar', 'Stadakorn',
     'Aptetter', 'Brazinget', 'Frar', 'Panorad']),
   ]

STARTER_SYSTEMS = [
    "Ammold", "Hadaugago", "Krilmokenur", "Larkugei", "Loguttur", # RMS
    "Ryddinjorn", "Embod", "Abrat", "Erego", "Fildar", # PTS
    "Hulm", "Malukker", "Orgron", "Todeko", "Usteli" # RUN
    ] 

db = evedb.connect()

def main():
    parser = OptionParser(usage="%prog [OPTIONS]",
                          version="%prog 1.0")
    parser.add_option("-d", "--days", dest="days", metavar="DAYS",
                      default=28, type="int",
                      help="How many days to analyze (defaults to 28)")
    parser.add_option("-b", "--begin", dest="begin", metavar="DATE",
                      help="Analyze entries after (and including) DATE")
    parser.add_option("-e", "--end", dest="end", metavar="DATE",
                      help="Analyze entries before (and excluding) DATE")
    parser.add_option("-B", "--compare-begin", dest="comp_begin",
                      metavar="DATE",
                      help="Compare to entries after (and including) DATE")
    parser.add_option("-E", "--compare-end", dest="comp_end",
                      metavar="DATE",
                      help="Compare to entries before (and excluding) DATE")
    parser.add_option("-t", "--type", dest="numtype", metavar="TYPE",
                      help="Type of data to emit (kills, podkills, jumps, npckills)",
                      default="kills")
    parser.add_option("-s", "--sort", dest="sortby", metavar="COLUMN",
                      help="Sort comparison by this column (new, old, change, percentage, score)",
                      default="new")
    parser.add_option("-n", "--numsys", dest="numsys", type="int",
                      help="Number of systems to emit",
                      default=20)
    (options, args) = parser.parse_args()

    (column, desc) =  {"kills": ("shipkills", "kills"),
                       "podkills": ("podkills", "pod kills"),
                       "jumps": ("shipjumps", "jumps"),
                       "npckills": ("factionkills", "non-capsuleer kills")
                       }.get(options.numtype, ("shipkills", "kills"))

    if options.end is None:
        end = datetime.datetime.utcnow()
    else:
        end = parse_date(options.end)
    if options.begin is None:
        begin = end - datetime.timedelta(days=options.days)
    else:
        begin = parse_date(options.begin)
    if options.comp_end is None:
        comp_end = begin
    else:
        comp_end = parse_date(options.comp_end)
    if options.comp_begin is None:
        comp_begin = comp_end - datetime.timedelta(days=options.days)
    else:
        comp_begin = parse_date(options.comp_begin)

    (new_data, count) = extract(begin, end, column)
    (old_data, _) = extract(comp_begin, comp_end, column, count)

    header("Republic Report on %s" % desc.title(), "=")
    print("Comparing %s days from %s to %s" %
          ((end - begin).days,
           begin.strftime("%Y-%m-%d"),
           end.strftime("%Y-%m-%d")))
    print("with %s days from %s to %s." %
          ((comp_end - comp_begin).days,
           comp_begin.strftime("%Y-%m-%d"),
           comp_end.strftime("%Y-%m-%d")))
    print

    republic = get_republic()
    header("The Republic (Without GW)", "-")
    republic_new_data = combine(new_data, republic)
    republic_old_data = combine(old_data, republic)
    display(compare(republic_old_data, republic_new_data),
            options.sortby)
    print

    header("The Republic (Without GW, Per System)", "-")
    republic_new_data = combine(new_data, republic, True)
    republic_old_data = combine(old_data, republic, True)
    display(compare(republic_old_data, republic_new_data),
            options.sortby)
    print
    
    regions = get_regions()
    header("Regions", "-")
    region_old_data = combine(old_data, regions)
    region_new_data = combine(new_data, regions)
    display(compare(region_old_data, region_new_data),
            options.sortby)
    print

    header("Regions (Per System)", "-")
    region_old_data = combine(old_data, regions, True)
    region_new_data = combine(new_data, regions, True)
    display(compare(region_old_data, region_new_data),
            options.sortby)
    print

    areas = get_areas()
    header("Areas", "-")
    area_old_data = combine(old_data, areas)
    area_new_data = combine(new_data, areas)
    display(compare(area_old_data, area_new_data),
            options.sortby)
    print

    header("Areas (Per System)", "-")
    area_old_data = combine(old_data, areas, True)
    area_new_data = combine(new_data, areas, True)
    display(compare(area_old_data, area_new_data),
            options.sortby)
    print

    republic_systems = get_republic_systems()
    header("Systems (Top %s)" % options.numsys, "-")
    system_old_data = combine(old_data, republic_systems)
    system_new_data = combine(new_data, republic_systems)
    display(compare(system_old_data, system_new_data),
            options.sortby,
            length=options.numsys)
    
def extract(begin, end, column, normalize=None):
    db = psycopg2.connect("dbname=eve")
    c = db.cursor()
    sql = ("SELECT systemid, SUM(%s) AS num, COUNT(*) AS count "
           "FROM republic_map "
           "WHERE timestamp >= %%s "
           "  AND timestamp < %%s "
           "GROUP BY systemid " % column)
    c.execute(sql, (begin, end))
    data = []
    maxcount = 0
    for (systemid, num, count) in c.fetchall():
        if normalize is not None:
            num = (num * normalize) / float(count)
        maxcount = max(count, maxcount)
        data.append((sysname(systemid), num))
    return (data, maxcount)

def combine(systems, mapping, normalize=False):
    data = {}
    for (system, count) in systems:
        if system in mapping:
            name = mapping[system]
            if name not in data:
                data[name] = 0
            data[name] += count
    if normalize:
        size = {}
        for group in mapping.values():
            if group not in size:
                size[group] = 0
            size[group] += 1
        for key in data:
            data[key] /= float(size[key])
    return data

def compare(old_data, new_data):
    data = []
    for system in new_data.keys():
        old = old_data[system]
        new = new_data[system]
        change = new - old
        if old == 0:
            percentage = 0
            score = 0
        else:
            percentage = (new / float(old)) - 1
            score = (new - old) / math.sqrt(old)
        data.append((system, old, new, change, percentage, score))
    return data

def display(data, sortby, length=None):
    i = {'old': 1, 'new': 2, 'change': 3, 'percentage': 4,
         'score': 5}.get(sortby, 2)
    data.sort(lambda a, b: cmp(a[i], b[i]),
              reverse=True)
    if length is not None:
        data = data[0:length]
    for (system, old, new, change, percentage, score) in data:
        print ("%10s (%10s, %8s, %+6.1f%% / %+6.1f) %s"
               % (humane(int(round(new))),
                  humane(int(round(old))),
                  humane(int(round(change)), dosign=True),
                  percentage*100,
                  score,
                  system))

def parse_date(date):
    return datetime.datetime.strptime(date, "%Y-%m-%d")

def get_republic():
    republic = {}
    for region in REPUBLIC_REGIONS:
        for system in region_systems(region):
            republic[system] = "The Republic"
    return republic

def get_regions():
    regions = {}
    for region in GREATER_REPUBLIC_REGIONS:
        for system in region_systems(region):
            regions[system] = region
    return regions

def get_areas():
    areas = {}
    area_systems = {}
    for (area, consts) in AREAS:
        area_systems[area] = []
        for const in consts:
            for system in constellation_systems(const):
                area_systems[area].append(system)
    for (area, systems) in area_systems.items():
        secs = [syssec(system) for system in systems]
        if max(secs) >= 0.45 and min(secs) < 0.45:
            for system in systems:
                if syssec(system) >= 0.45:
                    areas[system] = add_note(area, "hs")
                else:
                    areas[system] = add_note(area, "ls")
        else:
            for system in systems:
                areas[system] = area
    return areas

def get_republic_systems():
    republic = {}
    c = db.cursor()
    c.execute("SELECT s.solarsystemname, "
              "       s.security "
              "FROM mapsolarsystems s "
              "     INNER JOIN mapregions r "
              "       ON s.regionid = r.regionid "
              "WHERE r.regionname IN (%s)" % 
              (", ".join(["%s"] * len(GREATER_REPUBLIC_REGIONS))),
              GREATER_REPUBLIC_REGIONS)
    mapping = {}
    for (systemname, sec) in c.fetchall():
        if systemname in STARTER_SYSTEMS:
            name = "%s (%.1f, tutorial)" % (systemname, sec)
        else:
            name = "%s (%.1f)" % (systemname, sec)
        mapping[systemname] = name
    return mapping

sysname_d = None
def sysname(systemid):
    global sysname_d
    if sysname_d is None:
        c = db.cursor()
        c.execute("SELECT solarsystemid, solarsystemname "
                  "FROM mapsolarsystems")
        sysname_d = dict(c.fetchall())
    return sysname_d.get(systemid, str(systemid))

syssec_d = None
def syssec(systemname):
    global syssec_d
    if syssec_d is None:
        c = db.cursor()
        c.execute("SELECT solarsystemname, security "
                  "FROM mapsolarsystems")
        syssec_d = dict(c.fetchall())
    return syssec_d[systemname]

def region_systems(region):
    c = db.cursor()
    c.execute("SELECT s.solarsystemname "
              "FROM mapsolarsystems s "
              "     INNER JOIN mapregions r "
              "       ON s.regionid = r.regionid "
              "WHERE r.regionname = %s ",
              (region,))
    return [name for (name,) in c.fetchall()]

def constellation_systems(const):
    c = db.cursor()
    c.execute("SELECT s.solarsystemname "
              "FROM mapsolarsystems s "
              "     INNER JOIN mapconstellations c "
              "       ON s.constellationid = c.constellationid "
              "WHERE c.constellationname = %s ",
              (const,))
    return [name for (name,) in c.fetchall()]

def add_note(label, note):
    if label[-1] == ')':
        return "%s, %s)" % (label[:-1], note)
    else:
        return "%s (%s)" % (label, note)

def header(title, underline="="):
   print title
   print underline * len(title)

if __name__ == '__main__':
    main()
