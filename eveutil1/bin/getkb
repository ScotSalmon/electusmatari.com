#!/usr/bin/env python

# getkb --- killboard scraper

# Copyright (C) 2009 Arkady Sadik <arkady@arkady-sadik.de>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

import datetime
import optparse
import os
import re
import sys
import time
import urllib

from xml.etree import ElementTree

usage = "usage: %prog [options] <kburl>"

NPCCORPS = ["Amarr Empire", "Angel Cartel", "Archangels", "Blood Raider",
            "Blood Raiders", "Caldari State", "CONCORD", "EVE System",
            "Gallente Federation", "Guristas", "Guristas Pirates",
            "Khanid Kingdom", "Minmatar Republic", "Mordu's Legion Command",
            "Sansha's Nation", "Serpentis", "Serpentis Corporation",
            "The Blood Raider Covenant", "True Power"]

out = None

def main():
    global out
    out = Status()
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("--after", dest="after", default=None,
                      help="Fetch killmails after this one.")
    parser.add_option("--type", dest="kbtype", default=None,
                      help="Set the killboard type (edk, griefwatch, edk-html, edk-feed)")
    (options, args) = parser.parse_args()
    if len(args) == 1:
        kburl = args[0]
        if not os.access(".kburl", os.R_OK):
            file(".kburl", "w").write("%s\n" % kburl)
    elif os.access(".kburl", os.R_OK):
        kburl = file(".kburl").readline().strip()
        print "Using killboard %s" % kburl
    else:
        parser.error("incorrect amount of arguments")

    if options.after is None:
        after = datetime.datetime.utcnow() - datetime.timedelta(4*30)
    else:
        after = datetime.datetime.strptime(options.after, "%Y-%m-%d")

    if options.kbtype is None:
        if "griefwatch" in kburl:
            options.kbtype = "griefwatch"
        elif "eve-kill" in kburl or "killmail.org" in kburl:
            options.kbtype = "evsco"
        else:
            options.kbtype = "edk-feed"
    
    if options.kbtype in ('edk', 'edk-nofeed', 'nofeed'):
        kb = EDK(kburl, after)
    elif options.kbtype == 'edk-html':
        kb = EDK(kburl, after, parse_html=True)
    elif options.kbtype in ('edk-feed', 'feed'):
        kb = EDKFeed(kburl, after)
    elif options.kbtype == 'evsco':
        kb = EVSCO(kburl, after)
    elif options.kbtype in ('griefwatch', 'gw'):
        kb = Griefwatch(kburl, after)
    else:
        parser.error("Unknown killboard type '%s'" % options.kbtype)

    out.emit("Retrieving kill mails after %s." % after.strftime("%Y-%m-%d"))
    out.newline()

    killids = kb.killids()
    count = 1
    for killid in killids:
        out.emit("Retrieving kill %i / %i." % (count, len(killids)))
        fname = "kill-%s.txt" % killid
        if not os.access(fname, os.R_OK):
            km = kb.killmail(killid)
            if km is not None:
                f = file(fname, "w")
                try:
                    f.write(km.decode("utf-8"))
                except:
                    try:
                        f.write(km)
                    except:
                        out.emit("Error writing kill mail %s" % killid)
                f.close()
            else:
                out.emit("Error retrieving kill mail %s" % killid)
                out.newline()
        count += 1
    out.newline()

def unique(list):
    return dict((x, True) for x in list).keys()

def urlget(url):
    while True:
        try:
            return urllib.urlopen(url).read()
        except IOError, e:
            out.emit("IOError: %s" % str(e))
            time.sleep(5)

MONTHNAME2NUMBER = {'January': 1, 'Jan': 1,
                    'February': 2, 'Feb': 2,
                    'March': 3, 'Mar': 3,
                    'April': 4, 'Apr': 4,
                    'May': 5, 'May': 5,
                    'June': 6, 'Jun': 6,
                    'July': 7, 'Jul': 7,
                    'August': 8, 'Aug': 8,
                    'September': 9, 'Sep': 9,
                    'October': 10, 'Oct': 10,
                    'November': 11, 'Nov': 11,
                    'December': 12, 'Dec': 12}

def parsedate(dict):
    if "hour" in dict:
        return datetime.datetime(int(dict["year"]),
                                 MONTHNAME2NUMBER[dict["month"]],
                                 int(dict["day"]),
                                 int(dict["hour"]),
                                 int(dict["minute"]))
    else:
        return datetime.datetime(int(dict["year"]),
                                 MONTHNAME2NUMBER[dict["month"]],
                                 int(dict["day"]))

class Status(object):
    lastlength = None

    def emit(self, s):
        sys.stderr.write(s)
        if self.lastlength is not None:
            sys.stderr.write(" " * (self.lastlength - len(s)))
        sys.stderr.write("\r")
        self.lastlength = len(s)

    def clear(self):
        self.emit("")

    def newline(self):
        sys.stderr.write("\n")
        self.lastlength = 0

class EDK(object):
    page_rx = re.compile("Page:[^]]*page=([0-9]+)", re.MULTILINE)
    killid_rx = re.compile("kll_id=([0-9]+)")
    kill_rx = re.compile("<textarea[^>]*>\n?(.*)</textarea>", re.DOTALL)

    html_location_rx = re.compile("""<b>Location:</b>.*
.*system_detail[^>]*>([^<]*)</a>.*\\(([0-9.]*)\\).*
(?:\n|.)*?
.*<b>Date:</b>.*
.*kb-table-cell>([^<]*)</td.*
(?:\n|.)*?
.*<b>Total Damage Taken:</b>.*
.*kb-table-cell>([^<]*)</td.*
""")

    html_victim_rx = re.compile("""<b>Victim:</b>.*
.*pilot_detail[^>]*>([^<]*)</a>.*
(?:\n|.)*?
.*<b>Corp:</b>.*
.*corp_detail[^>]*>([^<]*)</a>.*
(?:\n|.)*?
.*<b>(?:Alliance|Faction):</b>.*
.*alliance_detail[^>]*>([^<]*)</.*
(?:\n|.)*?
.*<b>(?:Ship|POS):</b>.*
.*invtype[^>]*>([^<]*)</a>.*
""")

    html_involved_rx = re.compile(""".*pilot_detail.*<b>(.*?)( \\(Final Blow\\))?</b>.*
(?:\n|.)*?
.*corp_detail[^>]*>([^<]*)</a>.*
(?:\n|.)*?
.*alliance_detail[^>]*>([^<]*)</a>.*
(?:\n|.)*?
.*invtype[^>]*>([^<]*)</a>.*
(?:\n|.)*?
.*invtype[^>]*>([^<]*)</a>.*
(?:\n|.)*?
.*Damage done:.*">([0-9,]*) \\([0-9]*%\\)</td>.*
""")

    def __init__(self, kburl, after, parse_html=False):
        self.kburl = kburl
        self.after = after
        self.parse_html = parse_html
        data = urlget(kburl)
        if "view=losses" in data:
            self.version = 3
        else:
            self.version = 2

    def killids(self):
        killids = []
        now = datetime.datetime.utcnow()
        oneweek = datetime.timedelta(7)
        while now + oneweek > self.after:
            year = now.year
            week = int(now.strftime("%W"))
            killids.extend(self.killids_in_week(week, year))
            now -= oneweek
        return unique(killids)

    def week_url(self, week, year, page=None, type="kills"):
        args = {'w': week,
                'y': year}
        if self.version == 2:
            args['a'] = type
        else:
            args['a'] = 'home'
            args['view'] = type
        if page is not None:
            args['page'] = page
        return "%s?%s" % (self.kburl, urllib.urlencode(args))

    def killids_in_week(self, week, year):
        killids = []
        for type in ["kills", "losses"]:
            out.emit("Retrieving page 1 of %s in week %s of %s" %
                     (type, week, year))
            data = urlget(self.week_url(week, year, type=type))
            killids.extend([int(killid) for killid in self.killid_rx.findall(data)])
            m = self.page_rx.search(data)
            if m:
                for page in range(2, int(m.group(1))+1):
                    out.emit("Retrieving page %i of %s in week %s of %s" %
                             (page, type, week, year))
                    data = urlget(self.week_url(week, year, page, type=type))
                    killids.extend([int(killid)
                                    for killid 
                                    in self.killid_rx.findall(data)])
        return killids

    def kill_url(self, killid):
        if self.parse_html:
            return "%s?a=kill_detail&kll_id=%i" % (self.kburl, killid)
        else:
            return "%s?a=kill_mail&kll_id=%i" % (self.kburl, killid)

    def killmail(self, killid):
        data = urlget(self.kill_url(killid))
        if self.parse_html:
            km = self.html2km(data)
            if km is None:
                out.emit("Couldn't parse kill %s" % killid)
                out.newline()
                return None
            else:
                return km
        else:
            m = self.kill_rx.search(data)
            if m:
                killinfo = m.group(1)
            else:
                killinfo = data
            if killinfo.startswith("Killmail not yet available"):
                return None
            else:
                return killinfo

    def html2km(self, data):
        data = data.replace("\r", "")
        m = self.html_victim_rx.search(data)
        if m is None:
            out.emit("Parse error: Victim bogus")
            out.newline()
            return None
        (victim, corp, alliance, destroyed) = m.groups()
        m = self.html_location_rx.search(data)
        if not m:
            out.emit("Parse error: Location bogus")
            out.newline()
            return None
        (system, security, date, damage_taken) = m.groups()
        date = date.replace("-", ".")
        damage_taken = damage_taken.replace(",", "")
       
        km = date + "\n"
        km += "\n"
        km += "Victim: %s\n" % victim
        km += "Corp: %s\n" % corp
        km += "Alliance: %s\n" % alliance
        km += "Faction: NONE\n"
        km += "Destroyed: %s\n" % destroyed
        km += "System: %s\n" % system
        km += "Security: %s\n" % security
        km += "Damage Taken: %s\n" % damage_taken
        km += "\n"
        km += "Involved parties:\n"
        for (name, finalblow, corp, alliance,
             ship, weapon, damage_done) in self.html_involved_rx.findall(data):
            if finalblow:
                name += " (laid the final blow)"
            km += "\n"
            km += "Name: %s\n" % name
            km += "Security: 0.0\n"
            km += "Corp: %s\n" % corp
            km += "Alliance: %s\n" % alliance
            km += "Ship: %s\n" % ship
            km += "Weapon: %s\n" % weapon
            km += "Damage Done: %s\n" % damage_done.replace(",", "")

        if km.endswith("Involved parties:\n"):
            out.emit("Parse errors: No involved parties")
            out.newline()
            return None
        return km

# http://www.evsco.net/?a=feed&view=variables
class EVSCO(object):
    def __init__(self, kburl, after):
        self.after = after
        self.kills = {}
        self.kburl = kburl
        data = urlget(kburl)
        m = re.search('<meta name="description" '
                      'content="EDK Killboard - (.*?)(?: Killboard)?" />',
                      data)
        if m is None:
            raise RuntimeException("Not an EVSCO killboard")
        self.name = m.group(1)
        self.entitytype = "corp"

    def killids(self):
        now = datetime.datetime.utcnow()
        oneweek = datetime.timedelta(7)
        while now + oneweek > self.after:
            year = now.year
            week = int(now.strftime("%W"))
            out.emit("Retrieving kill infos from week %i in %i" %
                     (week, year))
            self.get_feed_kills(year, week)
            now -= oneweek
        return self.kills.keys()

    def killmail(self, killid):
        return self.kills[killid]

    def get_feed_kills(self, year, week):
        args = {'a': 'feed',
                'combined': '1',
                'week': week,
                'year': year,
                self.entitytype: self.name}
        feedurl = "http://feed.evsco.net/?%s" % urllib.urlencode(args)
        xml = ElementTree.fromstring(urlget(feedurl))
        result = xml.findall("channel/item")
        if len(result) == 0:
            if self.entitytype == 'corp':
                self.entitytype = 'alli'
                self.get_feed_kills(year, week)
            else:
                return
        else:
            for item in result:
                killid = int(item.find("title").text)
                ki = item.find("description").text.strip()
                self.kills[killid] = ki

class EDKFeed(object):
    def __init__(self, kburl, after):
        self.after = after
        self.kills = {}
        self.kburl = kburl
        self.feed_args = self.get_feed_args()

    def killids(self):
        now = datetime.datetime.utcnow()
        oneweek = datetime.timedelta(7)
        while now + oneweek > self.after:
            year = now.year
            week = int(now.strftime("%W"))
            out.emit("Retrieving kill infos from week %i in %i" %
                     (week, year))
            self.get_feed_kills(year, week)
            now -= oneweek
        return self.kills.keys()

    def killmail(self, killid):
        return self.kills[killid]

    def get_feed_args(self):
        args = [("a", "feed"),
                #("kills", "1"),
                #("losses", "1")
                ]
        name_rxs = [re.compile("<title>(.*?)'s Killboard - [^ ]*</title>"),
                    re.compile("<title>(.*?) Kill Board - Week [^ ]*</title>"),
                    re.compile("<title>(.*?) - Week [^ ]*</title>"),
                    re.compile("<title>(.*?) - [^ ]*</title>"),
                    re.compile(">Alliance details - (.*) \\["),
                    re.compile('"description".*"EDK Killboard - (.*?)"')
                    ]
        type_rx = re.compile("alliance_detail.*Stats")
        if "eve-kill.net" in self.kburl or "killmail.org" in self.kburl:
            kbdata = urlget(self.kburl)
            name = None
            for name_rx in name_rxs:
                m = name_rx.search(kbdata)
                if m is not None:
                    name = m.group(1)
                    break
            if name is None:
                raise RuntimeError, "Can't find the killboard owner name."
            if "alliance_detail" in self.kburl or type_rx.search(kbdata):
                type = "alli"
                out.emit("Assuming this is about the alliance %s" % name)
                out.newline()
            else:
                type = "corp"
                out.emit("Assuming this is about the corporation %s" % name)
                out.newline()
            args.append((type, name))
            self.kburl = "http://admin.evsco.net/"
        return args

    def get_feed_kills(self, year, week):
        args = self.feed_args + [("year", str(year)),
                                 ("week", str(week))]
        for type_arg in [("kills", "1"),
                         ("losses", "1")]:
            feedurl = self.kburl + "?" + urllib.urlencode(args + [type_arg])
            xml = ElementTree.fromstring(urlget(feedurl))
            for item in xml.findall("channel/item"):
                killid = int(item.find("title").text)
                ki = item.find("description").text.strip()
                self.kills[killid] = ki

class Griefwatch(object):
    def __init__(self, kburl, after):
        self.kburl = kburl
        self.after = after
        self.rx = {}
        data = urlget(kburl)
        template_rx = re.compile("/templates/([^/]*)/style.css")
        m = template_rx.search(data)
        if m is None:
            out.emit("Can't identify the Griefwatch template.")
            out.newline()
            sys.exit(1)
        template = m.group(1)
        if template not in GW_RX:
            out.emit("Unknown Griefwatch template %s." % template)
            out.newline()
            sys.exit(1)
        self.rx = GW_RX[template]

    def killids(self):
        result = []
        for pagetype in ["kills", "losses"]:
            page = 1
            while True:
                out.emit("Retrieving %s page %s" % (pagetype, page))
                (lastdate, killids) = self.killids_on_page(page, pagetype)
                result.extend(killids)
                if lastdate is None or lastdate < self.after:
                    break
                page += 1
        out.clear()
        return unique(result)

    def killids_on_page(self, page, pagetype):
        data = urlget(self.list_url(page, pagetype))
        killids = [int(match.groupdict()["killid"])
                   for match in self.rx["killids"].finditer(data)]
        if len(killids) == 0:
            return (None, [])
        timestamp = min([parsedate(match.groupdict())
                         for match in self.rx["listdate"].finditer(data)])
        return (timestamp, unique(killids))

    def list_url(self, page, pagetype):
        return "%s?p=%s&page=%s" % (self.kburl, pagetype, page)

    def detail_url(self, killid):
        return "%s?p=details&kill=%s" % (self.kburl, killid)

    def killmail(self, killid):
        data = urlget(self.detail_url(killid))
        km = self.html2km(data)
        if km is None:
            out.emit("Couldn't parse kill %s" % killid)
            out.newline()
        else:
            return km

    def html2km(self, data):
        data = data.replace("\r", "")
        m = self.rx["detaildate"].search(data)
        if m is None:
            out.emit("Parse error: Date bogus")
            out.newline()
            return None
        timestamp = parsedate(m.groupdict())
        m = self.rx["victim"].search(data)
        if m is None:
            out.emit("Parse error: Victim bogus")
            out.newline()
            return None
        d = m.groupdict()
        victim = d["name"]
        alliance = d.get("alliance", "None")
        corp = d["corp"]
        destroyed = d["ship"]
        system = d["system"]
        security = d["security"]
        damage_taken = d["damage"]
        km = timestamp.strftime("%Y.%m.%d %H:%M\n")
        km += "\n"
        km += "Victim: %s\n" % victim
        km += "Corp: %s\n" % corp
        if alliance is None or alliance.strip() == "":
            alliance = "None"
        km += "Alliance: %s\n" % alliance
        km += "Faction: NONE\n"
        km += "Destroyed: %s\n" % destroyed
        km += "System: %s\n" % system
        km += "Security: %s\n" % security
        km += "Damage Taken: %s\n" % damage_taken.replace(",", "")
        km += "\n"
        km += "Involved parties:\n"
        for m in self.rx["involved"].finditer(data):
            d = m.groupdict()
            name = d["name"]
            fb = d["finalblow"]
            alliance = d.get("alliance", "None")
            corp = d["corp"]
            ship = d["ship"]
            weapon = d["weapon"]
            dd = d["damage"]
            km += "\n"
            if corp in NPCCORPS or name.strip().count(" ") > 1:
                if fb:
                    km += "Name: %s / %s (laid the final blow)\n" % (name, corp)
                else:
                    km += "Name: %s / %s\n" % (name, corp)
                km += "Damage Done: %s\n" % dd.replace(",", "")
            else:
                if fb:
                    name += " (laid the final blow)"
                km += "Name: %s\n" % name
                km += "Security: 0.0\n"
                km += "Corp: %s\n" % corp
                if alliance is None or alliance.strip() == "":
                    alliance = "None"
                km += "Alliance: %s\n" % alliance
                km += "Faction: NONE\n"
                km += "Ship: %s\n" % ship
                km += "Weapon: %s\n" % weapon
                km += "Damage Done: %s\n" % dd.replace(",", "")
        if km.endswith("Involved parties:\n"):
            out.emit("Parse error: No involved parties")
            out.newline()
            return None
        else:
            return km

GW_RX = {}

# Griefwatch Dark template
GW_RX["gwdark"] = {}
GW_RX["gwdark"]["killids"] = re.compile(r'\?p=details\&amp;kill=(?P<killid>[0-9]+)')
GW_RX["gwdark"]["listdate"] = re.compile('>(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) (?P<day>[0-9]+)(?:th|rd|nd|st) (?P<month>[^ ]+), (?P<year>[0-9]+)</div>')
GW_RX["gwdark"]["detaildate"] = re.compile(r'Ship Destruction on <a .*?>(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) (?P<day>[0-9]+)(?:th|rd|nd|st) (?P<month>[^ ]+) (?P<year>[0-9]+)</a>, (?P<hour>[0-9]+):(?P<minute>[0-9]+)</div>')
GW_RX["gwdark"]["victim"] = re.compile("""Victim: <a.*?>(?P<name>.*)</a>.*
Alliance: (?P<alliance>.*)<br>
Corp: <a.*?>(?P<corp>.*)</a><br>
Destroyed: <a.*?>(?P<ship>.*)</a><br>
System: (?P<system>.*)<br>
Security: (?P<security>.*)<br>
Damage Taken: (?P<damage>[0-9,]*)<br />
""")
GW_RX["gwdark"]["involved"] = re.compile("""Name: <a.*?>(?P<name>.*)</a> (?P<finalblow>.*)<br.*
Alliance: (?P<alliance>.*)<br.*
Corp: <a.*?>(?P<corp>.*)</a><br.*
Ship: (?P<ship>.*)<br.*
Weapon: (?P<weapon>.*)<br.*
Damage Done: (?P<damage>[0-9,]*)<br.*
""")

# Griefwatch blue template
GW_RX["gwblue"] = GW_RX["gwdark"].copy()
GW_RX["gwblue"]["detaildate"] = re.compile(r'^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) <span.*?>(?P<day>[0-9]+)(?:th|rd|nd|st) (?P<month>[^ ]+)</span>, (?P<year>[0-9]+)</div>(?:\n|.)*?@ (?P<hour>[0-9]+):(?P<minute>[0-9]+)<br>', re.MULTILINE)
GW_RX["gwblue"]["victim"] = re.compile("""<span class="pname"><a.*?>(?P<name>.*?)</a></span> @ .*
<span.*?><a.*?>(?P<corp>.*)</a> (?:\\[<a.*>(?P<alliance>.*?)</a>\\])? </span><br>
(?P<ship>.*), (?P<system>.*), .*, (?P<security>.*)<br>
Damage Taken: (?P<damage>[0-9,]*)<br />
""")
GW_RX["gwblue"]["involved"] = re.compile("""<div class="subdeco"></div><div class="subheader">.*? \\((?P<ship>.*)\\)</div>
.*(?:\n.*)?\n.*
<span class="pname"><a.*?>(?P<name>.*?)</a></span> (?P<finalblow>.*)<br>
<span.*?><a.*?>(?P<corp>.*)</a> (?:\\[<a.*>(?P<alliance>.*?)</a>\\])?</span><br>
(?P<weapon>.*)<br>
Damage Done: (?P<damage>[0-9,]+)<br>
""")

# Griefwatch chaos template
GW_RX["gwchaos"] = GW_RX["gwblue"].copy()
GW_RX["gwchaos"]["listdate"] = re.compile('^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) <span.*?>(?P<day>[0-9]+)(?:th|rd|nd|st) (?P<month>[^ ]+)</span>, (?P<year>[0-9]+)</span>', re.MULTILINE)
GW_RX["gwchaos"]["detaildate"] = re.compile(r'^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) <span.*?>(?P<day>[0-9]+)(?:th|rd|nd|st) (?P<month>[^ ]+)</span>, (?P<year>[0-9]+)</span>(?:\n|.)*?@ (?P<hour>[0-9]+):(?P<minute>[0-9]+)<br>', re.MULTILINE)
GW_RX["gwchaos"]["victim"] = re.compile("""<a href=.*?><b>(?P<name>.*?)</b></a> @ .*
<span.*?><a.*?>(?P<corp>.*)</a> (?:\\[<a.*>(?P<alliance>.*?)</a>\\])? </span><br>
(?P<ship>.*), (?P<system>.*), .*, (?P<security>.*)<br>
Damage Taken: (?P<damage>[0-9,]*)<br />
""")
GW_RX["gwchaos"]["involved"] = re.compile("""<span class="head3">.*? \\(<span class="head4">(?P<ship>.*)</span>\\)</span>
.*
.*
.*
.*
.*
.*
(?:.*
)?<span class="b"><a.*?>(?P<name>.*?)</a></span> (?P<finalblow>.*)<br>
<span.*?><a.*?>(?P<corp>.*)</a> (?:\\[<a.*>(?P<alliance>.*?)</a>\\])?</span><br>
(?P<weapon>.*)<br>
Damage Done: (?P<damage>[0-9,]+)<br>
""")

# Griefwatch silence tamplate
GW_RX["gwsilence"] = GW_RX["gwdark"].copy()
GW_RX["gwsilence"]["listdate"] = re.compile('>(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday) (?P<day>[0-9]+)(?:th|rd|nd|st) (?P<month>[^ ]+), (?P<year>[0-9]+)</div>', re.MULTILINE)

# Griefwatch ion template
GW_RX["gwion"] = GW_RX["gwchaos"].copy()
# GW_RX["gwchaos"]["killids"] = 
# GW_RX["gwchaos"]["listdate"] = 
# GW_RX["gwchaos"]["detaildate"] = 
# GW_RX["gwchaos"]["victim"] = 
# GW_RX["gwchaos"]["involved"] = 


if __name__ == '__main__':
    main()
