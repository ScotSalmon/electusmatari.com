#!/usr/bin/env python

import sys
import optparse

from lib import index
from lib import evedb
from lib import util
from lib import dbutil

from lib import config

db = evedb.connect()

def main():
    usage = "usage: %prog [options] itemname"
    parser = optparse.OptionParser(usage)
    parser.add_option("-v", "--verbose", action="store_true",
                      dest="verbose", default=False,
                      help="print more information")
    parser.add_option("-i", "--insurance", action="store_true",
                      dest="insurance", default=False,
                      help="print insurance information")
    parser.add_option("--nome", action="store_true",
                      dest="nome", default=False,
                      help="Use perfect ME")
    (options, args) = parser.parse_args()
    item = ""
    if len(args) == 0:
        parser.error("not enough arguments")
    elif len(args) > 1:
        parser.error("too many arguments")
    elif len(args) == 1:
        item = args[0]
    else:
        parser.error("can't happen")

    cost(options, item)

def cost(options, item):
    idx = index.get()

    if options.nome:
        get_me = lambda name: None
    else:
        get_me = get_conf_me

    comps = dbutil.cost(item, idx.copy(), get_me)
    total = sum(price for (_, _, price) in comps)

    if options.insurance:
        base = baseprice(item)
        print "%17s Uninsured payout" % util.humane(base*0.4)
        print "%17s Platinum insurance payout (base price)" % util.humane(base)
        print "%17s Platinum insurance cost" % util.humane(base*0.3)
        print "%17s Replacement program cost" % util.humane(base*0.7)
        print "%17s Production cost" % util.humane(total)
        print "%17s Loss for GRD" % util.humane(total - base * 0.7)

    if options.insurance and options.verbose:
        print

    if options.verbose:
        comps.sort(lambda a, b: matcmp(a[0], b[0]))
        for (name, qty, price) in comps:
            print("%17s %s (%s)" % (util.humane(price), 
                                    name,
                                    util.humane(qty)))
        print("-----------------")
        print("%17s" % util.humane(total))

    if not options.verbose and not options.insurance:
        print(total)

def item_cost(index, t):
    sum = 0
    for (t, qty) in t.leafs():
        if t.name not in index:
            index[t.name] = baseprice(t.name)
            sys.stderr.write("No index price for %s, using base price %.2f\n"
                             % (t.name, index[t.name]))
        sum += index[t.name]*qty
    return sum

def baseprice(item):
    c = db.cursor()
    c.execute("SELECT baseprice FROM ccp.invtypes WHERE typename = %s",
              (item,))
    return c.fetchone()[0]

matlist = ["Tritanium", "Pyerite", "Mexallon", "Isogen",
           "Nocxium", "Zydrine", "Megacyte", "Morphite"]

def matcmp(a, b):
    a_mineral = a in matlist
    b_mineral = b in matlist
    if a_mineral and b_mineral:
        return cmp(matlist.index(a), matlist.index(b))
    elif a_mineral:
        return -1
    elif b_mineral:
        return 1
    else:
        return cmp(a, b)

def get_conf_me(typename):
    conf = config.get()
    for name in [typename] + marketgroups(typename):
        if conf.has_option("ME", name):
            return conf.getint("ME", name)
    sys.stderr.write("Unknown ME for %r, using 0\n" % typename)
    return 0

def marketgroups(typename):
    names = []
    c = db.cursor()
    c.execute("SELECT marketgroupid FROM ccp.invtypes WHERE typename = %s",
              (typename,))
    mgid = c.fetchone()[0]
    while mgid is not None:
        c.execute("SELECT parentgroupid, marketgroupname "
                  "FROM ccp.invmarketgroups "
                  "WHERE marketgroupid = %s",
                  (mgid,))
        (mgid, name) = c.fetchone()
        names.append(name)
    return names


main()
