#!/usr/bin/env python

import optparse
import sys

from lib import evedb
db = evedb.connect()

def main():
    opt = optparse.OptionParser(usage="%prog [options] <start> [waypoints ...] <end>")
    opt.add_option("-H", "--high-sec", dest="highsec_only",
                   action="store_true", default=False,
                   help="Only high-sec jumps (default False)")
    opt.add_option("-Z", "--zero-sec", dest="zerosec",
                   action="store_true", default=False,
                   help="Include zero-sec jumps (default False)")
    opt.add_option("-a", "--avoid", dest="avoid", metavar="SYSTEM",
                   action="append", default=[],
                   help="Avoid SYSTEM (can be specified more than once)")
    (options, args) = opt.parse_args()

    if options.highsec_only:
        secfilter = lambda systemname: security(systemname) >= 0.45
    elif not options.zerosec:
        secfilter = lambda systemname: security(systemname) > 0.0
    else:
        secfilter = lambda x: True

    avoid = [find_system(name) for name in options.avoid]
    visit = [find_system(name) for name in args]

    userfilter = lambda systemname: (secfilter(systemname) and
                                     systemname not in avoid)

    if len(visit) < 2:
        opt.error("Need at least two arguments.")
    elif len(visit) == 2:
        userroute = route(visit[0], visit[1],
                          systemfilter=userfilter)
    else:
        userroute = shortestroute(visit, systemfilter=userfilter)

    if userroute is None:
        sys.stderr.write("No route found with your current settings.\n")
        sys.exit(1)

    lastregion = None
    for (r, systemname) in enumerate(userroute):
        reg = region(systemname)
        if reg != lastregion:
            regstring = ", %s" % reg
        if systemname in visit:
            marker = "*"
        else:
            marker = " "
        if security(systemname) >= 0.45:
            secmarker = '+'
        elif security(systemname) > 0.0:
            secmarker = '-'
        else:
            secmarker = '0'
        print "%3i. %s %s %s%s" % (r, marker, secmarker,
                                   systemname, regstring)
        lastregion = reg

def shortestroute(visit, systemfilter):
    userroute = None
    start = visit[0]
    end = visit[-1]
    for syslist in xpermutations(visit[1:-1]):
        stops = [start] + syslist + [end]
        thisroute = []
        for i in xrange(len(stops)-1):
            r = route(stops[i], stops[i+1],
                      systemfilter=systemfilter)
            if r is None:
                sys.stderr.write("Can't find a route from %s to %s\n"
                                 % (stops[i], stops[i+1]))
                sys.exit(1)
            thisroute.extend(r)
            thisroute.pop()
        thisroute.append(end)
        if userroute is None or len(thisroute) < len(userroute):
            userroute = thisroute
    return userroute

def find_system(name):
    c = db.cursor()
    c.execute("SELECT solarsystemname "
              "FROM ccp.mapsolarsystems "
              "WHERE solarsystemname ILIKE %s",
              (name,))
    if c.rowcount != 1:
        c.execute("SELECT solarsystemname "
                  "FROM ccp.mapsolarsystems "
                  "WHERE solarsystemname ILIKE %s",
                  (name + "%",))
        if c.rowcount == 0:
            sys.stderr.write("Unknown system %s\n" % name)
            sys.exit(1)
        elif c.rowcount > 1:
            sys.stderr.write("System name not unique, pick one:\n\n")
            for (name,) in c.fetchall():
                sys.stderr.write(" %s\n" % name)
            sys.exit(1)
    return c.fetchone()[0]

jumps_d = None
def jumps(systemname):
    global jumps_d
    if jumps_d is None:
        jumps_d = {}
        c = db.cursor()
        c.execute("SELECT f.solarsystemname, t.solarsystemname "
                  "FROM ccp.mapsolarsystemjumps j "
                  "     INNER JOIN ccp.mapsolarsystems f "
                  "       ON j.fromsolarsystemid = f.solarsystemid "
                  "     INNER JOIN ccp.mapsolarsystems t "
                  "       ON j.tosolarsystemid = t.solarsystemid")
        for (f, t) in c.fetchall():
            if f not in jumps_d:
                jumps_d[f] = []
            jumps_d[f].append(t)
    return jumps_d[systemname]

security_d = None
def security(systemname):
    global security_d
    if security_d is None:
        c = db.cursor()
        c.execute("SELECT solarsystemname, security FROM ccp.mapsolarsystems")
        security_d = dict(c.fetchall())
    return security_d[systemname]

region_d = None
def region(systemname):
    global region_d
    if region_d is None:
        c = db.cursor()
        c.execute("SELECT s.solarsystemname, "
                  "       r.regionname "
                  "FROM ccp.mapsolarsystems s "
                  "     INNER JOIN ccp.mapregions r "
                  "       ON s.regionid = r.regionid")
        region_d = dict(c.fetchall())
    return region_d[systemname]

def route(start, end, systemfilter=lambda x: True):
    agenda = [(start, [start])]
    visited = {}
    while len(agenda) > 0:
        ((here, route), agenda) = (agenda[0], agenda[1:])
        if here in visited:
            continue
        elif here == end:
            return route
        else:
            visited[here] = True
            agenda.extend([(neighbor, route + [neighbor])
                           for neighbor in jumps(here)
                          if systemfilter(neighbor)])
    return None

# c.execute("select solarsystemname, x, y, z from mapsolarsystems")
# coord = dict((name, (x, y, z)) for (name, x, y, z) in c.fetchall())
# c.execute("select s.solarsystemname, r.regionname from mapsolarsystems s inner join mapregions r on s.regionid = r.regionid")
# def distance(a, b):
#     return math.sqrt(abs(a[0]-b[0])**2 + abs(a[1]-b[1])**2 + abs(a[2]-b[2])**2)

def xcombinations(items, n):
    if n==0:
        yield []
    else:
        for i in xrange(len(items)):
            for cc in xcombinations(items[:i] + items[i+1:],
                                    n-1):
                yield [items[i]] + cc

def xpermutations(items):
    return xcombinations(items, len(items))

if __name__ == '__main__':
    main()
