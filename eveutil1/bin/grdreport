#!/usr/bin/env python

import collections
import csv
import datetime
import os
import psycopg2

from optparse import OptionParser

from lib import characters
from lib import evedb
from lib.util import humane

GMI_TIME_FILE = "/home/forcer/public_html/eve/gmi/gmi-%Y-%m-%d.txt"
PRICES_FILE = "/home/forcer/public_html/eve/grd-pricelist.txt"

def main():
    parser = OptionParser(usage="%prog [OPTIONS]",
                          version="%prog 1.0")
    parser.add_option("--after", dest="after_date", metavar="DATE",
                      help="Ignore entries before DATE",
                      default=None)
    parser.add_option("--before", dest="before_date", metavar="DATE",
                      help="Ignore entries past DATE",
                      default=None)
    (options, args) = parser.parse_args()
    db = psycopg2.connect("dbname=eve")
    c = db.cursor()
    if options.after_date is not None:
       start = datetime.datetime.strptime(options.after_date, "%Y-%m-%d")
    else:
       start = datetime.datetime.strptime("1990-01-01", "%Y-%m-%d")
    if options.before_date is not None:
       end = datetime.datetime.strptime(options.before_date, "%Y-%m-%d")
    else:
       end = datetime.datetime.utcnow() + datetime.timedelta(days=1)
    header("Gradient Report", "^")
    print "(%s - %s)" % (start.strftime("%Y-%m-%d"),
                         (end-datetime.timedelta(days=1)).strftime("%Y-%m-%d"))
    print
    report_transaction(c, start, end)
    report_minerals(c, start, end)
    report_index(c, start, end)
    report_journal(c, start, end)

def report_minerals(c, start, end):
    minerals = ['Tritanium', 'Pyerite', 'Mexallon', 'Isogen',
                'Nocxium', 'Zydrine', 'Megacyte']
    header("Mineral Supply", "=")
    print
    for mineral in minerals:
       c.execute("SELECT SUM(quantity) AS qty, "
                 "       stationname "
                 "FROM grd_transactions "
                 "WHERE transactiontype = 'buy' "
                 "  AND typename = %s "
                 "  AND date >= %s "
                 "  AND date < %s "
                 "GROUP BY stationname "
                 "ORDER BY qty DESC "
                 "LIMIT 10",
                 (mineral, start, end))
       header(mineral, "-")
       printlist(c.fetchall(), unit=" k", divider=1000.0)
       print

def report_index(c, start, end):
    minerals = ['Tritanium', 'Pyerite', 'Mexallon', 'Isogen',
                'Nocxium', 'Zydrine', 'Megacyte']
    header("Index Review", "=")
    print
    c.execute("SELECT typename, "
              "       SUM(price*quantity) / SUM(quantity), "
              "       SUM(quantity) "
              "FROM grd_transactions "
              "WHERE typename IN (%s) "
              "  AND transactiontype = 'buy' "
              "  AND date >= %%s "
              "  AND date < %%s "
              "GROUP BY typename" % ", ".join(["%s"] * len(minerals)),
              tuple(minerals + [start, end]))
    paid = {}
    volume = {}
    total = 0
    for (typename, avg, vol) in c.fetchall():
       paid[typename] = avg
       volume[typename] = vol
       total += avg*vol
    index = collections.defaultdict(lambda: 0)
    now = start
    days = 0
    while now <= end:
       fname = now.strftime(GMI_TIME_FILE)
       now += datetime.timedelta(days=1)
       if not os.path.exists(fname):
          continue
       nowindex = dict((row[0], float(row[1])) for row in
                       list(csv.reader(file(fname)))
                       if row[0] in minerals)
       for mineral in minerals:
          index[mineral] += nowindex[mineral]
       days += 1
    saved = 0
    print "%-10s | %-13s | %-8s | %-8s | %-9s" % (
       "Mineral", "Volume", "Paid", "Index", "Difference"
       )
    print "-----------+---------------+----------+----------+------------"
    for mineral in minerals:
       saved += ((volume.get(mineral, 0) * index[mineral] / days) -
                 (volume.get(mineral, 0) * paid.get(mineral, 0.0)))
       print "%-10s | %13s | %8.2f | %8.2f | %+9.1f%%" % (
          mineral,
          humane(volume.get(mineral, 0)),
          paid.get(mineral, 0.0),
          index[mineral] / days,
          ((paid.get(mineral, 0.0) / (index[mineral] / days)) - 1) * 100
          )
    print
    print "Total expense: %s" % humane(total)
    print "Purchasing profit: %s" % humane(saved)
    print

def report_transaction(c, start, end):
    header("Production Wallet Transaction Overview", "=")
    print
    header("Market Revenue per Sales Point", "-")
    c.execute("SELECT SUM(price*quantity) as income, "
              "       stationname "
              "FROM grd_transactions "
              "WHERE transactiontype = 'sell' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              "GROUP BY stationname "
              "ORDER BY income DESC "
              , (start, end))
    printlist(c.fetchall())
    print
    header("Estimated Profit per Sales Point", "-")
    c.execute("SELECT date, price, quantity, typename, stationname "
              "FROM grd_transactions "
              "WHERE transactiontype = 'sell' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              , (start, end))
    printlist(profit(c.fetchall()))
    print
    header("Market Expenses per Purchase Point (Top 10)", "-")
    c.execute("SELECT SUM(price*quantity) as income, "
              "       stationname "
              "FROM grd_transactions "
              "WHERE transactiontype = 'buy' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              "GROUP BY stationname "
              "ORDER BY income DESC "
              "LIMIT 10"
              , (start, end))
    printlist(c.fetchall())
    print
    header("Estimated Profit per Purchaser", "-")
    c.execute("SELECT date, price, quantity, typename, charactername "
              "FROM grd_transactions "
              "WHERE transactiontype = 'buy' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              , (start, end))
    printlist(profit(c.fetchall(), purchase=True))
    print
    header("Top 10 Selling Items", "-")
    c.execute("SELECT SUM(price*quantity) AS income, "
              "       (typename || ' x' || SUM(quantity)) AS typename "
              "FROM grd_transactions "
              "WHERE transactiontype = 'sell' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              "GROUP BY typename "
              "ORDER BY income DESC "
              "LIMIT 10 "
              , (start, end))
    printlist(c.fetchall())
    print
    header("Top 10 Purchased Items", "-")
    c.execute("SELECT SUM(price*quantity) AS income, "
              "       (typename || ' x' || SUM(quantity)) AS typename "
              "FROM grd_transactions "
              "WHERE transactiontype = 'buy' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              "GROUP BY typename "
              "ORDER BY income DESC "
              "LIMIT 10 "
              , (start, end))
    printlist(c.fetchall())
    print
    header("Top 10 Customers", "-")
    c.execute("SELECT SUM(price*quantity) AS income, "
              "       clientname AS customer "
              "FROM grd_transactions "
              "WHERE transactiontype = 'sell' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              "GROUP BY customer "
              "ORDER BY income DESC "
              "LIMIT 10 "
              , (start, end))
    printlist(c.fetchall())
    print
    header("Top 10 Suppliers", "-")
    c.execute("SELECT SUM(price*quantity) AS income, "
              "       clientname AS customer "
              "FROM grd_transactions "
              "WHERE transactiontype = 'buy' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              "GROUP BY customer "
              "ORDER BY income DESC "
              "LIMIT 10 "
              , (start, end))
    printlist(c.fetchall())
    print
    
 
    c.execute("SELECT DISTINCT stationname FROM grd_transactions "
              "WHERE transactiontype = 'sell' "
              "  AND account = 1002 "
              "  AND date >= %s "
              "  AND date < %s "
              "ORDER BY stationname ASC "
              , (start, end))
    prodoffices = [x for (x,) in c.fetchall()]
    for office in prodoffices:
       header(office, "=")
       print
       header("Sales Persons", "-")
       c.execute("SELECT SUM(price*quantity) as income, "
                 "       charactername "
                 "FROM grd_transactions "
                 "WHERE transactiontype = 'sell' "
                 "  AND account = 1002 "
                 "  AND date >= %s "
                 "  AND date < %s "
                 "  AND stationname = %s "
                 "GROUP BY charactername "
                 "ORDER BY income DESC "
                 , (start, end, office))
       printlist(c.fetchall())
       print
       header("Top 10 Selling Items", "-")
       c.execute("SELECT SUM(price*quantity) AS income, "
                 "       (typename || ' x' || SUM(quantity)) AS typename "
                 "FROM grd_transactions "
                 "WHERE transactiontype = 'sell' "
                 "  AND account = 1002 "
                 "  AND date >= %s "
                 "  AND date < %s "
                 "  AND stationname = %s "
                 "GROUP BY typename "
                 "ORDER BY income DESC "
                 "LIMIT 10 "
                 , (start, end, office))
       printlist(c.fetchall())
       print
       header("Top 10 Customers", "-")
       c.execute("SELECT SUM(price*quantity) AS income, "
                 "       clientname AS customer "
                 "FROM grd_transactions "
                 "WHERE transactiontype = 'sell' "
                 "  AND account = 1002 "
                 "  AND date >= %s "
                 "  AND date < %s "
                 "  AND stationname = %s "
                 "GROUP BY customer "
                 "ORDER BY income DESC "
                 "LIMIT 10 "
                 , (start, end, office))
       printlist(c.fetchall())
       print


def report_journal(c, start, end):
   header("Per-Wallet Journal", "=")
   c.execute("SELECT SUM(amount), account "
             "FROM grd_journal "
             "WHERE date >= %s "
             "  AND date < %s "
             "GROUP BY account "
             "ORDER BY account asc"
             , (start, end))
   printlist(c.fetchall(), translate=accountname)
   print
   for account in range(1000, 1007):
      header("%s Journal" % (accountname(account).title(),),
             "-")
      c.execute("SELECT SUM(amount) AS amt, reftypeid "
                "FROM grd_journal "
                "WHERE date >= %s "
                "  AND date < %s "
                "  AND account = %s "
                "GROUP BY refTypeID "
                "ORDER BY amt DESC "
                , (start, end, account))
      printlist(c.fetchall(), translate=reftypename)
      print
   header("Agent Work", "=")
   print
   header("Agents Used by More than One Pilot", "-")
   c.execute("SELECT COUNT(*) AS pilots, agent "
             "FROM (SELECT DISTINCT argname1 AS agent, "
             "                      ownername2 AS pilot "
             "      FROM grd_journal "
             "      WHERE date >= %s "
             "        AND date < %s "
             "        AND refTypeID IN (33, 93)) "
             "     AS agentpilots "
             "GROUP BY agent "
             "HAVING COUNT(*) > 1 "
             "ORDER BY pilots DESC, "
             "         agent ASC "
             , (start, end)
             )
   printlist(c.fetchall(), translate=agentdesc, unit="", divider=1)
   print
   header("Top 10 Most-Used Agents (Missions)", "-")
   c.execute("SELECT COUNT(*) AS count, "
             "       argname1 AS agent "
             "FROM grd_journal "
             "WHERE refTypeID IN (33, 93) "
             "  AND date >= %s "
             "  AND date < %s "
             "GROUP BY argname1 "
             "ORDER BY count DESC "
             "LIMIT 10 "
             , (start, end))
   printlist(c.fetchall(), translate=agentdesc, unit="", divider=1)
   print
   header("Top 10 Most-Used Agents (Taxes)", "-")
   c.execute("SELECT SUM(amount) AS income, "
             "       argname1 AS agent "
             "FROM grd_journal "
             "WHERE refTypeID IN (33, 34, 93, 94) "
             "  AND date >= %s "
             "  AND date < %s "
             "GROUP BY argname1 "
             "ORDER BY income DESC "
             "LIMIT 10 "
             , (start, end))
   printlist(c.fetchall(), translate=agentdesc)
   print
   header("Top 10 Mission Runners (Taxes)", "-")
   c.execute("SELECT SUM(amount) AS income, "
             "       ownerName2 AS pilot "
             "FROM grd_journal "
             "WHERE refTypeID IN (33, 34, 85, 92, 93, 94) "
             "  AND date >= %s "
             "  AND date < %s "
             "GROUP BY pilot "
             "ORDER BY income DESC "
             "LIMIT 10 "
             , (start, end))
   printlist(c.fetchall())
   print
   header("Top 10 Mission Runners (Missions)", "-")
   c.execute("SELECT COUNT(*) AS count, "
             "       ownerName2 AS pilot "
             "FROM grd_journal "
             "WHERE refTypeID IN (33, 93) "
             "  AND date >= %s "
             "  AND date < %s "
             "GROUP BY pilot "
             "ORDER BY count DESC "
             "LIMIT 10 "
             , (start, end))
   printlist(c.fetchall(), unit="", divider=1)
   print
   header("Top 10 Bounty Tax Systems", "-")
   c.execute("SELECT SUM(amount) AS income, "
             "       argname1 AS system "
             "FROM grd_journal "
             "WHERE refTypeID IN (85, 92) "
             "  AND date >= %s "
             "  AND date < %s "
             "GROUP BY argname1 "
             "ORDER BY income DESC "
             "LIMIT 10 "
             , (start, end))
   printlist(c.fetchall())

reftypes = None
def reftypename(reftypeid):
   global reftypes
   if reftypes is None:
      try:
         api = characters.api()
         rt = api.eve.RefTypes()
         reftypes = dict((x.refTypeID, x.refTypeName) for x in rt.refTypes)
      except:
         reftypes = {}
   return reftypes.get(reftypeid, str(reftypeid))

accounts = None
def accountname(accountid):
   global accounts
   if accounts is None:
      try:
         corp = characters.corp()
         cs = corp.CorporationSheet()
         accounts = dict((x.accountKey, x.description)
                         for x in cs.walletDivisions)
      except:
         accounts = {}
   return accounts.get(accountid, str(accountid))

def header(title, underline="="):
    print title
    print underline * len(title)

def printlist(data, translate=lambda x: x, unit=" M", divider=1000.0*1000):
    for (amount, text) in data:
        print "%10s%s  %s" % (humane(amount/divider),
                              unit,
                              translate(text))

def profit(rows, purchase=False):
    prices = getprices()
    indexdict = {}
    profits = {}
    for date, price, quantity, typename, stationname in rows:
        cost = prices.get(typename, 0)
        if cost == 0:
            timestamp = date.strftime(GMI_TIME_FILE)
            if timestamp not in indexdict:
                index = getindex(date)
                indexdict[timestamp] = index
            else:
                index = indexdict[timestamp]
            cost = index.get(typename, 0)
            if cost == 0:
                continue
        profits.setdefault(stationname, 0)
        if purchase:
            profits[stationname] += quantity * (cost - price)
        else:
            profits[stationname] += quantity * (price - cost)
    profits = [(profit, stationname) for (stationname, profit)
               in profits.items()]
    profits.sort(reverse=True)
    return profits

def getprices():
    return dict([(row[0], float(row[1]))
                 for row in csv.reader(file(PRICES_FILE))])

def getindex(now=None):
    if now is None:
       now = datetime.datetime.now()
    return dict((row[0], float(row[1])) for row in
                list(csv.reader(file(now.strftime(GMI_TIME_FILE))))
                if row[1] not in ('', 'Index'))

agtdescs = None
def agentdesc(agentname):
   global agtdescs
   if agtdescs is None:
      db = evedb.connect()
      c = db.cursor()
      c.execute("SELECT an.itemname, a.level, sys.solarsystemname, "
                "       cn.itemname, at.agenttype "
                "FROM invnames an "
                "     INNER JOIN agtagents a "
                "       ON an.itemid = a.agentid "
                "     INNER JOIN invnames cn " 
                "       ON a.corporationid = cn.itemid "
                "     LEFT JOIN stastations st "
                "       ON a.locationid = st.stationid "
                "     LEFT JOIN mapsolarsystems sys "
                "       ON st.solarsystemid = sys.solarsystemid "
                "     INNER JOIN agtagenttypes at "
                "       ON a.agenttypeid = at.agenttypeid ")
      agtdescs = {}
      for (name, level, system, corp, agttype) in c.fetchall():
         if agttype == 'GenericStorylineMissionAgent':
            level_desc = "important"
         elif agttype == 'EpicArcAgent':
            level_desc = "epic"
         else:
            level_desc = "L%s" % level
         if system is None:
            system = "in space"
         agtdescs[name] = "%s (%s, %s %s)" % (name, system, level_desc, corp)
   return agtdescs.get(agentname, agentname)

if __name__ == '__main__':
   main()
