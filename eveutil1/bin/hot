#!/usr/bin/env python

import datetime
import optparse

from lib import characters
from lib import evedb

def main():
    usage = "usage: %prog [options]"
    parser = optparse.OptionParser(usage)
    parser.add_option("--high-sec", action="store_true",
                      dest="highsec", default=False,
                      help="include high-sec systems")
    (options, args) = parser.parse_args()

    kills = characters.api().map.Kills()
    republic = get_republic(options.highsec)
    data = []
    for k in kills.solarSystems:
        if k.solarSystemID in republic and k.shipKills > 0:
            (sys, reg) = republic[k.solarSystemID]
            data.append((k.shipKills, sys, reg))
    data.sort()
    data.reverse()
    time = datetime.datetime.utcfromtimestamp(kills.dataTime)
    cached = datetime.datetime.utcfromtimestamp(kills._meta.cachedUntil)
    print "Data from %s, cached until %s" % (time.strftime("%Y-%m-%d %H:%M"),
                                             cached.strftime("%Y-%m-%d %H:%M"))
    print
    for (n, (kills, sys, reg)) in enumerate(data):
        if n > 9:
            break
        print "%2i. %s, %s (%i kills)" % (n+1, sys, reg, kills)

def get_republic(highsec=False):
    db = evedb.connect()
    c = db.cursor()
    sql = ("SELECT sys.solarSystemID, sys.solarSystemName, r.regionName "
           "FROM ccp.mapSolarSystems sys "
           "     INNER JOIN ccp.mapRegions r "
           "       ON sys.regionID = r.regionID "
           "WHERE r.regionName IN ('Heimatar', 'Metropolis', 'Molden Heath')")
    if not highsec:
        sql += "\n  AND sys.security < 0.45"
    c.execute(sql)
    return dict((sysid, (sysname, regname)) for (sysid, sysname, regname)
                in c.fetchall())
    

if __name__ == "__main__":
    main()
