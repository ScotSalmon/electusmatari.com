#!/usr/bin/env python

# <Theron_> Can you do the ordering T1 modules+ships/T2 modules+ships/T2
#     components, then within those categories as per the market
#     browser?

import csv

from lib import dbutil
from lib import evedb

db = evedb.connect()

def main():
    c = db.cursor()
    c.execute("SELECT pt.typeName "
              "FROM invblueprinttypes bt "
              "     INNER JOIN invtypes t "
              "       ON bt.blueprintTypeID = t.typeID "
              "     INNER JOIN invtypes pt "
              "       ON bt.productTypeID = pt.typeID "
              "WHERE t.published = 1 "
              "  AND pt.published = 1")
    bp = [x for (x,) in c.fetchall()]
    bp.sort()
    t1bp = []
    t2bp = []
    otherbp = []
    for name in bp:
        mats = dbutil.manufacture(name)
        mgs = marketgroups(name)
        if mats is None:
            continue
        elif (only_minerals(mats) and
              "Rigs" not in mgs and
              "Capital Industrial Ships" not in mgs and
              "Freighters" not in mgs and
              "Dreadnought" not in mgs and
              "Carrier" not in mgs and
              "Mothership" not in mgs and
              "Titan" not in mgs):
            t1bp.append((name, mats))
        elif (ist2(name) and
              "Rigs" not in marketgroups(name) and
              "Jump Freighters" not in marketgroups(name)):
                t2bp.append((name, mats))
        else:
            otherbp.append((name, mats))
        
    writecsv(t1bp, "/home/forcer/public_html/bp/bpo-t1.csv")
    writecsv(t2bp, "/home/forcer/public_html/bp/bpo-t2.csv")
    writecsv(otherbp, "/home/forcer/public_html/bp/bpo-rest.csv")

def writecsv(materials, filename):
    matnames = {}
    for (itemname, mats) in materials:
        for (matname, qty, dpj) in mats:
            matnames[matname] = True
    matnames = matnames.keys()
    matnames.sort(matcmp)
    materials.sort()
    w = csv.writer(file(filename, "w"))
    w.writerow(["Typename"] + matnames)
    for (itemname, mats) in materials:
        md = dict((matname, qty * dpj) for (matname, qty, dpj) in mats)
        w.writerow([itemname] + [md.get(matname, 0) for matname in matnames])

matlist = ["Tritanium", "Pyerite", "Mexallon", "Isogen",
           "Nocxium", "Zydrine", "Megacyte", "Morphite"]

def matcmp(a, b):
    a_mineral = a in matlist
    b_mineral = b in matlist
    if a_mineral and b_mineral:
        return cmp(matlist.index(a), matlist.index(b))
    elif a_mineral:
        return -1
    elif b_mineral:
        return 1
    else:
        return cmp(a, b)

def only_minerals(mats):
    for (name, qty, dpj) in mats:
        if name == 'Morphite' or name not in matlist:
            return False
    return True
   
techlevel = None
def ist2(name):
    global techlevel
    if techlevel is None:
        c = db.cursor()
        c.execute("SELECT t.typename, "
                  "       COALESCE(dta.valueint, dta.valuefloat) "
                  "FROM invtypes t "
                  "     INNER JOIN dgmtypeattributes dta "
                  "       ON t.typeid = dta.typeid "
                  "     INNER JOIN dgmattributetypes dat "
                  "       ON dta.attributeid = dat.attributeid "
                  "WHERE dat.attributename = 'techLevel' "
                  "ORDER BY t.typename ASC")
        techlevel = dict(c.fetchall())
    return techlevel.get(name, 0) == 2

def marketgroups(typename):
    names = []
    c = db.cursor()
    c.execute("SELECT marketgroupid FROM invtypes WHERE typename = %s",
              (typename,))
    mgid = c.fetchone()[0]
    while mgid is not None:
        c.execute("SELECT parentgroupid, marketgroupname "
                  "FROM invmarketgroups "
                  "WHERE marketgroupid = %s",
                  (mgid,))
        (mgid, name) = c.fetchone()
        names.append(name)
    return names

if __name__ == '__main__':
    main()
