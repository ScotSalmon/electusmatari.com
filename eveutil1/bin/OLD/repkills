#!/usr/bin/env python

import datetime
import math
import psycopg2

from optparse import OptionParser

from lib import evedb
from lib.util import humane

REPUBLIC_REGIONS = [
   'Heimatar',
   'Metropolis',
   'Molden Heath',
   'Great Wildlands'
   ]

AREAS = [
   ('Konora',
    ['Hulf']),
   ('Metro pipe',
    ['Inkelm', 'Ergruk', 'Rollera']),
   ('Hadozeko',
    ['Tiat', 'Essin', 'Eugidi', 'Angils']),
   ('Evati',
    ['Aldodan']),
   ('Hagilur',
    ['Barvigrard', 'Fribrodi']),
   ('Amamake',
    ['Hed', 'Huvilma']),
   ('Gusandall',
    ['Benurad', 'Evannater', 'Akimamur', 'Wiedadur']),
   ('Upper MH (Oddelulf)',
    ['Fittakan']),
   ('Isto Pocket',
    ['Almur']),
   ('Lower MH (Egbinger)',
    ['Tartatven', 'Elfrard']),
   ('Skarkon',
    ['Besateoden', 'Eoldulf']),
   ('B-VIP pipe',
    ['V-4QJC']),
   ('BRT pipe',
    ['AP-S8F', 'HRJG-D']),
   ('Central GW',
    ['730-KH', 'Q-PVMK']),
   ('LXTC pipe',
    ['DYK-G8']),
   ('N-RAEL pipe',
    ['I3-2J0', 'L-TEVM']),
   ('GW Backwater',
    ['BB8E-G', 'IYOO-M', 'K-DLD2', 'T-W4L3', 'U-3HAO', 'V-LQBF', 'W-3Y6D'])
   ]

db = evedb.connect()

def main():
   parser = OptionParser(usage="%prog [OPTIONS]",
                         version="%prog 1.0")
   parser.add_option("--after", dest="after_date", metavar="DATE",
                     help="Ignore entries before DATE",
                     default=None)
   parser.add_option("--before", dest="before_date", metavar="DATE",
                     help="Ignore entries past DATE",
                     default=None)
   parser.add_option("--compare", dest="compare", action="store_true",
                     help="Compare with the same period before this",
                     default=False)
   parser.add_option("-n", "--numsys", dest="numsys", type="int",
                     help="Number of systems to emit",
                     default=20)
   (options, args) = parser.parse_args()
   header("Republic Report", "=")
   (syscount, compare) = get_stats("shipkills",
                                   options.after_date,
                                   options.before_date,
                                   options.compare)
   republicreport(syscount, compare)
   print
   regionreport(syscount, compare)
   print
   areareport(syscount, compare)
   print
   systemreport(syscount, compare, options.numsys)

def republicreport(syscount, compare):
   header("Republic Kills", "-")
   report([("The Republic", sum(syscount.values()))],
          [("The Republic", sum(compare.values()))])

def regionreport(syscount, compare):
   regionkills = {}
   for (system, kills) in syscount.items():
      region = sysregion(system)
      if region not in regionkills:
         regionkills[region] = 0
      regionkills[region] += kills
   if compare:
      regioncompare = {}
      for (system, kills) in compare.items():
         region = sysregion(system)
         if region not in regioncompare:
            regioncompare[region] = 0
         regioncompare[region] += kills
   else:
      regioncompare = None
   rk = regionkills.items()
   rk.sort(lambda a, b: cmp(a[1], b[1]),
           reverse=True)
   header("Region Kills", "-")
   report(rk, regioncompare)
   print
   regsize = regionsizes()
   maxsize = max(regsize[x] for x in REPUBLIC_REGIONS)
   nrk = [(region, int(round(kills / float(regsize[region]))))
          for (region, kills) in rk]
   nrk_compare = dict((region, int(round(kills / float(regsize[region]))))
                      for (region, kills) in regioncompare.items())
   nrk.sort(lambda a, b: cmp(a[1], b[1]),
            reverse=True)
   header("Normalized Region Kills", "-")
   report(nrk, nrk_compare)

def areareport(syscount, compare):
   areas = get_areas(syscount)
   if compare:
      compare_areas = get_areas(compare)
   else:
      compare_areas = None
   header("Area Kills", "-")
   report(areas, compare_areas)
   print
   areas = get_areas(syscount, True)
   if compare:
      compare_areas = get_areas(compare, True)
   else:
      compare_areas = None
   header("Normalized Area Kills", "-")
   report(areas, compare_areas)

def systemreport(syscount, compare, num):
   syskills = syscount.items()
   syskills.sort(lambda a, b: cmp(a[1], b[1]),
                 reverse=True)
   header("Top %i System Kills" % num, "-")
   report(syskills[0:num], compare)

def report(killlist, compare):
   if compare:
      oldsystems = dict(compare)
      for (system, kills) in killlist:
         oldkills = oldsystems[system]
         print ("%6s (%6s, %+6i, %+5.1f%% / %+5.1f) %s"
                % (humane(kills),
                   humane(oldkills),
                   kills - oldkills,
                   ((float(kills)/oldkills)-1)*100,
                   -1*((oldkills - kills) / math.sqrt(oldkills)),
                   system))
   else:
      for (system, kills) in killlist:
         print "%s %s" % (humane(kills), system)

def get_areas(syscount, do_normalize=False):
    areas = []
    for (area, constellations) in AREAS:
        systems = []
        for constellation in constellations:
            systems.extend(systems_in_constellation(constellation))
        areas.append((area, systems))
    if do_normalize:
       max_size = max(len(systems) for (area, systems) in areas)
       normalize = dict((area, 1/float(len(systems)))
                        for (area, systems) in areas)
    else:
       normalize = {}
    counts = [(area, int(round((sum(syscount[sysname] for sysname in systems)
                                * normalize.get(area, 1)))))
              for (area, systems) in areas]
    counts.sort(lambda a, b: cmp(a[1], b[1]))
    counts.reverse()
    return counts

def get_stats(colname, after, before, do_compare):
   if after is not None:
      start = datetime.datetime.strptime(after, "%Y-%m-%d")
   else:
      start = datetime.datetime.strptime("1990-01-01", "%Y-%m-%d")
   if before is not None:
      end = datetime.datetime.strptime(before, "%Y-%m-%d")
   else:
      end = datetime.datetime.utcnow() + datetime.timedelta(days=1)
   print "Analyzing data from %s to %s" % (start.strftime("%Y-%m-%d"),
                                           end.strftime("%Y-%m-%d"))
   if do_compare:
      compareend = start
      comparestart = start - (end - start)
      print ("Comparing with normalized data from %s to %s" %
             (comparestart.strftime("%Y-%m-%d"),
              compareend.strftime("%Y-%m-%d")))
   else:
      comparestart = None
      compareend = None
   print

   db2 = psycopg2.connect("dbname=eve")
   c2 = db2.cursor()
   sql = ("SELECT systemid, SUM(%s) AS sum, COUNT(*) AS count "
          "FROM republic_map "
          "WHERE timestamp >= %%s "
          "  AND timestamp < %%s "
          "GROUP BY systemid " % colname)
   c2.execute(sql, (start, end))
   if do_compare:
      rows = c2.fetchall()
      normalize = max(count for (sysid, sum, count) in rows)
      main_entries = [(sysname(sysid),
                       int(round((sum/float(count))*normalize)))
                      for (sysid, sum, count) in rows]
   else:
      normalize = 1
      main_entries = [(sysname(sysid), sum)
                      for (sysid, sum, count) in c2.fetchall()]
   compare_entries = None
   if comparestart and compareend:
      c2.execute(sql, (comparestart, compareend))
      compare_entries = [(sysname(sysid),
                          int(round((sum/float(count))*normalize)))
                         for (sysid, sum, count) in c2.fetchall()]
   return (dict((system, kills) for (system, kills) in main_entries
                if sysregion(system) in REPUBLIC_REGIONS),
           dict((system, kills) for (system, kills) in compare_entries
                if sysregion(system) in REPUBLIC_REGIONS))

sysname_d = {}
def sysname(sysid):
    if sysid not in sysname_d:
        c = db.cursor()
        c.execute("SELECT solarsystemname FROM mapsolarsystems WHERE solarsystemid = %s", (sysid,))
        sysname_d[sysid] = c.fetchone()[0]
    return sysname_d[sysid]

sysregion_d = {}
def sysregion(sysname):
   global sysregion_d
   if sysname not in sysregion_d:
      c = db.cursor()
      c.execute("SELECT s.solarsystemname, r.regionname "
                "FROM mapsolarsystems s "
                "     INNER JOIN mapregions r "
                "       ON s.regionid = r.regionid ")
      sysregion_d = dict(c.fetchall())
   return sysregion_d[sysname]

def regionsizes():
   c = db.cursor()
   c.execute("SELECT r.regionname, COUNT(*) "
             "FROM mapsolarsystems s "
             "     INNER JOIN mapregions r "
             "       ON s.regionid = r.regionid "
             "GROUP BY r.regionname ")
   return dict(c.fetchall())

def systems_in_constellation(constname):
    c = db.cursor()
    c.execute("SELECT s.solarsystemname "
              "FROM mapsolarsystems s "
              "     INNER JOIN mapconstellations c "
              "       ON s.constellationid = c.constellationid "
              "WHERE c.constellationname = %s "
              "  AND s.security < 0.45",
              (constname,))
    return [x for (x,) in c.fetchall()]

def header(title, underline="="):
   print title
   print underline * len(title)

if __name__ == '__main__':
    main()
