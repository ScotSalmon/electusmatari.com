#!/usr/bin/env python

import sys
sys.path.append("/home/forcer/Projects/eveutil/dev/bin")
from lib import evedb

import csv
import datetime
import math

from collections import defaultdict

import gnuplot

def main():
    ##################################################################
    # Full history
    days = 3*28

    ep = EMPlot(title="EM Kills and Losses (%i day moving average)" % days,
                xlabel="Time", ylabel="Kills",
                outfile="/home/forcer/public_html/em-kills-gnuplot.png")

    kpdra = getkills("2006-08-20", days, 
                     lambda ts, kpd, lpd: kpd.get(ts, 0))
    lpdra = getkills("2006-08-20", days,
                     lambda ts, kpd, lpd: lpd.get(ts, 0))

    def efficiency(ts, kpd, lpd):
        if kpd.get(ts, 0) == 0:
            if lpd.get(ts, 0) == 0:
                return None
            else:
                return 0
        else:
            return (kpd[ts] / float(kpd[ts] + lpd.get(ts, 0)))
    epdra = getkills("2006-08-20", days, efficiency)

    mvgstart = (datetime.datetime.strptime("2006-08-20", "%Y-%m-%d")
                + datetime.timedelta(days=days)).strftime("%Y-%m-%d")
    # ep.add_arrow(mvgstart, "%i days" % days, pos=0.95)

    addemhistory(ep, mvgstart)

    ep.cmd('set arrow from "%s", 0.5 to "%s", 0.5 nohead linetype 1' %
           (mvgstart, kpdra[-1][0]))
    
    ep.mplot([("Losses", lpdra),
              ("Kills", kpdra),
              ("Efficiency", epdra)],
             start=mvgstart)

    ##################################################################
    # Shift history
    days = 3*28

    ep = EMPlot(title="EM Kills per Shift (%i day moving average)" % days,
                xlabel="Time", ylabel="Kills",
                outfile="/home/forcer/public_html/em-kills-shiftwise.png")

    def shift(s):
        def is_time(time):
            hour = int(time.split(":")[0])
            if hour >= 6 and hour < 14:
                shift = 1
            elif hour >= 14 and hour < 22:
                shift = 2
            elif hour >= 22 or hour < 6:
                shift = 3
            else:
                raise RuntimeException, "Bad hour %i" % hour
            return shift == s
        return is_time

    s1 = getkills("2006-08-20", days, 
                  lambda ts, kpd, lpd: kpd.get(ts, 0),
                  select=shift(1))
    s2 = getkills("2006-08-20", days, 
                  lambda ts, kpd, lpd: kpd.get(ts, 0),
                  select=shift(2))
    s3 = getkills("2006-08-20", days, 
                  lambda ts, kpd, lpd: kpd.get(ts, 0),
                  select=shift(3))

    mvgstart = (datetime.datetime.strptime("2006-08-20", "%Y-%m-%d")
                + datetime.timedelta(days=days)).strftime("%Y-%m-%d")
    # ep.add_arrow(mvgstart, "%i days" % days, pos=0.95)

    addemhistory(ep, mvgstart)

    # ep.cmd('set arrow from "%s", 0.5 to "%s", 0.5 nohead linetype 1' %
    #        (mvgstart, kpdra[-1][0]))
    
    ep.mplot([("1st Shift", s1),
              ("2nd Shift", s2),
              ("3rd Shift", s3)],
             start=mvgstart)

    ##################################################################
    # Quarter report

    days = 7
    ep = EMPlot(title="EM Kills (%i day moving average)" % days,
                xlabel="Time", ylabel="Kills",
                outfile="/home/forcer/public_html/em-kills-111Q4.png")

    ep.add_longwar("2009-10-27", "2009-11-04", "EXALT war")
    ep.add_longwar("2009-10-31", datetime.datetime.utcnow().strftime("%Y-%m-%d"),
                   "PRVTR war")
    ep.add_longwar("2009-11-11", "2009-11-18", "DEMON war")

    kpdra = getkills("2009-10-01", days, lambda ts, kpd, lpd: kpd.get(ts, 0))
    lpdra = getkills("2009-10-01", days, lambda ts, kpd, lpd: lpd.get(ts, 0))
    epdra = getkills("2009-10-01", days, lambda ts, kpd, lpd: (
            0
            if kpd.get(ts, 0) == 0
            else kpd[ts] / float(kpd[ts] + lpd.get(ts, 0))))

    ep.cmd('set arrow from "%s", 0.5 to "%s", 0.5 nohead linetype 1' %
           ("2009-10-01", kpdra[-1][0]))

    ep.mplot([("Losses", lpdra),
              ("Kills", kpdra),
              ("Efficiency", epdra)],
             start="2009-10-01")

def addemhistory(ep, start):
    ep.add_war("2008-02-08", "2008-02-22", "Misfits war")
    ep.add_war("2008-03-04", "2008-03-12", "PRVTR war")
    ep.add_war("2008-04-17", "2008-05-01", "LUPU war")
    ep.add_war("2008-05-10", "2008-05-12", "SANDS war")
    ep.add_war("2008-05-17", "2008-06-02", "ZER0 war")
    ep.add_war("2008-07-17", "2008-07-25", "HAND war")
    ep.warcount = 0
    ep.add_war("2008-07-19", "2008-07-26", "AFC war")
    ep.add_war("2008-01-03", "2008-01-04", "DRDSV war")
    ep.add_war("2008-08-05", "2008-08-21", "AFEW war")
    ep.add_war("2008-08-26", "2008-09-02", "PRVTR war")
    ep.add_war("2008-09-19", "2008-10-02", "Bosena campaign")
    ep.add_war("2008-09-24", "2008-10-01", "BYDI war")
    ep.add_war("2008-10-17", "2008-10-24", "TOMB war")
    ep.add_war("2008-10-31", "2008-11-13", "Evati campaign")
    ep.add_war("2008-11-20", "2008-11-23", "METH war")
    ep.add_war("2008-11-28", "2008-11-13", "MH campaign")
    ep.add_war("2008-12-08", "2008-12-13", "I.M.M war")
    ep.warcount = 0
    ep.add_war("2008-12-29", "2009-01-23", "MODE wars")
    ep.add_war("2009-01-16", "2009-01-22", "Amamake campaign")
    ep.add_war("2009-01-31", "2009-02-03", "FA!LD war")
    ep.add_war("2009-02-01", "2009-02-08", "MODE war")
    ep.add_war("2009-02-13", "2009-03-05", "MH campaign")
    ep.add_war("2009-02-19", "2009-02-20", "DEC-X war")
    ep.add_war("2009-03-20", "2009-04-03", "MEN. war")
    ep.add_war("2009-04-17", "2009-04-30", "GW campaign")
    ep.warcount = 0
    ep.add_war("2009-05-08", "2009-05-21", "Amamake campaign")
    ep.add_war("2009-07-06", "2009-07-20", "T7M war")
    ep.add_war("2009-08-01", "2009-08-24", "AGGR war")
    ep.add_war("2009-08-28", "2009-09-01", "Brin campaign")
    ep.add_war("2009-09-15", "2009-09-29", "SHDC war")
    ep.add_war("2009-10-27", "2009-11-04", "EXALT war")
    ep.add_war("2009-10-31", datetime.datetime.utcnow().strftime("%Y-%m-%d"),
               "PRVTR war")
    ep.add_war("2009-11-11", "2009-11-18", "DEMON war")

    ep.longwarcount = 0
    ep.add_longwar("2007-02-16", "2008-06-10", "PIE war")
    ep.add_longwar("2007-07-07", "2008-11-24", "VV war")
    ep.add_longwar("2007-08-19", "2008-11-24", "BOBBY war")
    ep.add_longwar("2008-06-17", "2009-02-17", "VFOR war")
    ep.longwarcount = 0
    ep.add_longwar("2009-01-08",
                   datetime.datetime.utcnow().strftime("%Y-%m-%d"),
                   "PIE war")
    ep.add_longwar("2009-02-17", "2009-03-31", "AFC war")
    ep.longwarcount = 1
    ep.add_longwar("2009-07-02", "2009-08-14", "EA1 war")

    ep.add_corp(start, None, "RE-AW") # see below
    ep.add_corp("2007-04-09", None, "GRD")
    ep.add_corp("2008-11-07", None, "SOERR")
    ep.add_corp("2009-06-02", None, "CAFCO")
    ep.add_corp("2009-08-09", None, "TWB")
    ep.add_corp("2009-09-03", None, "TCMS")

    ep.add_corp("2007-01-16", "2009-01-16", "CLTY")
    ep.add_corp("2007-12-31", "2009-05-26", "LIBER")
    ep.add_corp("2008-05-05", "2008-06-09", "IXDS")
    ep.ocorpcount = 2
    ep.add_corp("2008-08-02", "2008-08-24", "VOR.")
    ep.ocorpcount = 2
    ep.add_corp("2008-12-31", "2009-02-22", "SERAB")

    ep.add_battle("2007-08-05", "Battle of Jark")
    ep.battlecount = 0
    ep.add_battle("2008-03-09", "Battle of Brin")
    ep.add_battle("2008-06-08", "Battle of Gyng")
    ep.battlecount = 0
    ep.add_battle("2008-09-27", "Battle of M-M")
    ep.battlecount = 0
    ep.add_battle("2009-03-21", "Battle of Oddelulf")



class EMPlot(gnuplot.Gnuplot):
    def __init__(self, corpstart=0.4, ocorpstart=0.2, warstart=0.80, 
                 battlestart=0.9, longwarstart=0.6, *args, **kwargs):
        super(EMPlot, self).__init__(*args, **kwargs)
        self.corpstart = corpstart
        self.ocorpstart = ocorpstart
        self.warstart = warstart
        self.longwarstart = longwarstart
        self.battlestart = battlestart
        self.corpcount = 0
        self.ocorpcount = 0
        self.warcount = 0
        self.longwarcount = 0
        self.battlecount = 0
        self.corplt = 2
        self.ocorplt = 4
        self.warlt = 3
        self.longwarlt = 3
        self.battlelt = 1

    def corp_pos(self):
        self.corpcount += 1
        return self.corpstart - 0.03 * (self.corpcount - 1)

    def ocorp_pos(self):
        self.ocorpcount += 1
        return self.ocorpstart - 0.03 * (self.ocorpcount - 1)

    def war_pos(self):
        self.warcount += 1
        return self.warstart - 0.03 * (self.warcount - 1)

    def longwar_pos(self):
        self.longwarcount += 1
        return self.longwarstart - 0.03 * (self.longwarcount - 1)

    def battle_pos(self):
        self.battlecount += 1
        return self.battlestart - 0.03 * (self.battlecount - 1)

    def add_corp(self, start, end, name):
        if end is None:
            pos = self.corp_pos()
            linetype = self.corplt
        else:
            pos = self.ocorp_pos()
            linetype = self.ocorplt
        self.add_bar(start, end, name, pos=pos, linetype=linetype)

    def add_war(self, start, end, name):
        self.add_arrow(start, "", pos=self.war_pos(), linetype=9)

    def add_longwar(self, start, end, name):
        self.add_bar(start, end, name, pos=self.longwar_pos(), linetype=self.warlt)

    def add_battle(self, date, name):
        self.add_arrow(date, name, pos=self.battle_pos(),
                       linetype=self.battlelt)

def getkills(start, days, f,
             getvalue=lambda shiptype, value: 1,
             select=lambda x: True):
    killlist = list(csv.reader(file("em-kills.txt")))
    kpd = defaultdict(lambda: 0)
    lpd = defaultdict(lambda: 0)
    for (day, time, region, killorloss, ship, value, republic) in killlist:
        if select(time):
            if killorloss == 'kill':
                kpd[day] += getvalue(ship, float(value))
            else:
                lpd[day] += getvalue(ship, float(value))
    killdata = {}
    start = datetime.datetime.strptime(killlist[0][0], "%Y-%m-%d")
    end = datetime.datetime.strptime(killlist[-1][0], "%Y-%m-%d")
    inc = datetime.timedelta(days=1)
    now = start
    while now <= end:
        nowiso = now.strftime("%Y-%m-%d")
        killdata[nowiso] = f(nowiso, kpd, lpd)
        now += inc
    kpd = killdata.items()
    kpd.sort()
    kpdra = zip([x[0] for x in kpd], raverage([x[1] for x in kpd], days))
    return kpdra

def raverage(seq, n):
    result = []
    for i in range(0, len(seq)):
        subseq = [x for x in seq[max(0, (i-n)):i]
                  if x is not None]
        if len(subseq) == 0:
            result.append("NaN")
        else:
            result.append(sum(subseq) / float(len(subseq)))
    return result

def rmedian(seq, n):
    def median(seq):
        seq = list(seq)
        seq.sort()
        if len(seq) == 0:
            return 0
        elif len(seq) == 1:
            return seq[0]
        elif (len(seq) % 2) == 1:
            i = int(len(seq)/2.0)
            return (seq[i] + seq[i+1]) / 2.0
        else:
            return seq[len(seq)/2]
    return [median(seq[max(0, (i-n)):i])
            for i in range(0, len(seq))]

db = evedb.connect()

fwlp_d = None
def fwlp(typename, value):
    global fwlp_d
    if fwlp_d is None:
        c = db.cursor()
        c.execute("SELECT t.typename, dta.valuefloat "
                  "FROM invtypes t "
                  "     INNER JOIN dgmtypeattributes dta "
                  "       ON t.typeid = dta.typeid "
                  "     INNER JOIN dgmattributetypes dat "
                  "       ON dta.attributeid = dat.attributeid "
                  "WHERE dat.attributeName = 'fwLpKill'")
        fwlp_d = dict(c.fetchall())
    return fwlp_d.get(typename, 1)

if __name__ == '__main__':
    main()
