#!/usr/bin/env python

import sys

from lib import characters, cache
from lib import evedb

db = evedb.connect()

def main():
    api = characters.api()
    corp = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    (jumps, region) = get_sysinfo()
    systems = {}
    for order in corp.MarketOrders().orders:
        if order.bid != 1 or order.orderState != 0:
            continue
        order_system = stationid2system(order.stationID)
        for system in systemrange(order_system, order.range):
            if system not in systems:
                systems[system] = {}
            if order.charID not in systems[system]:
                systems[system][order.charID] = {}
            systems[system][order.charID][get_typename(order.typeID)] = True
    charids = {}
    for system in systems:
        for charid in systems[system]:
            charids[charid] = True
    for char in api.eve.CharacterName(ids=",".join([str(x) for x in 
                                                    charids.keys()])).characters:
        charids[char.characterID] = char.name
    system_names = systems.keys()
    system_names.sort(lambda a, b: cmp(a.lower(), b.lower()))
    for system in system_names:
        print "%s" % system
        for (charid, types) in systems[system].items():
            typelist = types.keys()
            typelist.sort()
            print "- %s (%s)" % (charids[charid],
                                 ", ".join(typelist))
        print

def stationid2system(stationid):
    c = db.cursor()
    c.execute("SELECT n.itemname FROM stastations AS st INNER JOIN evenames AS n ON st.solarsystemid = n.itemid WHERE stationid = %s",
              (stationid,))
    return c.fetchone()[0]

def systemrange(startsystem, maxrange):
    (jumps, region) = get_sysinfo()
    if maxrange <= 0:
        return [startsystem]
    if maxrange >= 32000:
        return []
    systems = {}
    agenda = [(startsystem, 0)]
    while len(agenda) > 0:
        (system, distance) = agenda[0]
        agenda = agenda[1:]
        if distance <= maxrange:
            systems[system] = True
            for neighbor in jumps[system]:
                if neighbor not in systems:
                    agenda.append((neighbor, distance+1))
    for name in systems.keys():
        if region[name] != region[startsystem]:
            del systems[name]
    return systems.keys()

typenames = {}

def get_typename(typeid):
    if typeid not in typenames:
        c = db.cursor()
        c.execute("SELECT typename FROM invtypes WHERE typeid = %s",
                  (typeid,))
        typenames[typeid] = c.fetchone()[0]
    return typenames[typeid]

sysinfo = None

def get_sysinfo():
    global sysinfo
    if sysinfo is not None:
        return sysinfo
    jumps = {}
    region = {}
    c = db.cursor()
    c.execute(alljumps)
    for (f, r, t) in c.fetchall():
        region[f] = r
        if f not in jumps:
            jumps[f] = []
        jumps[f].append(t)
    sysinfo = (jumps, region)
    return sysinfo

alljumps = """
SELECT f.itemname, fr.itemname, t.itemname
FROM mapsolarsystemjumps AS j
     INNER JOIN evenames AS f
       ON j.fromsolarsystemid = f.itemid
     INNER JOIN evenames AS fr
       ON j.fromregionid = fr.itemid
     INNER JOIN evenames AS t
       ON j.tosolarsystemid = t.itemid
"""

main()
