#!/usr/bin/env python

# TODO:
# - Rewrite. Read cache files "by hand"
# - Diff between dgmattribs (in particular, names)
# - categories, groups, metagroups
# - invtypereactions

IGNORED_ATTRIBS = ['categoryID', 'soundID', 'dataID', 'armorUniformity',
                   'graphicID']

import sys
sys.path.append("/home/forcer/Programs/Reverence/active/lib64/python2.6/site-packages/")

import difflib
import pickle

from reverence import blue

def main():
    s1 = blue.EVE(sys.argv[1], server="Singularity")
    cfg1 = s1.getconfigmgr()
    s2 = blue.EVE(sys.argv[2], server="Singularity")
    cfg2 = s2.getconfigmgr()

    do_diffmessages(s1, s2)
    do_difftypes(cfg1, cfg2)

def do_diffmessages(cfg1, cfg2):
    mp1 = pickle.load(cfg1.rot.efs.open('res/messagepackage.pickle'))
    mp2 = pickle.load(cfg2.rot.efs.open('res/messagepackage.pickle'))

    d1 = mp1["messages"][1]
    d2 = mp2["messages"][1]
    print "Messages"
    print "========"
    diffdict(dict((key, val[2]) for (key, val) in d1.items()),
             dict((key, val[2]) for (key, val) in d2.items()))
    print

    tl1 = mp1["textLabels"]
    tl2 = mp2["textLabels"]
    print "Labels"
    print "======"
    diffdict(dict((key, val[1]) for (key, val) in tl1.items()),
             dict((key, val[1]) for (key, val) in tl2.items()))
    print

def do_difftypes(cfg1, cfg2):
    print "Types"
    print "====="
    typeids = uniq([t.typeID for t in cfg1.invtypes] +
                   [t.typeID for t in cfg2.invtypes])
    typeids.sort()
    for tid in typeids:
        difftype(gettype(cfg1, tid),
                 gettype(cfg2, tid))
    print "Blueprints"
    print "=========="
    bptypeids = uniq([t.blueprintTypeID for t in cfg1.invbptypes] +
                     [t.blueprintTypeID for t in cfg2.invbptypes])
    bptypeids.sort()
    for tid in bptypeids:
        difftype(getbptype(cfg1, tid),
                 getbptype(cfg2, tid),
                 typeID='blueprintTypeID')
    
def gettype(cfg, tid):
    invtype = cfg.invtypes.get(tid)
    if invtype is None:
        return {}
    attribs = dict((cfg.dgmattribs.Get(row.attributeID).attributeName,
                    row.value)
                   for row in cfg.dgmtypeattribs[tid])
    for tn in invtype.header:
        attribs[tn] = getattr(invtype, tn)
    return attribs

def getbptype(cfg, tid):
    invtype = cfg.invbptypes.get(tid)
    if invtype is None:
        return {}
    attribs = {}
    for (_, reqtid, reqqty) in cfg.ramtypematerials.get(invtype.productTypeID,
                                                        []):
        attribs[cfg.invtypes.get(reqtid).typeName] = reqqty
    for act in cfg.ramactivities:
        rtr = cfg.ramtyperequirements.get((tid, act.activityID), None)
        if rtr is None:
            continue
        for (_, _, reqtid, reqqty, dpj, recyle) in rtr:
            attribs["%s (%s)" % (cfg.invtypes.get(reqtid).typeName,
                                 act.activityName)] = reqqty
    for tn in invtype.header:
        attribs[tn] = getattr(invtype, tn)
    attribs['typeName'] = cfg.invtypes.get(tid).typeName
    return attribs

def difftype(old, new, typeName='typeName', typeID='typeID'):
    if len(old) == 0:
        print "* ADD: %s (typeID %s)" % (new.get(typeName).encode('utf-8'),
                                         new.get(typeID))
        attribnames = new.keys()
        attribnames.sort(lambda a, b: cmp(a.lower(), b.lower()))
        for an in attribnames:
            print "- %s: %r" % (an, new[an])
        print
    elif len(new) == 0:
        print "* DEL: %s (typeID %s)" % (old.get(typeName).encode('utf-8'),
                                         old.get(typeID))
        attribnames = old.keys()
        attribnames.sort(lambda a, b: cmp(a.lower(), b.lower()))
        for an in attribnames:
            print "- %s: %r" % (an, old[an])
        print
    else:
        attribnames = uniq(old.keys() + new.keys())
        attribnames.sort(lambda a, b: cmp(a.lower(), b.lower()))
        changes = []
        for name in attribnames:
            if name in IGNORED_ATTRIBS:
                continue
            if old.get(name, None) != new.get(name, None):
                changes.append((name,
                                old.get(name, None),
                                new.get(name, None)))
        if len(changes) > 0:
            print ("* CHG: %s (typeID %s)" %
                   (new.get(typeName).encode("utf-8"),
                    new.get(typeID)))
            for (name, oldv, newv) in changes:
                printchange(name, oldv, newv)
            print

def printchange(name, oldv, newv):
    if (type(oldv) == unicode and 
        type(newv) == unicode and
        max(len(oldv), len(newv)) > 32):

        print "- %s: (diff)" % name
        diffstring(oldv, newv)
    else:
        print "- %s: %r -> %r" % (name, 
                                  oldv,
                                  newv)

def diffdict(d1, d2):
    keys = uniq(d1.keys() + d2.keys())
    keys.sort(lambda a, b: cmp(a.lower(), b.lower()))
    for k in keys:
        if k in d1 and k not in d2:
            print "* DEL: %s\n  %r" % (k, d1[k])
            print
        elif k not in d1 and k in d2:
            print "* ADD: %s\n  %r" % (k, d2[k])
            print
        elif d1[k] != d2[k]:
            printchange(k, d1[k], d2[k])
            print

def diffstring(old, new):
    a = old.split()
    b = new.split()
    sm = difflib.SequenceMatcher(None, a, b)
    for (op, i1, i2, j1, j2) in sm.get_opcodes():
        if op == 'replace':
            print "  ~ %r -> %r" % (" ".join(a[i1:i2]),
                                    " ".join(b[j1:j2]))
        elif op == 'delete':
            print "  - %r" % (" ".join(a[i1:i2]),)
        elif op == 'insert':
            print "  + %r" % (" ".join(b[j1:j2]),)
        elif op == 'equal':
            print "  = %r" % (" ".join(b[j1:j2]),)
        else:
            print "  ? %r" % (op,)

def uniq(l):
    return dict((e, True) for e in l).keys()

if __name__ == '__main__':
    main()
