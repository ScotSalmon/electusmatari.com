#!/usr/bin/env python

from PIL import Image, ImageDraw

from lib import evedb, characters, cache

image_width = 640
image_height = 480

imgdir = "/home/forcer/public_html/eve/"

db = evedb.connect()

class System(object):
    def __init__(self, name, color, coords):
        self.name = name
        self.color = color
        self.coords = coords

def main():
    offices = {'Arlulf': (0, 0, 255),
               'Dal': (0, 255, 0),
               'Egbinger': (0, 255, 0),
               'Evati': (0, 255, 0),
               'Eystur': (0, 0, 255),
               'Gultratren': (0, 0, 255),
               'Hedaleolfarber': (0, 0, 255),
               'Heild': (0, 0, 255),
               'Isendeldik': (0, 0, 255),
               'Istodard': (0, 255, 0),
               'Klogori': (0, 0, 255),
               'Konora': (0, 255, 0),
               'N-DQ0D': (0, 0, 255),
               'Offugen': (0, 0, 255),
               'Pator': (255, 0, 0),
               'Rokofur': (0, 0, 255),
               'Teonusude': (0, 0, 255),
               'Trytedald': (0, 0, 255),
               }
    #add_market_orders(systems)
    for region in ["Heimatar", "Metropolis", "Molden Heath"]:
        im = Image.new("RGB", (image_width, image_height))
        systems = [System(name, (255, 255, 255), (x, y, z))
                   for (name, x, y, z) in get_region_systems(region)]
        for system in systems:
            if system.name in offices:
                system.color = offices[system.name]
        draw_systems(im, systems, offices, (100, 100, 100))
        im.save(imgdir + region + ".png")
    im = Image.new("RGB", (image_width, image_height))
    systems = []
    rcolor = {"Heimatar": (255, 150, 150),
              "Metropolis": (150, 255, 150),
              "Molden Heath": (150, 150, 255)}
    draw = ImageDraw.Draw(im)
    legend_y = 2
    for region in ["Heimatar", "Metropolis", "Molden Heath"]:
        systems.extend([System(name, rcolor[region], (x, y, z))
                        for (name, x, y, z) in get_region_systems(region)])
        draw.text((image_width-80, legend_y), region,
                  fill=rcolor[region])
        legend_y += 12
    for system in systems:
        if system.name in offices:
            system.color = offices[system.name]
    draw_systems(im, systems, offices, (100, 100, 100))
    im.save(imgdir + "Republic.png")

stuff = [(60005059, -1), (60005059, -1), (60005059, -1), (60004495, 1), (60005059, -1), (60004870, -1), (60007681, 1), (60007681, 1), (60005758, 0), (60015096, 1), (60015096, 1), (60015096, 1), (60004828, -1), (60002548, 0), (60005005, -1), (60015102, 3), (60005311, 3), (60005059, -1), (60012637, 1), (60002605, 1), (60004537, 1), (60004537, 1), (60002125, -1), (60004843, 2), (60001039, -1), (60005311, 3), (60001039, -1), (60005311, 3), (60004792, 1), (60004792, 1), (60001039, -1), (60001039, -1), (60004870, 32767), (60004870, 32767), (60005002, 4), (60005002, 4), (60014440, 3), (60004843, 3), (60005311, 3), (60004870, 0), (60004870, 3), (60004870, 3), (60004870, 3), (60004870, 0), (60004870, 4), (60004870, 0), (60004870, 4), (60004870, 0), (60004870, 4), (60004870, 32767), (60004780, -1), (60004780, -1), (60004780, -1), (60004780, -1), (60004780, -1), (60004792, 1), (60004792, 1), (60004792, 1), (60005311, 3), (60005311, 3), (60005311, 3), (60005311, 3), (60005002, 0), (60005311, 3)]

def add_market_orders(systems):
    corp = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    for order in corp.MarketOrders().orders:
        if order.bid == 1:
            order_system = stationid2system(order.stationID)
            for system in systemrange(order_system, order.range):
                systems[system] = (100, 100, 0)
            systems[order_system] = (255, 255, 0)

def stationid2system(stationid):
    c = db.cursor()
    c.execute("SELECT n.itemname FROM stastations AS st INNER JOIN evenames AS n ON st.solarsystemid = n.itemid WHERE stationid = %s",
              (stationid,))
    return c.fetchone()[0]

def systemrange(startsystem, maxrange):
    (jumps, region) = get_sysinfo()
    if maxrange <= 0:
        return [startsystem]
    if maxrange >= 32000:
        return []
    systems = {}
    agenda = [(startsystem, 0)]
    while len(agenda) > 0:
        (system, distance) = agenda[0]
        agenda = agenda[1:]
        if distance <= maxrange:
            systems[system] = True
            for neighbor in jumps[system]:
                if neighbor not in systems:
                    agenda.append((neighbor, distance+1))
    for name in systems:
        if region[name] != region[startsystem]:
            del systems[name]
    return systems.keys()

jumps = None
region = {}
def get_sysinfo():
    global jumps
    if jumps is not None:
        return (jumps, region)
    jumps = {}
    c = db.cursor()
    c.execute(alljumps)
    for (f, r, t) in c.fetchall():
        region[f] = region
        if f not in jumps:
            jumps[f] = []
        jumps[f].append(t)
    return (jumps, region)

alljumps = """
SELECT f.itemname, fr.itemname, t.itemname
FROM mapsolarsystemjumps AS j
     INNER JOIN evenames AS f
       ON j.fromsolarsystemid = f.itemid
     INNER JOIN evenames AS fr
       ON j.fromregionid = fr.itemid
     INNER JOIN evenames AS t
       ON j.tosolarsystemid = t.itemid
"""


##################################################################

system_coords = """
SELECT sys.solarsystemname,
       sys.x/1000000000000, sys.z/1000000000000, sys.y/1000000000000
FROM mapsolarsystems AS sys
     INNER JOIN evenames AS n
       ON sys.regionid = n.itemid
WHERE n.itemname = %s
"""

system_jumps = """
SELECT f.itemname, t.itemname
FROM mapsolarsystemjumps AS j
     INNER JOIN evenames AS f
       ON j.fromsolarsystemid = f.itemid
     INNER JOIN evenames AS t
       ON j.tosolarsystemid = t.itemid
WHERE f.itemname < t.itemname
"""

def draw_systems(im, systems, labels, connection_color):
    draw = ImageDraw.Draw(im)
    jumps = get_jumps()
    (image_width, image_height) = im.size
    (xmin, xmax, ymin, ymax) = get_bounding_box(x.coords for x in systems)
    xoffset = int(image_width * 0.05)
    yoffset = int(image_height * 0.05)
    xscale = float(image_width-1-2*xoffset) / abs(xmax - xmin)
    yscale = float(image_height-1-2*yoffset) / abs(ymax - ymin)
    imsystems = {}
    for system in systems:
        (x, y, z) = system.coords
        new_x = int((x - xmin) * xscale)
        new_y = int(((y - ymin) * yscale))
        imsystems[system.name] = System(system.name, system.color,
                                        (new_x+xoffset, new_y+yoffset))
    for (f, t) in jumps:
        if f in imsystems and t in imsystems:
            draw.line(imsystems[f].coords + imsystems[t].coords,
                      connection_color)
    for system in imsystems.values():
        (x, y) = system.coords
        draw.ellipse((x-3, y-3, x+3, y+3), fill=system.color)
    for (name, color) in labels.items():
        if name not in imsystems:
            continue
        (x, y) = imsystems[name].coords
        x += 5
        y += 3
        draw.text((x, y), name, fill=color)

def get_region_systems(name):
    c = db.cursor()
    c.execute(system_coords, (name,))
    return c.fetchall()

jumps = None

def get_jumps():
    global jumps
    if jumps is not None:
        return jumps
    c = db.cursor()
    c.execute(system_jumps)
    jumps = c.fetchall()
    return jumps

def get_bounding_box(systems):
    (xmin, xmax) = (None, None)
    (ymin, ymax) = (None, None)
    for (x, y, z) in systems:
        if xmin is None or x < xmin:
            xmin = x
        if xmax is None or x > xmax:
            xmax = x
        if ymin is None or y < ymin:
            ymin = y
        if ymax is None or y > ymax:
            ymax = y
    return (xmin, xmax, ymin, ymax)

main()
