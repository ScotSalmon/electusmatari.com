#!/usr/bin/env python

from lib import characters, cache
from lib import eveapi, evedb, evec

db = evedb.connect()

def main():
    grd = characters.corp(configfile="/home/forcer/.grdkey",
                          cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    data = grd.AssetList()
    agenda = [(data.assets, None)]
    items = []
    while len(agenda) > 0:
        ((rows, locid), agenda) = (agenda[0], agenda[1:])
        for row in rows:
            items.append((location(locid or row.locationID)[0],
                          row.quantity,
                          typename(row.typeID)))
            if hasattr(row, 'contents'):
                agenda.append((row.contents, locid or row.locationID))
    # import csv
    # w = csv.writer(file("/home/forcer/foo.csv", "w"))
    # for i in items:
    #     w.writerow(i)
    typelist = dict((tname, True)
                    for (_, _, tname)
                    in items
                    if is_published(tname)).keys()
    prices = evec.marketstat(typelist,
                             regions=["Heimatar", "Metropolis", "Molden Heath"],
                             hours=7*24)
    index = dict((x.typename, x.all['median']) for x in prices)
    worth = 0L
    for (system, amount, tname) in items:
        if "Blueprint" not in tname:
            worth += index.get(tname, 0) * amount
    print worth

locationmap = {}
def location(locationID):
    """
    Return a tuple of (system, systemid, stationname, stationid).
    stationname can be None if this is in space.
    """
    if locationID not in locationmap:
        if locationID >= 66000000 and locationID < 67000000:
            locationmap[locationID] = location_station(locationID - 6000001)
        elif locationID >= 67000000 and locationID < 68000000:
            locationmap[locationID] = location_outpost(locationID - 6000000)
        else:
            locationmap[locationID] = (location_station(locationID) or
                                       (location_system(locationID),
                                        locationID, None, None, None))
    return locationmap[locationID]

def location_station(stationid):
    """
    Return a tuple of (system, stationname) representing this stationid.
    """
    c = db.cursor()
    c.execute("SELECT stationname, stationtypeid, solarsystemid FROM stastations WHERE stationid = %s",
              (stationid,))
    result = c.fetchone()
    if result is None:
        return None
    else:
        (staname, statypeid, sysid) = result
        return (location_system(sysid), sysid, staname, stationid, statypeid)

def location_system(systemid):
    """
    Return the system name of this system.
    """
    c = db.cursor()
    c.execute("SELECT solarsystemname FROM mapsolarsystems WHERE solarsystemid = %s",
              (systemid,))
    result = c.fetchone()
    if result is None:
        return None
    else:
        return result[0]

def location_outpost(stationid):
    """
    Return a tuple of (system, stationname) representing this stationid.
    """
    raise RuntimeException, "Outposts not supported yet."

type_d = {}
def typename(typeid):
    if typeid not in type_d:
        c = db.cursor()
        c.execute("select typename from invtypes where typeid = %s",
                  (typeid,))
        type_d[typeid] = c.fetchone()[0]
    return type_d[typeid]

pub_d = {}
def is_published(tname):
    if tname not in pub_d:
        c = db.cursor()
        c.execute("select published from invtypes where typename = %s",
                  (tname,))
        pub_d[tname] = c.fetchone()[0]
    return pub_d[tname]

if __name__ == '__main__':
    main()
