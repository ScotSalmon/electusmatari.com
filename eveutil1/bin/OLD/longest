#!/usr/bin/env python

import sys

from lib import evedb

import psyco
psyco.full()

def main():
    db = evedb.connect()
    c = db.cursor()
    c.execute("SELECT fromsolarsystemid, tosolarsystemid FROM mapsolarsystemjumps")
    jumps = {}
    for (f, t) in c.fetchall():
        if f not in jumps:
            jumps[f] = []
        jumps[f].append(t)
    #c.execute("SELECT solarsystemid FROM mapsolarsystems WHERE regionid = 10000030")
    #galaxy = [x for (x,) in c.fetchall()]
    #c.execute("SELECT solarsystemid FROM mapsolarsystems WHERE regionid = 10000042")
    #galaxy = [x for (x,) in c.fetchall()]
    c.execute("""
SELECT solarsystemid
FROM mapsolarsystems
WHERE regionid NOT IN
  (
    10000004, 10000017, 10000019,
    10000002, 10000016, 10000020, 10000028, 10000030,
    10000032, 10000033, 10000036, 10000037, 10000038,
    10000042, 10000043, 10000044, 10000048, 10000052,
    10000054, 10000064, 10000065, 10000068, 10000069
  )
""")
    galaxy = [x for (x,) in c.fetchall()]
    (d, fts) = longest(jumps, galaxy)
    print
    print "Galaxy %d:" % d
    for (f, t) in fts:
        print "%s to %s" % (f, t)
    #(f, t, d) = longest(jumps, metropolis)
    #print "Metropolis %d: %s to %s" % (d, f, t)
    
    
def longest(jumps, systems):
    max_d = 0
    max_ft = []
    count = len(systems)
    c = 0
    sys.stderr.write("To %i\n" % (((count+1)*count)/2))
    for i in range(0, len(systems)):
        f = systems[i]
        for t in systems[i+1:]:
            c += 1
            if (c % 100) == 0:
                sys.stderr.write("%i / %i                  \r" % (i, c))
                sys.stderr.flush()
            d = distance(f, t, jumps)
            if d is None:
                continue
            elif d > max_d:
                max_d = d
                max_ft = [(f, t)]
            elif d == max_d:
                max_ft.append((f, t))
    return (max_d, max_ft)

cache = {}

def distance(f, t, jumps):
    if f in cache:
        if t in cache[f]:
            return cache[f][t]
    if t in cache:
        if f in cache[t]:
            return cache[t][f]
    visited = []
    agenda = [(f, 0)]
    while len(agenda) > 0:
        (here, d) = agenda[0]
        agenda = agenda[1:]
        if f not in cache:
            cache[f] = {}
        cache[f][here] = d
        if here == t:
            return d
        if here not in visited:
            visited.append(here)
            agenda.extend([(next, d+1) for next in jumps[here]])
    return None

main()
