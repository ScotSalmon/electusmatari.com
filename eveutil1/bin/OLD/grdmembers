#!/usr/bin/env python

import datetime

from lib import characters
from lib.util import showinfo

def main():
    characterID = {}
    title = {}
    logoff = {}
    joined = {}
    length = {}
    roles = {}
    onleave = {}

    grd = characters.corp(configfile="/home/forcer/.grdkey")

    gmt = grd.MemberTracking()
    cur = datetime.datetime.utcfromtimestamp(gmt._meta.currentTime)
    cached = datetime.datetime.utcfromtimestamp(gmt._meta.cachedUntil)

    for member in gmt.members:
        characterID[member.name] = member.characterID
        title[member.name] = member.title
        roles[member.name] = member.roles
        logoff[member.name] = (datetime.datetime.utcnow() -
                               datetime.datetime.utcfromtimestamp(member.logoffDateTime)).days
        joined[member.name] = (datetime.datetime.utcnow() -
                               datetime.datetime.utcfromtimestamp(member.startDateTime)).days
        length[member.name] = (datetime.datetime.utcfromtimestamp(member.logoffDateTime) -
                               datetime.datetime.utcfromtimestamp(member.logonDateTime))
        if 'on leave' in member.title.lower():
            onleave[member.name] = True

    print "<html><head><title>GRD Personnel Page</title></head><body>"
    print "<h1>Gradient Personnel Overview</h1>"
    print ("<p>Data from %s, cached until %s.</p>" %
           (cur.strftime("%Y-%m-%d %H:%M"),
            cached.strftime("%Y-%m-%d %H:%M")))

    # Inactives
    print "<h2>Inactive Members</h2>"
    print "<ul>"
    inactives = []
    for name, charid in characterID.items():
        if name not in onleave and logoff[name] > 30:
            inactives.append((logoff[name], name))
    inactives.sort()
    inactives.reverse()
    for age, name in inactives:
        if roles[name] == 0:
            note = " (prospect)"
        else:
            note = ""
        print ('<li>%s: %s%s</li>' %
               (days(age), showinfo(1379, characterID[name], name), note))
    print "</ul>"

    # Prospects
    print "<h2>Prospects in need of promotion</h2>"
    print "<ul>"
    prospects = []
    for name, charid in characterID.items():
        if name not in onleave and roles[name] == 0 and joined[name] > 30 and logoff[name] <= 30:
            prospects.append((joined[name], name))
    prospects.sort()
    prospects.reverse()
    for age, name in prospects:
        print ('<li>%s: %s%s</li>' %
               (days(age), showinfo(1379, characterID[name], name), note))
    print "</ul>"

    print "<h2>All Members</h2>"
    print '<table border="1">'
    print "<tr><th>Member</th><th>Title</th><th>Joined</th><th>Inactive</th><th>Last Activity</th></tr>"
    names = characterID.keys()
    names.sort(lambda a, b: cmp(a.lower(), b.lower()))
    for name in names:
        print '<tr>'
        print '<td>%s</td>' % (showinfo(1379, characterID[name], name),)
        print '<td>%s</td>' % title[name]
        print '<td>%s</td>' % days(joined[name])
        print '<td>%s</td>' % days(logoff[name])
        print '<td>%s</td>' % minutes(length[name])
        print '</tr>'
    print "</body></html>"

def days(n):
    result = []
    if n > 365:
        result.append("%iy" % (n / 365))
        n = n % 365
    if n > 30:
        result.append("%im" % (n / 30))
        n = n % 30
    if len(result) == 0 or n > 0:
        result.append("%id" % n)
    return " ".join(result)

def minutes(d):
    s = d.seconds 
    result = []
    if s >= 60*60:
        result.append("%ih" % (s/(60*60)))
        s = s % 60
    if s >= 60:
        result.append("%im" % (s/60))
        s = s % 60
    if len(result) == 0 or s > 0:
        result.append("%is" % s)
    return " ".join(result)

if __name__ == '__main__':
    main()
