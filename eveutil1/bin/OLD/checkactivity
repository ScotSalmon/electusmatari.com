#!/usr/bin/env python

import datetime
import hashlib
import os
import re
import sys
import urllib

from xml.etree import ElementTree

from lib import characters
from lib import evedb

db = evedb.connect()

def main():
    old = datetime.datetime.now() - datetime.timedelta(92)
    if len(sys.argv) > 1:
        st = [(name, entitytype(name)) for name in sys.argv[1:]]
    else:
        st = standings()
    for (name, type) in st:
        republic = False
        total = 0
        kills = iterator_append(#bc_activity(type, name),
                                edk_activity("http://www.eve-kill.net/",
                                             type, name))
#                                 edk_activity("http://www.minmatar-militia.org/kb/",
#                                               type, name),
#                                 edk_activity("http://www.amarr-empire.net/killboard/",
#                                               type, name))
        for (timestamp, system) in kills:
            total += 1
            sys.stderr.write("Checking %s, kill %s\r" % (name, total))
            if timestamp < old:
                break
            if system == 'Classified':
                continue
            if system2region(system) in ('Heimatar', 'Metropolis',
                                         'Molden Heath',
                                         'Great Wildlands'):
                print("%s was last active in the Republic on %s in %s." %
                      (name, str(timestamp), system))
                republic = True
                break
        if total == 0:
            sys.stderr.write("\n")
            print "%s was not active at all." % name
        elif not republic:
            print "%s was not active in the Republic in the last three months." % name

alliances = None

def entitytype(name):
    global alliances
    if alliances is None:
        api = characters.api()
        alliances = api.eve.AllianceList()
    for a in alliances.alliances:
        if name.lower() == a.name.lower():
            return "alliance"
    return "corp"

def iterator_append(*iterators):
    for i in iterators:
        try:
            while True:
                v = i.next()
                yield v
        except StopIteration:
            pass

def standings():
    f = urllib.urlopen("http://www.electusmatari.com/standings.cgi?format=xml")
    xml = ElementTree.fromstring(f.read())
    result = []
    for standing in xml.findall("standing"):
        name = standing.find("entity").text
        if name[-1] == ']':
            t = "corp"
            name = name[:name.rindex(" [")]
        else:
            t = "alliance"
            name = name[:name.rindex(" <")]
        result.append((name, t))
    return result

edk_kill = re.compile("""<b>(.*?)</b><br/>\\([0-9.]+\\)</td>(?:.|\n)*?<b>([0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9])<br>([0-9][0-9]:[0-9][0-9])</b></td>""")

def edk_activity(base_url, type, name):
    if type == 'corp':
        typedetail = "corp_detail"
        typeid = "crp_id"
    else:
        typedetail = "alliance_detail"
        typeid = "all_id"
    query = urllib.urlencode({"a": "search",
                              "searchtype": type,
                              "searchphrase": name})
    url = base_url + "?" + query
    u = urllib.urlopen(url)
    if typedetail not in u.url:
        return
    entityid = u.url[u.url.rindex("=")+1:]
    page = 1
    while True:
        for view in ["kills", "losses"]:
            query = urllib.urlencode({"a": typedetail,
                                      typeid: entityid,
                                      "view": view,
                                      "page": str(page)})
            url = base_url + "?" + query
            data = get_url(url)
            kills = edk_kill.findall(data)
            if len(kills) == 0:
                return
            for (system, date, time) in kills:
                ts = datetime.datetime.strptime(date + " " + time,
                                                "%Y-%m-%d %H:%M")
                yield (ts, system)
        page += 1

bc_system_rx = re.compile(r'win_map.php\?system=([^"]*)"')
bc_time_rx = re.compile(r'<td>([0-9][0-9]/[0-9][0-9]/[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9])</td>')

def bc_activity(type, name):
    base_url = "http://www.battleclinic.com/eve_online/pk/view.php"
    page = 1
    while True:
        query = urllib.urlencode([("type", type),
                                  ("name", name),
                                  ("filter", "kills"),
                                  ("page", str(page))])
        url = base_url + "?" + query
        data = get_url(url)
        kills = zip(bc_time_rx.findall(data),
                    bc_system_rx.findall(data))
        if len(kills) == 0:
            return
        for (timestamp, system) in kills:
            ts = datetime.datetime.strptime(timestamp, "%m/%d/%y %H:%M:%S")
            yield (ts, system)
        page += 1

def get_url(url):
    cachedir = "/tmp/forcer/httpcache"
    fname = os.path.join(cachedir, hashlib.md5(url).hexdigest())
    if os.access(fname, os.R_OK):
        data = file(fname).read()
    else:
        data = urllib.urlopen(url).read()
        f = file(fname, "w")
        f.write(data)
        f.close()
    return data

system2region_mapping = {}
def system2region(system):
    if system not in system2region_mapping:
        c = db.cursor()
        c.execute("""
SELECT r.regionname
FROM mapSolarSystems s
     INNER JOIN mapRegions r
       ON s.regionID = r.regionID
WHERE s.solarSystemName = %s
""", (system,))
        if c.rowcount == 0:
            # eve-kill does stupid things like "Lisbaet..."
            system = system.rstrip(".")
            c.execute("""
SELECT r.regionname
FROM mapSolarSystems s
     INNER JOIN mapRegions r
       ON s.regionID = r.regionID
WHERE s.solarSystemName LIKE %s
""", (system + "%",))
            if c.rowcount != 1:
                sys.stderr.write("\nUnknown or ambiguous system: %s\n" % system)
                return "Unknown"
        system2region_mapping[system] = c.fetchone()[0]
    return system2region_mapping[system]

main()
