#!/usr/bin/env python

import optparse
import re
import sys

from lib import characters

tags_rx = re.compile("<.*?>")

def main():
    usage = "usage: %prog [options] <motdfile> [motdfile]"
    parser = optparse.OptionParser(usage=usage)
    parser.add_option("--check", action="store_true",
                      dest="check", default=False,
                      help="Check with current standings")
    (options, args) = parser.parse_args()
    if len(args) == 0:
        parser.error("not enough arguments")
    elif len(args) == 1:
        check_standings(parse_motd(file(args[0])),
                        options.check)
    elif len(args) == 2:
        diff(parse_motd(file(args[0])), parse_motd(file(args[1])))
    else:
        parser.error("too many arguments")

def diff(old, new):
    (old_blues, old_reds) = old
    (new_blues, new_reds) = new
    for blue in old_blues:
        if blue not in new_blues:
            print "'%s' not blue anymore." % blue
    for blue in new_blues:
        if blue not in old_blues:
            print "'%s' is blue now." % blue
    for red in old_reds:
        if red not in new_reds:
            print "'%s' not red anymore." % red
    for red in new_reds:
        if red not in old_reds:
            print "'%s' is red now." % red

def check_standings(motd, do_check):
    (blues, reds) = motd
    if do_check:
        corp = characters.corp()
        st = dict([(x.toName.lower(), x.standing) for x in
                   corp.Standings().allianceStandings.standingsTo.corporations] +
                  [(x.toName.lower(), x.standing) for x in
                   corp.Standings().allianceStandings.standingsTo.alliances])
    print "RE-AL Blues"
    print "==========="
    for entry in blues:
        if do_check:
            print "%s (%+i)" % (entry.encode("utf-8"), st.get(entry.lower(), 0))
        else:
            print "%s" % (entry.encode("utf-8"),)
    print
    print "RE-AL Reds"
    print "=========="
    for entry in reds:
        if do_check:
            print "%s (%+i)" % (entry.encode("utf-8"), st.get(entry.lower(), 0))
        else:
            print "%s" % (entry.encode("utf-8"),)

def parse_motd(motdfile):
    st = motdfile.read().decode("utf-8")
    try:
        st = st[:st.rindex('" by ')]
    except:
        pass
    st = tags_rx.sub("", st.replace("<br>", "\n")).strip().split("\n")
    state = "prelude"
    blues = []
    reds = []
    for entry in st:
        entry = entry.strip()
        if entry == '':
            continue
        elif state == "prelude":
            if "blues" in entry.lower():
                state = "blues"
        elif state == "blues":
            if "reds" == entry.lower():
                state = "reds"
            else:
                blues.append(entry)
        elif state == "reds":
            reds.append(entry)

    blues.sort(lambda a, b: cmp(a.lower(), b.lower()))
    reds.sort(lambda a, b: cmp(a.lower(), b.lower()))
    return (blues, reds)

if __name__ == '__main__':
    main()
