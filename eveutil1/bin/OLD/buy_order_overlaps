#!/usr/bin/env python

import sys

from lib import characters, cache
from lib import evedb

db = evedb.connect()

def main():
    api = characters.api()
    corp = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    (jumps, region) = get_sysinfo()
    buy_orders = []
    charids = []
    for order in corp.MarketOrders().orders:
        if order.bid != 1 or order.orderState != 0:
            continue
        order_system = stationid2system(order.stationID)
        systems = systemrange(order_system, order.range)
        charids.append(order.charID)
        buy_orders.append((order.charID, order.typeID,
                           order_system, order.range,
                           systems))
    charid2name = dict((row.characterID, row.name) for row
                       in api.eve.CharacterName(ids=charids).characters)
    buy_orders = [(charid2name[charid], typeid2name(typeid), 
                   osystem, range, systems)
                  for (charid, typeid, osystem, range, systems)
                  in buy_orders]
    buy_orders.sort()
    for (char1, type1, osys1, range1, systems1) in buy_orders:
        for (char2, type2, osys2, range2, systems2) in buy_orders:
            if char1 <= char2:
                continue
            if type1 != type2:
                continue
            shared = overlap(systems1, systems2)
            if shared == []:
                continue
            print("%s (%s/%s) and %s (%s/%s) buy %s in %s" %
                  (char1, osys1, range1,
                   char2, osys2, range2,
                   type1, ", ".join(shared)))

def overlap(l1, l2):
    result = []
    for i1 in l1:
        if i1 in l2:
            result.append(i1)
    return result

chars = {}

def charid2name(charid):
    if charid not in chars:
        api = characters.api()
        chars[charid] = api.eve.CharacterName(ids=str(charid)).characters[0].name
    return chars[charid]

types = {}

def typeid2name(typeid):
    if typeid not in types:
        c = db.cursor()
        c.execute("SELECT typename FROM invtypes WHERE typeid = %s",
                  (typeid,))
        types[typeid] = c.fetchone()[0]
    return types[typeid]

def stationid2system(stationid):
    c = db.cursor()
    c.execute("SELECT n.itemname FROM stastations AS st INNER JOIN evenames AS n ON st.solarsystemid = n.itemid WHERE stationid = %s",
              (stationid,))
    return c.fetchone()[0]

def systemrange(startsystem, maxrange):
    (jumps, region) = get_sysinfo()
    if maxrange <= 0:
        return [startsystem]
    if maxrange >= 32000:
        return []
    systems = {}
    agenda = [(startsystem, 0)]
    while len(agenda) > 0:
        (system, distance) = agenda[0]
        agenda = agenda[1:]
        if distance <= maxrange:
            systems[system] = True
            for neighbor in jumps[system]:
                if neighbor not in systems:
                    agenda.append((neighbor, distance+1))
    for name in systems.keys():
        if region[name] != region[startsystem]:
            del systems[name]
    return systems.keys()

sysinfo = None
def get_sysinfo():
    global sysinfo
    if sysinfo is not None:
        return sysinfo
    jumps = {}
    region = {}
    c = db.cursor()
    c.execute(alljumps)
    for (f, r, t) in c.fetchall():
        region[f] = r
        if f not in jumps:
            jumps[f] = []
        jumps[f].append(t)
    sysinfo = (jumps, region)
    return sysinfo

alljumps = """
SELECT f.itemname, fr.itemname, t.itemname
FROM mapsolarsystemjumps AS j
     INNER JOIN evenames AS f
       ON j.fromsolarsystemid = f.itemid
     INNER JOIN evenames AS fr
       ON j.fromregionid = fr.itemid
     INNER JOIN evenames AS t
       ON j.tosolarsystemid = t.itemid
"""

main()
