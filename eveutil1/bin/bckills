#!/usr/bin/env python

import base64
import csv
import datetime
import os
import re
import sys
import urllib

from collections import defaultdict
from optparse import OptionParser

from lib import evedb

db = evedb.connect()

CACHEDIR = "/tmp/forcer/cache/url"

def main():
    parser = OptionParser(usage="%prog [OPTIONS]",
                          version="%prog 1.0")
    parser.add_option("--after", dest="after", metavar="DATE",
                      help="Find kills after this date",
                      default=(datetime.datetime.now() - 
                               datetime.timedelta(days=28)).strftime("%Y-%m-%d"))
    parser.add_option("--corp", dest="corp", metavar="NAME",
                      help="Find kills of the corp NAME",
                      default=None)
    parser.add_option("--alliance", dest="alliance", metavar="NAME",
                      help="Find kills of the alliance NAME",
                      default=None)
    (options, args) = parser.parse_args()
    if options.alliance:
        entitytype = "alliance"
        name = options.alliance
    elif options.corp:
        entitytype = "corp"
        name = options.corp
    else:
        parser.error("Please specify either alliance or a corporation.")
    after = datetime.datetime.strptime(options.after, "%Y-%m-%d")
    page = 0
    kills = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: 0)))
    done = False
    killcount = 0
    log = Report()
    while not done:
        page += 1
        for (system, ts) in bckills(entitytype, name, page):
            killcount += 1
            log("Downloading page %i: %s, %i kills" %
                (page, ts.strftime("%Y-%m-%d"), killcount))
            if ts < after:
                done = True
                break
            date = ts.strftime("%Y-%m-%d")
            region = system2region(system)
            hour = int(ts.strftime("%H"))
            if hour >= 6 and hour < 14:
                shift = 1
            elif hour >= 14 and hour < 22:
                shift = 2
            elif hour >= 22 or hour < 6:
                shift = 3
            else:
                raise RuntimeException, "Bad hour %i" % hour
            kills[date][region][shift] += 1
    log("%i kills between %s and %s\n" %
        (killcount, min(kills.keys()), max(kills.keys())))
    killlist = []
    for (date, regions) in kills.items():
        for (region, shifts) in regions.items():
            killlist.append([date, region,
                             shifts[1], shifts[2], shifts[3]])
    killlist.sort()
    w = csv.writer(sys.stdout)
    for row in killlist:
        w.writerow(row)

kill_rx = re.compile(r'<td>([^<]+) \([0-9.]+\)</td>(?:\n|.)*?'
                     r'<td>([0-9][0-9]/[0-9][0-9]/[0-9][0-9] [0-9][0-9]:[0-9][0-9]:[0-9][0-9])</td>')
    
def bckills(type, name, page=1):
    baseurl = "http://eve.battleclinic.com/killboard/combat_record.php"
    args = [("type", type),
            ("name", name),
            ("page", page)]
    url = baseurl + "?" + urllib.urlencode(args)
    data = geturl(url)
    return [(system, datetime.datetime.strptime(ts, "%m/%d/%y %H:%M:%S"))
            for (system, ts)
            in kill_rx.findall(data)]

def geturl(url):
    fname = os.path.join(CACHEDIR, base64.b64encode(url))
    if os.path.exists(fname):
        mtime = datetime.datetime.fromtimestamp(os.stat(fname).st_mtime)
        age = (mtime - datetime.datetime.now())
        if age.days < 1:
            return file(fname).read()
    data = urllib.urlopen(url).read()
    file(fname, "w").write(data)
    return data

system2region_mapping = {}
def system2region(system):
    if system not in system2region_mapping:
        c = db.cursor()
        c.execute("""
SELECT r.regionname
FROM mapSolarSystems s
     INNER JOIN mapRegions r
       ON s.regionID = r.regionID
WHERE s.solarSystemName = %s
""", (system,))
        if c.rowcount != 1:
            sys.stderr.write("Bad system name %s\n" % system)
            sys.exit(1)
        system2region_mapping[system] = c.fetchone()[0]
    return system2region_mapping[system]

class Report(object):
    def __init__(self, term=sys.stderr):
        self.term = term
        self.lastwidth = 0

    def __call__(self, arg):
        self.write(arg)

    def write(self, s):
        self.term.write(s)
        self.term.write(" " * (self.lastwidth - len(s)))
        self.term.write("\r")
        if "\n" in s:
            self.lastwidth = (len(s) - s.rindex("\n")) - 1
        else:
            self.lastwidth = len(s)

if __name__ == '__main__':
    main()
