#!/usr/bin/env python

from optparse import OptionParser
from lib import evedb

db = evedb.connect()

INSTA_REDOCK = ['Minmatar Hub',
                'Minmatar Industrial Station',
                'Minmatar Military Station',
                'Minmatar Mining Station',
                'Station (Gallente 1)',
                'Station (Gallente 2)',
                'Station ( Gallente 3 )',
                'Station ( Gallente 4 )',
                'Station ( Gallente 6 )',
                'Station ( Gallente 7 )',
                'Station ( Gallente 8 )',
                'Caldari Food Processing Plant Station',
                'Station (Caldari 1)',
                'Station (Caldari 2)',
                'Station (Caldari 3)',
                'Station ( Caldari 5 )',
                'Station ( Caldari 6 )',
                'Concord Starbase',
                'Amarr Mining Station',
                'Amarr Research Station',
                'Amarr Station Hub',
                'Amarr Station Military',
                'Amarr Trade Post'
                ]

def main():
    parser = OptionParser()
    parser.add_option("-j", "--max-jumps", dest="maxjumps",
                      type="int", default=2,
                      help="Maximum distance (defaults to 2)")
    (options, args) = parser.parse_args()
    agenda = [(args[0], 0)]
    jumps = getjumps(db)
    visited = {}
    while len(agenda) > 0:
        ((here, distance), agenda) = (agenda[0], agenda[1:])
        if here in visited:
            continue
        visited[here] = True
        if distance < options.maxjumps:
            agenda.extend([(system, distance + 1) for system in jumps[here]
                           if system not in visited])
        for (stationname, stationtype) in stations(here):
            if stationtype in INSTA_REDOCK:
                services = station_services(stationname)
                locator = locators(stationname)
                #desc = [stationtype]
                desc = []
                if 'Repair Facilities' in services:
                    desc.append("repair")
                else:
                    desc.append("no repair")
                if 'Cloning' in services:
                    desc.append("cloning")
                else:
                    desc.append("no cloning")
                if len(locator) > 0:
                    locator.sort()
                    desc.append("%s locator" %
                                ", ".join(["L%i" % i for i in locator]))
                if 'Amarr' in stationtype:
                    desc.append("amarr")
                print "%s (%s)" % (stationname, ", ".join(desc))

def stations(system):
    c = db.cursor()
    c.execute("""
SELECT st.stationName, t.typeName
FROM ccp.staStations st
     INNER JOIN ccp.invTypes t
       ON st.stationTypeID = t.typeID
     INNER JOIN ccp.mapSolarSystems sys
       ON st.solarSystemID = sys.solarSystemID
     LEFT JOIN ccp.mapDenormalize d
       ON st.stationid = d.itemid
WHERE sys.solarSystemName = %s
ORDER BY d.orbitid ASC
""", (system,))
    return c.fetchall()

def station_services(stationname):
    c = db.cursor()
    c.execute("""
SELECT s.serviceName
  FROM ccp.staStations st
       INNER JOIN ccp.staOperationServices sos
         ON st.operationID = sos.operationID
       INNER JOIN ccp.staServices s
         ON sos.serviceID = s.serviceID
 WHERE st.stationName = %s
""", (stationname,))
    return [x for (x,) in c.fetchall()]

def locators(stationname):
    c = db.cursor()
    c.execute("""
SELECT a.level
FROM ccp.agtAgents a
     INNER JOIN ccp.crpNPCDivisions d
       ON a.divisionID = d.divisionID
     INNER JOIN ccp.agtAgentTypes at
       ON a.agentTypeID = at.agentTypeID
     INNER JOIN ccp.staStations s
       ON a.locationID = s.stationID
WHERE s.stationName = %s
  AND a.islocator = 1
""", (stationname,))
    return [x for (x,) in c.fetchall()]

def getjumps(db):
    c = db.cursor()
    c.execute("""SELECT f.solarSystemName, t.solarSystemName
                 FROM ccp.mapSolarSystemJumps j
                      INNER JOIN ccp.mapSolarSystems f
                        ON j.fromSolarSystemID = f.solarSystemID
                      INNER JOIN ccp.mapSolarSystems t
                        ON j.toSolarSystemID = t.solarSystemID
              """)
    jumps = {}
    for (start, end) in c.fetchall():
        if start not in jumps:
            jumps[start] = []
        jumps[start].append(end)
    return jumps
    

if __name__ == '__main__':
    main()
