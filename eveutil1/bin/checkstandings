#!/usr/bin/env python

import cgi
import sys
import datetime
import urllib
from xml.etree import ElementTree

from lib import characters, cache
from lib.util import showinfo

xmlurl = "http://www.electusmatari.com/standings.cgi?format=xml"
outfile = "/home/forcer/public_html/standings.html"

def main():
    messages = []
    forums = get_xml_entities()
    del forums['24th Imperial Crusade']
    (api, cached_until) = get_api_entities(messages)
    compare(forums, api, messages)
    sanitize(api, messages)
    messages.sort(lambda a, b: cmp(a.ordering.lower(), b.ordering.lower()))
    f = file(outfile, "w")
    f.write("<html><body><p>Generated on %s, neocom standings cached until %s.</p>\n" %
            (datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S"),
             datetime.datetime.utcfromtimestamp(cached_until).strftime("%Y-%m-%d %H:%M:%S")))
    report_stats(f, api)
    report(f, messages, "Critical", "critical")
    report(f, messages, "Redundant Standings", "redundant")
    report(f, messages, "Standings with Corps in Alliances", "info")
    report_sizes(f, api)
    report_corps(f, api)
    
def report(f, messages, header, level):
    f.write("<h1>%s</h1>\n" % header)
    f.write("<ol>\n")
    for msg in messages:
        if msg.level == level:
            f.write("<li>%s</li>\n" % msg)
    f.write("</ol>\n")

def report_stats(f, api):
    positive_alliance_count = 0
    negative_alliance_count = 0
    positive_corp_count = 0
    negative_corp_count = 0
    positive_alliance_size = 0
    negative_alliance_size = 0
    positive_corp_size = 0
    negative_corp_size = 0
    for entity in api.values():
        if entity.is_alliance and entity.standing > 0:
            positive_alliance_count += 1
            if entity.size is not None:
                positive_alliance_size += entity.size
        elif entity.is_alliance and entity.standing < 0:
            negative_alliance_count += 1
            if entity.size is not None:
                negative_alliance_size += entity.size
        elif not entity.is_alliance and entity.standing > 0:
            positive_corp_count += 1
            if entity.in_alliance and entity.in_alliance.standing == 0:
                positive_corp_size += entity.size
        elif not entity.is_alliance and entity.standing < 0:
            negative_corp_count += 1
            if entity.in_alliance and entity.in_alliance.standing == 0:
                negative_corp_size += entity.size
    f.write("<p>%i standings (%i alliances, %i corporations, %i pilots). %i positive (%i, %i, %i), %i negative (%i, %i, %i).</p>" %
            ((positive_alliance_count + positive_corp_count +
              negative_alliance_count + negative_corp_count),
             (positive_alliance_count + negative_alliance_count),
             (positive_corp_count + negative_corp_count),
             (positive_alliance_size + positive_corp_size +
              negative_alliance_size + negative_corp_size),
             (positive_alliance_count + positive_corp_count),
             positive_alliance_count,
             positive_corp_count,
             positive_alliance_size + positive_corp_size,
             (negative_alliance_count + negative_corp_count),
             negative_alliance_count,
             negative_corp_count,
             negative_alliance_size + negative_corp_size))


def report_sizes(f, api):
    sizes = [(x.size, x) for x in api.values()]
    sizes.sort()
    entities = [x for x in sizes if x[0] < 10]
    if len(entities) < 10:
        entities = sizes[:10]
    f.write("<h1>Small Entities</h1>\n")
    f.write("<ol>\n")
    for (size, entity) in entities:
        f.write("<li>%s (%s members) - %+i</li>\n" %
                (entity, entity.size, entity.standing))
    f.write("</ol>\n")

def report_corps(f, api):
    corps = [x for x in api.values()
             if not x.is_alliance and not x.in_alliance and x.standing == -10]
    corps.sort(lambda a, b: cmp(a.name.lower(), b.name.lower()))
    f.write("<h1>Corporations With Standing -10</h1>\n")
    f.write("<p>I can not check whether a corporation joined or left a militia. The following is a list to make it easier for you to do by hand.</p>\n")
    f.write("<ol>\n")
    for corp in corps:
        f.write("<li>%s - %+i</li>\n" % (corp, corp.standing))
    f.write("</ol>\n")

def sanitize(api, messages):
    for (name, entity) in api.items():
        if entity.in_alliance is not None:
            ally = entity.in_alliance
            if min(entity.standing, ally.standing) < 0 and max(entity.standing, ally.standing) > 0:
                level = "critical"
            elif ally.standing != 0:
                level = "redundant"
            else:
                level = "info"
            messages.append(Message(ally.name, level,
                                    "%s (%+i, %i members) was joined by %s (%+i, %i members)" %
                                    (ally, ally.standing, ally.size,
                                     entity, entity.standing, entity.size)))

def compare(forums, api, messages):
    for name in api:
        if name not in forums:
            messages.append(Message(name, "critical",
                                    "%s is set %+i in the neocom, but neutral on the forums." %
                                    (api[name], api[name].standing)))
    for name in forums:
        if name not in api:
            messages.append(Message(name, "critical",
                                    "%s is set %+i on the forums, but neutral in the neocom." %
                                    (forums[name], forums[name].standing)))
            continue
        f = forums[name]
        a = api[name]
        if type(a.ticker) is unicode and type(f.ticker) is unicode:
            messages.append(Message(name, "critical",
                                    "%s has a wrong ticker on the forums, should be [%s]." %
                                    (f, cgi.escape(str(a.ticker)))))
        if f.is_alliance and not a.is_alliance:
            messages.append(Message(name, "critical",
                                    "%s on the forums is not an alliance, but a corporation." %
                                    f))
        if not f.is_alliance and a.is_alliance:
            messages.append(Message(name, "critical",
                                    "%s on the forums is not a corporation, but an alliance." %
                                    f))
        if f.standing != a.standing and not (f.standing == 5 and a.standing == 10):
            messages.append(Message(name, "critical",
                                    "%s is %+i on the forums, but %+i in the neocom." %
                                    (a, f.standing, a.standing)))

def get_xml_entities():
    sys.stderr.write("Getting XML standings ... ")
    u = urllib.urlopen(xmlurl)
    xml = ElementTree.fromstring(u.read())
    l = [xml2entity(elt) for elt in xml.findall("standing")]
    sys.stderr.write("ok.\n")
    return dict((e.name, e) for e in l)

def xml2entity(elt):
    name = elt.find("entity").text
    ticker = elt.find("ticker").text
    standing = elt.find("value").text
    if standing == "blue":
        standing = 5
    else:
        standing = int(standing)
    e = Entity(name, ticker=ticker[1:-1], standing=standing)
    if ticker[-1] == '>':
        e.is_alliance = True
    else:
        e.is_alliance = False
    return e

def get_api_entities(messages):
    entities = {}
    alliance_corps = []
    api = characters.api()
    # API standings
    corp = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    sys.stderr.write("Getting API standings ... ")
    # standings = corp.Standings()
    # add_entities(entities, False,
    #              standings.allianceStandings.standingsTo.corporations,
    #              messages)
    # add_entities(entities, True,
    #              standings.allianceStandings.standingsTo.alliances,
    #              messages)
    standings = corp.ContactList()
    add_contacts(entities, standings.allianceContactList, messages)
    sys.stderr.write("ok.\n")
    # API alliances
    sys.stderr.write("Getting API alliances ... ")
    alliances = api.eve.AllianceList()
    for alliance in alliances.alliances:
        if alliance.name in entities:
            e = entities[alliance.name]
            e.ticker = alliance.shortName
            e.size = alliance.memberCount
            e.is_alliance = True
    sys.stderr.write("ok.\n")
    # API corporations
    count = len([x for x in entities.values() if not x.is_alliance])
    i = 0
    for (name, entity) in entities.items():
        if not entity.is_alliance:
            sys.stderr.write("\rGetting API corporations %i/%i" % (i, count))
            i += 1
            sheet = api.corp.CorporationSheet(corporationID=entity.id)
            entity.ticker = sheet.ticker
            entity.size = sheet.memberCount
            if hasattr(sheet, "allianceName"):
                if sheet.allianceName in entities:
                    entity.in_alliance = entities[sheet.allianceName]
                else:
                    a = alliances.alliances.IndexedBy("name").Get(sheet.allianceName)
                    entity.in_alliance = Entity(a.name,
                                                id=a.allianceID,
                                                ticker=a.shortName,
                                                standing=0,
                                                size=a.memberCount,
                                                is_alliance=True)
    sys.stderr.write("\rGetting API corporations ... ok.\n")
    return (entities, standings._meta.cachedUntil)

def add_entities(entities, is_alliance, rowset, messages):
    for standing in rowset:
        add_standing(entities, messages,
                     standing.toID, standing.toName, standing.standing,
                     is_alliance)

def add_contacts(entities, contacts, messages):
    for contact in contacts:
        if contact.standing != 0:
            add_standing(entities, messages,
                         contact.contactID, contact.contactName,
                         contact.standing)

def add_standing(entities, messages, entity_id, entity_name, standing, 
                 is_alliance=False):
    if len(entity_name) == 0:
        e = Entity(name=str(entity_id),
                   is_alliance=is_alliance,
                   id=entity_id,
                   standing=standing)
        messages.append(Message("%s" % standing,
                                "critical",
                                "Standing to disbanded entity %s: %+i" %
                                (e, standing)))
    elif entity_name in entities:
        sys.stderr.write("%s more than once in the API standings?\n" %
                         entity_name)
    else:
        entities[entity_name] = Entity(name=entity_name,
                                       is_alliance=is_alliance,
                                       id=entity_id,
                                       standing=standing)

class Entity(object):
    def __init__(self, name, id=None, ticker=None, is_alliance=None,
                 standing=0, size=None, in_alliance=None):
        self.name = name
        self.id = id
        self.ticker = ticker
        self.is_alliance = is_alliance
        self.standing = standing
        self.size = size
        self.in_alliance = in_alliance

    def __str__(self):
        if self.is_alliance:
            typeid = "16159"
        else:
            typeid = "2"

        if self.ticker is None:
            name = '%(name)s'
        elif self.is_alliance:
            name = '%(name)s &lt;%(ticker)s&gt;'
        else:
            name = '%(name)s [%(ticker)s]'

        if self.id:
            link = showinfo("%(typeid)s", "%(id)s", name)
        else:
            link = name
        return link % {"typeid": typeid,
                       "id": self.id,
                       "name": cgi.escape(self.name),
                       "ticker": cgi.escape(str(self.ticker))}

class Message(object):
    def __init__(self, ordering, level, msg):
        self.ordering = ordering
        self.level = level
        self.msg = msg

    def __str__(self):
        return self.msg

if __name__ == '__main__':
    main()
