#!/usr/bin/env python

from optparse import OptionParser

from lib import evedb

def main():
    parser = OptionParser()
    parser.add_option("-j", "--max-jumps", dest="maxjumps",
                      type="int", default=3,
                      help="Maximum distance (defaults to 3)")
    parser.add_option("-l", "--min-level", dest="minlevel",
                      type="int", default=3,
                      help="Minum agent level (defaults to 3)")
    parser.add_option("--storyline", dest="storyline",
                      action="store_true", default=False,
                      help="Look for storyline agents, not locators")
    (options, args) = parser.parse_args()
    print_locators(args[0], options.maxjumps, options.minlevel,
                   options.storyline)

def print_locators(start, maxjumps, minlevel, do_storyline=False):
    db = evedb.connect()
    jumps = getjumps(db)
    agenda = [(0, start)]
    visited = {}
    while len(agenda) > 0:
        (distance, system) = agenda[0]
        agenda = agenda[1:]
        if distance > maxjumps:
            break
        if system in visited:
            continue
        visited[system] = True
        agenda.extend([(distance+1, neighbor) for neighbor in jumps[system]])
        if do_storyline:
            for (station,) in storylines(db, system):
                print "%ij %s" % (distance, station)
        else:
            for (level, station) in locators(db, system):
                if level >= minlevel:
                    print "%ij L%i %s" % (distance, level, station)

def locators(db, system):
    c = db.cursor()
    c.execute("""SELECT a.level, st.stationName
                 FROM ccp.agtAgents a
                      INNER JOIN ccp.staStations st
                        ON a.locationID = st.stationID
                      INNER JOIN ccp.mapSolarSystems sys
                        ON st.solarSystemID = sys.solarSystemID
                 WHERE a.islocator = 1
                   AND sys.solarSystemName = %s
              """, (system,))
    return c.fetchall()

def storylines(db, system):
    c = db.cursor()
    c.execute("""SELECT st.stationName
                 FROM ccp.agtAgents a
                      INNER JOIN ccp.staStations st
                        ON a.locationID = st.stationID
                      INNER JOIN ccp.mapSolarSystems sys
                        ON st.solarSystemID = sys.solarSystemID
                      INNER JOIN ccp.agtAgentTypes at
                        ON a.agentTypeID = at.agentTypeID
                 WHERE at.agentType = 'GenericStorylineMissionAgent'
                   AND sys.solarSystemName = %s
              """, (system,))
    return c.fetchall()

def getjumps(db):
    c = db.cursor()
    c.execute("""SELECT f.solarSystemName, t.solarSystemName
                 FROM ccp.mapSolarSystemJumps j
                      INNER JOIN ccp.mapSolarSystems f
                        ON j.fromSolarSystemID = f.solarSystemID
                      INNER JOIN ccp.mapSolarSystems t
                        ON j.toSolarSystemID = t.solarSystemID
              """)
    jumps = {}
    for (start, end) in c.fetchall():
        if start not in jumps:
            jumps[start] = []
        jumps[start].append(end)
    return jumps

main()
