#!/usr/bin/env python

import csv
import sys

from lib import characters, cache
from lib import evedb, cost

db = evedb.connect()

def main():
    items = []
    for typename in getproduceable():
        group = getgroup(typename)
        category = getcategory(typename)
        if "Sentry" in group:
            continue
        if category in ('Asteroid', # Compressed ore
                        'Ancient Relics'):
            continue
        if typename in ("Small 'Integrative' Hull Repair Unit"):
            continue
        items.append((typename, cost.cost(typename)))
    items.sort()
    w = csv.writer(sys.stdout)
    for (typename, price) in items:
        w.writerow((typename, "%.2f" % price))

def getproduceable():
    grd = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    assets = grd.AssetList()
    jobs = grd.IndustryJobs()
    blueprints = getblueprints(assets.assets, jobs.jobs)
    producable = []
    for bp in blueprints:
        product = blueprintproduct(bp)
        if product is None:
            continue
        mgroups = marketgroups(product)
        if 'Amarr' in mgroups and 'Ships' in mgroups:
            continue
        producable.append(product)
    return producable
    
def getblueprints(assets, jobs):
    bptypenames = getassetblueprints(assets)
    bptypenames.update(getjobblueprints(jobs))
    bptypenames.update(getinvention(bptypenames.keys()))
    return bptypenames.keys()

def getassetblueprints(assets):
    names = {}
    for row in assets:
        tn = gettypename(row.typeID)
        if blueprintproduct(tn) is not None:
            names[tn] = True
        if hasattr(row, "contents"):
            names.update(getassetblueprints(row.contents))
    return names

def getjobblueprints(jobs):
    return dict((gettypename(x.installedItemTypeID), True) for x in jobs)

def getinvention(bplist):
    invented = []
    for bp in bplist:
        invented.extend(inventionresults(bp))
    return dict((n, True) for n in invented)

_gettypename = None
def gettypename(typeid):
    global _gettypename
    if _gettypename is None:
        c = db.cursor()
        c.execute("SELECT typeid, typename FROM invtypes")
        _gettypename = dict(c.fetchall())
    return _gettypename[typeid]

_blueprintproduct = None
def blueprintproduct(bp):
    global _blueprintproduct
    if _blueprintproduct is None:
        c = db.cursor()
        c.execute("SELECT bt.typename, pt.typename "
                  "FROM invblueprinttypes b "
                  "     INNER JOIN invtypes bt "
                  "       ON b.blueprinttypeid = bt.typeid "
                  "     INNER JOIN invtypes pt "
                  "       ON b.producttypeid = pt.typeid "
                  "WHERE pt.published = 1")
        _blueprintproduct = dict(c.fetchall())
    return _blueprintproduct.get(bp, None)

_inventionresults = None
def inventionresults(bp):
    global _inventionresults
    if _inventionresults is None:
        _inventionresults = {}
        c = db.cursor()
        c.execute("SELECT bt.typename, sbt.typename "
                  "FROM invblueprinttypes bp "
                  "     INNER JOIN invtypes bt "
                  "       ON bp.blueprinttypeid = bt.typeid "
                  "     INNER JOIN invtypes pt "
                  "       ON BP.producttypeid = pt.typeid "
                  "     INNER JOIN invmetatypes mt "
                  "       ON pt.typeid = mt.parenttypeid "
                  "     INNER JOIN invmetagroups mg "
                  "       ON mt.metagroupid = mg.metagroupid "
                  "     INNER JOIN invblueprinttypes sbp "
                  "       ON sbp.producttypeid = mt.typeid "
                  "     INNER JOIN invtypes sbt "
                  "       ON sbt.typeid = sbp.blueprinttypeid "
                  "WHERE mg.metagroupname = 'Tech II' "
                  "  AND sbt.published = 1")
        for (blueprint, result) in c.fetchall():
            _inventionresults.setdefault(blueprint, [])
            _inventionresults[blueprint].append(result)
    return _inventionresults.get(bp, [])

def marketgroups(typename):
    names = []
    c = db.cursor()
    c.execute("SELECT marketgroupid FROM invtypes WHERE typename = %s",
              (typename,))
    mgid = c.fetchone()[0]
    while mgid is not None:
        c.execute("SELECT parentgroupid, marketgroupname "
                  "FROM invmarketgroups "
                  "WHERE marketgroupid = %s",
                  (mgid,))
        (mgid, name) = c.fetchone()
        names.append(name)
    return names

_getgroup = None
def getgroup(typename):
    global _getgroup
    if _getgroup is None:
        c = db.cursor()
        c.execute("SELECT t.typename, g.groupname "
                  "FROM invtypes t "
                  "     INNER JOIN invgroups g "
                  "       ON t.groupid = g.groupid")
        _getgroup = dict(c.fetchall())
    return _getgroup[typename]

_getcategory = None
def getcategory(typename):
    global _getcategory
    if _getcategory is None:
        c = db.cursor()
        c.execute("SELECT t.typename, c.categoryname "
                  "FROM invtypes t "
                  "     INNER JOIN invgroups g "
                  "       ON t.groupid = g.groupid "
                  "     INNER JOIN invcategories c "
                  "       ON g.categoryid = c.categoryid ")
        _getcategory = dict(c.fetchall())
    return _getcategory[typename]

if __name__ == '__main__':
    main()
