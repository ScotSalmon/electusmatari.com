#!/usr/bin/env python

import collections
import csv
import datetime
import ftplib
import os
import StringIO
import urllib
import xml.etree.ElementTree as ElementTree

import lib.util as util
import lib.evedb as evedb
import lib.evemetrics as evemetrics

LOCALDIR = "/home/forcer/public_html/eve/gmi/"

TYPE_DATA = [("Minerals", ""),
             ("Tritanium", None),
             ("Pyerite", None),
             ("Mexallon", None),
             ("Isogen", None),
             ("Nocxium", None),
             ("Zydrine", None),
             ("Megacyte", None),
             ("Morphite", None),
             ("", ""),
             ("Fuel", ""),
             ("Coolant", None),
             ("Enriched Uranium", None),
             ("Heavy Water", None),
             ("Helium Isotopes", None),
             ("Hydrogen Isotopes", None),
             ("Nitrogen Isotopes", None),
             ("Oxygen Isotopes", None),
             ("Liquid Ozone", None),
             ("Mechanical Parts", None),
             ("Oxygen", None),
             ("Robotics", None),
             ("Strontium Clathrates", None),
             ("", ""),
             ("Salvage Materials", ""),
             ("Alloyed Tritanium Bar", None),
             ("Armor Plates", None),
             ("Broken Drone Transceiver", None),
             ("Burned Logic Circuit", None),
             ("Charred Micro Circuit", None),
             ("Conductive Polymer", None),
             ("Contaminated Lorentz Fluid", None),
             ("Contaminated Nanite Compound", None),
             ("Damaged Artificial Neural Network", None),
             ("Defective Current Pump", None),
             ("Fried Interface Circuit", None),
             ("Malfunctioning Shield Emitter", None),
             ("Melted Capacitor Console", None),
             ("Scorched Telemetry Processor", None),
             ("Smashed Trigger Unit", None),
             ("Tangled Power Conduit", None),
             ("Thruster Console", None),
             ("Tripped Power Circuit", None),
             ("Ward Console", None),
             ("", ""),
             ("Datacores", ""),
             ("Datacore - Amarrian Starship Engineering", None),
             ("Datacore - Caldari Starship Engineering", None),
             ("Datacore - Electromagnetic Physics", None),
             ("Datacore - Electronic Engineering", None),
             ("Datacore - Gallentean Starship Engineering", None),
             ("Datacore - Graviton Physics", None),
             ("Datacore - High Energy Physics", None),
             ("Datacore - Hydromagnetic Physics", None),
             ("Datacore - Laser Physics", None),
             ("Datacore - Mechanical Engineering", None),
             ("Datacore - Minmatar Starship Engineering", None),
             ("Datacore - Molecular Engineering", None),
             ("Datacore - Nanite Engineering", None),
             ("Datacore - Nuclear Physics", None),
             ("Datacore - Plasma Physics", None),
             ("Datacore - Quantum Physics", None),
             ("Datacore - Rocket Science", None),
             ("", ""),
             ("Decryptors", ""),
             ("Advanced Theories", None),
             ("Assembly Instructions", None),
             ("Calibration Data", None),
             ("Circuitry Schematics", None),
             ("Circular Logic", None),
             ("Classic Doctrine", None),
             ("Collision Measurements", None),
             ("Engagement Plan", None),
             ("Formation Layout", None),
             ("Installation Guide", None),
             ("Interface Alignment Chart", None),
             ("Operation Handbook", None),
             ("Prototype Diagram", None),
             ("Sacred Manifesto", None),
             ("Stolen Formulas", None),
             ("Symbiotic Figures", None),
             ("Test Reports", None),
             ("Tuning Instructions", None),
             ("User Manual", None),
             ("War Strategon", None),
             ("", ""),
             ("Advanced Moon Minerals", ""),
             ("Crystalline Carbonide", None),
             ("Fermionic Condensates", None),
             ("Fernite Carbide", None),
             ("Ferrogel", None),
             ("Fullerides", None),
             ("Hypersynaptic Fibers", None),
             ("Nanotransistors", None),
             ("Phenolic Composites", None),
             ("Sylramic Fibers", None),
             ("Titanium Carbide", None),
             ("Tungsten Carbide", None),
             ("", ""),
             ("Ancient Salvaged Materials", ""),
             ("Cartesian Temporal Coordinator", None),
             ("Central System Controller", None),
             ("Defensive Control Node", None),
             ("Electromechanical Hull Sheeting", None),
             ("Emergent Combat Analyzer", None),
             ("Emergent Combat Intelligence", None),
             ("Fused Nanomechanical Engines", None),
             ("Heuristic Selfassemblers", None),
             ("Jump Drive Control Nexus", None),
             ("Melted Nanoribbons", None),
             ("Modified Fluid Router", None),
             ("Neurovisual Input Matrix", None),
             ("Powdered C-540 Graphite", None),
             ("Resonance Calibration Matrix", None),
             ("Thermoelectric Catalysts", None),
             ("", ""),
             ("Ancient Relics", ""),
             ("Intact Armor Nanobot", None),
             ("Intact Electromechanical Component", None),
             ("Intact Hull Section", None),
             ("Intact Power Cores", None),
             ("Intact Thruster Sections", None),
             ("Intact Weapon Subroutines", None),
             ("Malfunctioning Armor Nanobot", None),
             ("Malfunctioning Electromechanical Component", None),
             ("Malfunctioning Hull Section", None),
             ("Malfunctioning Power Cores", None),
             ("Malfunctioning Thruster Sections", None),
             ("Malfunctioning Weapon Subroutines", None),
             ("Wrecked Armor Nanobot", None),
             ("Wrecked Electromechanical Component", None),
             ("Wrecked Hull Section", None),
             ("Wrecked Power Cores", None),
             ("Wrecked Thruster Sections", None),
             ("Wrecked Weapon Subroutines", None),
             ("", ""),
             ("Hybrid Datacores", ""),
             ("Datacore - Defensive Subsystems Engineering", None),
             ("Datacore - Electronic Subsystems Engineering", None),
             ("Datacore - Engineering Subsystems Engineering", None),
             ("Datacore - Offensive Subsystems Engineering", None),
             ("Datacore - Propulsion Subsystems Engineering", None),
             ("", ""),
             ("Hybrid Decryptors", ""),
             ("R.A.M.- Hybrid Technology", None),
             ("Amarr Hybrid Tech Decryptor", None),
             ("Caldari Hybrid Tech Decryptor", None),
             ("Gallente Hybrid Tech Decryptor", None),
             ("Minmatar Hybrid Tech Decryptor", None),
             ("", ""),
             ("Fullerenes", ""),
             ("Fullerite-C28", None),
             ("Fullerite-C32", None),
             ("Fullerite-C50", None),
             ("Fullerite-C60", None),
             ("Fullerite-C70", None),
             ("Fullerite-C72", None),
             ("Fullerite-C84", None),
             ("Fullerite-C320", None),
             ("Fullerite-C540", None),
             ("", ""),
             ("Hybrid Polymers", ""),
             ("C3-FTM Acid", None),
             ("Carbon-86 Epoxy Resin", None),
             ("Fullerene Intercalated Graphite", None),
             ("Fulleroferrocene", None),
             ("Graphene Nanoribbons", None),
             ("Lanthanum Metallofullerene", None),
             ("Methanofullerene", None),
             ("PPD Fullerene Fibers", None),
             ("Scandium Metallofullerene", None),
             ("", ""),
             ("Raw Materials", ""),
             ("Atmospheric Gases", None),
             ("Cadmium", None),
             ("Caesium", None),
             ("Chromium", None),
             ("Cobalt", None),
             ("Dysprosium", None),
             ("Evaporite Deposits", None),
             ("Hafnium", None),
             ("Hydrocarbons", None),
             ("Mercury", None),
             ("Neodymium", None),
             ("Platinum", None),
             ("Promethium", None),
             ("Scandium", None),
             ("Silicates", None),
             ("Technetium", None),
             ("Thulium", None),
             ("Titanium", None),
             ("Tungsten", None),
             ("Vanadium", None),
             ("", ""),
             ("Processed Materials", ""),
             ("Sulfuric Acid", None),
             ("Silicon Diborite", None),
             ("Ceramic Powder", None),
             ("Carbon Polymers", None),
             ("Crystallite Alloy", None),
             ("Fernite Alloy", None),
             ("Titanium Chromide", None),
             ("Rolled Tungsten Alloy", None),
             ("Hexite", None),
             ("Caesarium Cadmide", None),
             ("Solerium", None),
             ("Platinum Technite", None),
             ("Vanadium Hafnite", None),
             ("Prometium", None),
             ("Hyperflurite", None),
             ("Ferrofluid", None),
             ("Dysporite", None),
             ("Neo Mercurite", None),
             ("Fluxed Condensates", None),
             ("", ""),
             ("Tech 2 Salvage Materials", ""),
             ("Artificial Neural Network", None),
             ("Capacitor Console", None),
             ("Conductive Thermoplastic", None),
             ("Current Pump", None),
             ("Drone Transceiver", None),
             ("Enhanced Ward Console", None),
             ("Impetus Console", None),
             ("Intact Armor Plates", None),
             ("Intact Shield Emitter", None),
             ("Interface Circuit", None),
             ("Logic Circuit", None),
             ("Lorentz Fluid", None),
             ("Micro Circuit", None),
             ("Nanite Compound", None),
             ("Power Circuit", None),
             ("Power Conduit", None),
             ("Single-crystal Superalloy I-beam", None),
             ("Telemetry Processor", None),
             ("Trigger Unit", None),
             ("", ""),
             ("Booster Gases", ""),
             ("Amber Mykoserocin", None),
             ("Azure Mykoserocin", None),
             ("Celadon Mykoserocin", None),
             ("Golden Mykoserocin", None),
             ("Lime Mykoserocin", None),
             ("Malachite Mykoserocin", None),
             ("Vermillion Mykoserocin", None),
             ("Viridian Mykoserocin", None),
             ("Amber Cytoserocin", None),
             ("Azure Cytoserocin", None),
             ("Celadon Cytoserocin", None),
             ("Golden Cytoserocin", None),
             ("Lime Cytoserocin", None),
             ("Malachite Cytoserocin", None),
             ("Vermillion Cytoserocin", None),
             ("Viridian Cytoserocin", None),
             ("", ""),
             ("Tech 2 Production", ""),
             ("Construction Blocks", None),
             ("Electronic Parts", None),
             ("Guidance System", None),
             ("Hydrogen Batteries", None),
             ("Miniature Electronics", None),
             ("Rocket Fuel", None),
             ("Super Conductors", None),
             ("Transmitter", None),
             ]

db = None

def main():
    global db
    db = evedb.connect()
    typenames = [tn for (tn, kind) in TYPE_DATA if kind is None]
    prices = evemetrics.get_prices(typenames)
    csvdata = make_csv(TYPE_DATA, prices)
    htmldata = make_html(TYPE_DATA, prices)
    xmldata = make_xml(TYPE_DATA, prices)
    suggestdata = make_suggestions(typenames)
    now = datetime.datetime.now()
    csvname = now.strftime("gmi-%Y-%m-%d.txt")
    htmlname = now.strftime("gmi-%Y-%m-%d.html")
    xmlname = now.strftime("gmi-%Y-%m-%d.xml")
    do_ftp([(csvdata, "current.txt"),
            (csvdata, csvname),
            (htmldata, "current.html"),
            (htmldata, htmlname),
            (xmldata, "current.xml"),
            (xmldata, xmlname),
            (suggestdata, "current-suggestions.html")])
    for f in ["current.txt", csvname]:
        file(os.path.join(LOCALDIR, f), "w").write(csvdata)
    for f in ["current.html", htmlname]:
        file(os.path.join(LOCALDIR, f), "w").write(htmldata)
    for f in ["current.xml", xmlname]:
        file(os.path.join(LOCALDIR, f), "w").write(xmldata)
    for f in ["current-suggestions.html"]:
        file(os.path.join(LOCALDIR, f), "w").write(suggestdata)


def make_csv(data, prices):
    s = StringIO.StringIO()
    w = csv.writer(s)
    header = ["Type", "Index", "Change", "Movement",
              "Heimatar", "Metropolis", "Molden Heath",
              "Jita"]
    w.writerow(header)
    index = make_rows(data, prices)
    for row in index:
        if len(row) < len(header):
            row += [""] * (len(header) - len(row))
        w.writerow(row)
    s.seek(0)
    return s.read()

def make_html(data, prices):
    s = StringIO.StringIO()
    s.write("<html>\n"
            "<head>\n"
            '<style type="text/css">\n'
            'html {\n'
            '  font-family: sans-serif;\n'
            '}\n'
            'table {\n'
            '  border-collapse: collapse;\n'
            '}\n'
            'td, th {\n'
            '  border: 1px solid black;\n'
            '}\n'
            'th {\n'
            '  background: #CFCFCF;\n'
            '}\n'
            'tr.even td {\n'
            '  background: #EFEFEF;\n'
            '}\n'
            'tr.even td.old {\n'
            '  background: #FFAF7F;\n'
            '}\n'
            'tr.even td.veryold {\n'
            '  background: #FF7F7F;\n'
            '}\n'
            'td.typename {\n'
            '  text-align: left;\n'
            '}\n'
            'td.number {\n'
            '  text-align: right;\n'
            '}\n'
            '.old {\n'
            '  background-color: #FFAF7F;\n'
            '}\n'
            '.veryold {\n'
            '  background-color: #FF7F7F;\n'
            '}\n'
            '</style>\n'
            "</head>\n"
            "<body>\n"
            "<h1>Gradient Material Index</h1>\n"
            '<p><span class="old">Orange entries</span> have not been '
            'updated or had no movement for over three days. '
            '<span class="veryold">Red entries</span> have not been '
            'updated or had no movement for a week or more.</p>\n')
    s.write("<table>\n"
            "<tr>"
            "<th>Typename</th>"
            "<th>Index</th>"
            "<th>Change to Last Day</th>"
            "<th>Movement</th>"
            "<th>Heimatar</th>"
            "<th>Metropolis</th>"
            "<th>Molden Heath</th>"
            "<th>Jita</th>"
            "</tr>\n")
    now = datetime.datetime.utcnow()
    odd = True
    for row in make_rows(data, prices):
        if len(row) == 1:
            odd = True
            s.write('<tr><th colspan="8">%s</th></tr>\n' % row[0])
        else:
            tn, index, change, movement, heim, metro, mh, jita = row
            if odd:
                classname = "odd"
                odd = False
            else:
                classname = "even"
                odd = True

            lu = prices[tn].last_upload()
            regcls = {}
            for reg in ['Heimatar', 'Metropolis', 'Molden Heath', 'The Forge']:
                if lu[reg] is None or (now - lu[reg]).days > 7:
                    regcls[reg] = 'veryold'
                elif (now - lu[reg]).days > 3:
                    regcls[reg] = 'old'
                else:
                    regcls[reg] = ''

            s.write('<tr class="%s">'
                    '<td class="typename">%s</td>'
                    '<td class="number">%s</td>'
                    '<td class="number">%s</td>'
                    '<td class="number">%s</td>'
                    '<td class="number %s">%s</td>'
                    '<td class="number %s">%s</td>'
                    '<td class="number %s">%s</td>'
                    '<td class="number %s">%s</td>'
                    '</tr>\n'
                    % (classname,
                       tn, util.humane(float(index)), change,
                       util.humane(int(movement)),
                       regcls['Heimatar'], util.humane(float(heim)),
                       regcls['Metropolis'], util.humane(float(metro)),
                       regcls['Molden Heath'], util.humane(float(mh)),
                       regcls['The Forge'], util.humane(float(jita))))
    s.write("</table>"
            "</body>"
            "</html>")
    s.seek(0)
    return s.read()

def make_rows(data, prices):
    rows = []
    for tn, kind in data:
        if kind == "":
            rows.append([tn])
        elif kind is None:
            rows.append([tn,
                         "%.2f" % prices[tn].index(regions=evemetrics.REPUBLIC_REGIONS),
                         "%+.1f%%" % (prices[tn].change(regions=evemetrics.REPUBLIC_REGIONS)*100),
                         "%i" % prices[tn].movement(regions=evemetrics.REPUBLIC_REGIONS),
                         "%.2f" % prices[tn].index(regions=['Heimatar'],
                                                   do_jita=False),
                         "%.2f" % prices[tn].index(regions=['Metropolis'],
                                                   do_jita=False),
                         "%.2f" % prices[tn].index(regions=['Molden Heath'],
                                                   do_jita=False),
                         "%.2f" % prices[tn].index(regions=['The Forge'],
                                                   do_jita=False)
                         ])
    return rows

def make_xml(data, prices):
    root = ElementTree.Element("index")
    for tn, price in prices.items():
        item = ElementTree.SubElement(root, "item")
        item.set("name", tn)
        item.set("price", "%.2f" % price.index())
    tree = ElementTree.ElementTree(root)
    s = StringIO.StringIO()
    tree.write(s)
    s.seek(0)
    return s.read()

def make_suggestions(typenames):
    return """<html>
<script type="text/javascript">
var typeids = new Array(%s);
var origlen = typeids.length + 1;
var pause = true;
var timeout = false;
function checktypes () {
    if (!pause && typeids.length > 0) {
        status("Running " + (origlen - typeids.length) 
               + " / " + (origlen - 1));
        CCPEVE.showMarketDetails(typeids.pop());
        timeout = setTimeout(checktypes, 3000);
    }
}
function toggle_pause () {
    if (timeout) {
        clearTimeout(timeout);
        timeout = false;
    }
    if (pause) {
        pause = false;
        timeout = setTimeout(checktypes, 3000);
        status("Running");
    } else {
        pause = true;
        status("Paused");
    }
}
function status (text) {
    var st = document.getElementById("status");
    st.innerHTML = text;
}
</script>
<body>
<h1>Gradient Material Index Uploader</h1>
<p>Please open a market window and select the <b>history</b>
tab. This makes sure that you upload history data. You also
need the <a href="http://eve-metrics.com/downloads">EVE Metrics
downloader</a> installed, set up and running.</p>
<p>The whole process will take  about 13 minutes.</p>
<p><b>Status:</b> <span id="status">Not running</span></p>
<button onClick="toggle_pause()">Check / Pause</button>
</body></html>
""" % (",".join([str(evemetrics.typename2id(typename))
                 for typename in typenames]),)

def do_ftp(files):
    f = file("/home/forcer/.private.txt")
    lines = [line.strip().split(":") for line in f.readlines()]
    pws = dict((s, (u, p)) for (s, u, p) in lines)
    (u, p) = pws['ftp.forcer.de-gmi']
    ftp = ftplib.FTP('www.electusmatari.com')
    ftp.login(u, p)
    for data, fname in files:
        ftp.storbinary("STOR %s" % fname,
                       StringIO.StringIO(data))
    ftp.quit()

if __name__ == '__main__':
    main()
