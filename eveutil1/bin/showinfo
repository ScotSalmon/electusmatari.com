#!/usr/bin/env python

import datetime
from optparse import OptionParser

from lib import evedb
from lib import characters
from lib.util import humane

db = evedb.connect()

# TODO:
# - Anomaly in system:
#   mapDenormalize.solarsystemID .typeID
#   invTypes.typeID .groupID
#   invGroups.groupName = 'Secondary Sun'
# - Show what a given type is used for

INSTA_REDOCK = ['Minmatar Hub',
                'Minmatar Industrial Station',
                'Minmatar Military Station',
                'Minmatar Mining Station',
                'Station (Gallente 1)',
                'Station (Gallente 2)',
                'Station ( Gallente 3 )',
                'Station ( Gallente 4 )',
                'Station ( Gallente 6 )',
                'Station ( Gallente 7 )',
                'Station ( Gallente 8 )',
                'Caldari Food Processing Plant Station',
                'Station (Caldari 1)',
                'Station (Caldari 2)',
                'Station (Caldari 3)',
                'Station ( Caldari 5 )',
                'Station ( Caldari 6 )',
                'Concord Starbase',
                'Amarr Mining Station',
                'Amarr Research Station',
                'Amarr Station Hub',
                'Amarr Station Military',
                'Amarr Trade Post'
                ]

def main():
    parser = OptionParser()
    parser.add_option("-n", "--noapi", dest="api",
                      action="store_false", default=True,
                      help="Do not query the API.")
    (options, args) = parser.parse_args()
    needle = args[0]
    if show_type(needle):
        return
    if needle.isdigit():
        c = db.cursor()
        c.execute("SELECT itemName FROM ccp.invNames WHERE itemID = %s",
                  (needle,))
        if c.rowcount > 0:
            needle = c.fetchone()[0]
    if show_system(needle):
        return
    if show_constellation(needle):
        return
    if show_region(needle):
        return
    if options.api:
        try:
            needle = get_charname(needle)
        except:
            pass
        try:
            get_charid(needle)
            isapi = True
        except:
            isapi = False
        if isapi and show_corp(needle):
            return
        if isapi and show_alliance(needle):
            return
        if isapi and show_character(needle):
            return
    find_name(needle)

#########
# Types #
#########

def show_type(name):
    c = db.cursor()
    if name.isdigit() and int(name) <= 32767 and int(name) >= -32768:
        c.execute("SELECT typeName FROM ccp.invTypes WHERE typeID = %s",
                  (name,))
        if c.rowcount > 0:
            return show_type(c.fetchone()[0])
    if len(name) == 4 and name[0].isalpha() and name[1:].isdigit():
        return show_type("Wormhole %s" % name)
    c.execute("""SELECT t.typeID, groupID, typeName, t.description,
                        mass, volume, capacity, portionsize, r.racename,
                        baseprice, published, marketGroupID,
                        chanceOfDuplicating
                 FROM ccp.invTypes t
                      LEFT JOIN ccp.chrRaces r
                        ON t.raceID = r.raceID
                 WHERE typeName ILIKE %s
              """, (name,))
    if c.rowcount != 1:
        return False
    (typeid, groupid, typename, description, mass, volume, capacity,
     portionsize, racename, baseprice, published, marketgroupid,
     chanceofduplicating) = c.fetchone()

    if published:
        print "%s (typeID %s)" % (typename, typeid)
    else:
        print "%s (typeID %s) - NOT PUBLISHED!" % (typename, typeid)
    print
    print description
    attributes = ["Typeinfo",
                  # ("Radius", humane(radius) + " m"),
                  ("Mass", humane(mass) + " kg"),
                  ("Volume", humane(volume) + " m3"),
                  ("Capacity", humane(capacity) + " m3"),
                  ("Portionsize", humane(portionsize)),
                  ("Race", racename),
                  ("Base price", humane(float(baseprice)) + " ISK"),
                  #("Chance of duplicating", chanceofduplicating),
                  ]

    attributes.extend(type_marketgroups(marketgroupid))
    attributes.extend(type_groups(groupid))
    attributes.extend(type_variations(typeid))
    attributes.extend(type_attributes(typeid))
    attributes.extend(type_effects(typeid))
    attributes.extend(type_materials(typeid))
    attributes.extend(type_blueprint(typeid))

    width = max([len(x[0]) for x in attributes
                 if isinstance(x, tuple) and x[0] is not None])
    for x in attributes:
        if isinstance(x, basestring):
            print
            print x.upper()
            print "-"*len(x)
        else:
            (header, value) = x
            if header:
                print "%s:%s %s" % (header, " "*(width-len(header)), value)
            else:
                print value
    return True

def type_marketgroups(marketgroupid):
    if not marketgroupid:
        return [("Market Groups", "Not available on the market")]
    c = db.cursor()
    groupid = marketgroupid
    groups = []
    while groupid:
        c.execute("""SELECT marketGroupName, parentGroupID
                     FROM ccp.invMarketGroups WHERE marketGroupID = %s
                  """, (groupid,))
        (name, groupid) = c.fetchone()
        groups.append(name)
    groups.reverse()
    return [("Market Groups", " / ".join(groups))]

def type_groups(groupid):
    c = db.cursor()
    c.execute("""SELECT groupName, useBasePrice, allowManufacture,
                        anchored, anchorable, fittableNonSingleton,
                        categoryName
                 FROM ccp.invGroups g INNER JOIN ccp.invCategories c
                      ON g.categoryID = c.categoryID
                 WHERE g.groupID = %s
              """, (groupid,))
    (groupname, usebaseprice, allowmanufacture, anchored, anchorable,
     fittablenonsingleton, categoryname) = c.fetchone()
    return ["Group & Category",
            ("Group", groupname),
            ("Category", categoryname),
            ("Use Base Price", bool(usebaseprice)),
            ("Allow Manufacture", bool(allowmanufacture)),
            ("Anchored", bool(anchored)),
            ("Anchorable", bool(anchorable)),
            ("Fittable Non-Singleton", bool(fittablenonsingleton))]

def type_variations(typeid):
    c = db.cursor()
    c.execute("SELECT parentTypeID FROM ccp.invMetaTypes WHERE typeID = %s",
              (typeid,))
    if c.rowcount > 0:
        parenttypeid = c.fetchone()[0]
    else:
        parenttypeid = typeid
    result = ["Variations"]
    c.execute("SELECT typeName FROM ccp.invTypes WHERE typeID = %s",
              (parenttypeid,))
    result.append((None, "%s (base)" % (c.fetchone()[0],)))
    c.execute("""SELECT t.typeName, mg.metaGroupName
                 FROM ccp.invMetaTypes mt
                      INNER JOIN ccp.invMetaGroups mg
                        ON mt.metaGroupID = mg.metaGroupID
                      INNER JOIN ccp.invTypes t
                        ON mt.typeID = t.typeID
                 WHERE mt.parentTypeID = %s
              """, (parenttypeid,))
    result.extend([(None, "%s (%s)" % (typename, metagroupname))
                   for (typename, metagroupname)
                   in c.fetchall()])
    return result

def type_attributes(typeid):
    c = db.cursor()
    c.execute("""SELECT dat.displayName,
                        dat.attributeName,
                        COALESCE(dta.valueFloat, dta.valueInt,
                                 dat.defaultValue),
                        dac.categoryName,
                        dat.published, dat.stackable, dat.highIsGood,
                        u.unitname, u.displayname
                 FROM ccp.dgmTypeAttributes dta
                      INNER JOIN ccp.dgmAttributeTypes dat
                        ON dta.attributeID = dat.attributeID
                      LEFT JOIN ccp.dgmAttributeCategories dac
                        ON dat.categoryID = dac.categoryID
                      LEFT JOIN ccp.eveUnits u
                        ON dat.unitID = u.unitID
                 WHERE dta.typeID = %s
              """, (typeid,))
    attributes = {}
    for (dname, aname, value, category, published,
         stackable, highisgood, unitname, unit) in c.fetchall():
        if dname is None or dname == '':
            name = aname
        else:
            name = dname
        if category not in attributes:
            attributes[category] = []
        attributes[category].append((name, value, unitname, unit,
                                     published, stackable, highisgood))
    result = []
    for (category, values) in attributes.items():
        if category is None:
            result.append("No Category")
        else:
            result.append(category)
        for (name, value, unitname, unit,
             published, stackable, highisgood) in values:
            comments = []
            if not published:
                comments.append("not published")
            # if stackable:
            #     comments.append("stackable")
            if len(comments) > 0:
                comment = " (%s)" % ", ".join(comments)
            else:
                comment = ""
            result.append((name, eveunit(value, unitname, unit) + comment))
    return result

def type_effects(typeid):
    c = db.cursor()
    c.execute("""SELECT e.effectName,
                        e.isOffensive, e.isAssistance, e.disallowAutoRepeat,
                        e.isWarpSafe, e.published
                 FROM ccp.dgmTypeEffects te
                      INNER JOIN ccp.dgmEffects e
                        ON te.effectID = e.effectID
                 WHERE te.typeID = %s
              """, (typeid,))
    result = ["Effects"]
    for (name, isoffensive, isassistance, disallowautorepeat,
         iswarpsafe, published) in c.fetchall():
        comments = []
        if isoffensive:
            comments.append("offensive")
        if isassistance:
            comments.append("assistance")
        if disallowautorepeat:
            comments.append("no autorepeat")
        if iswarpsafe:
            comments.append("warp safe")
        if len(comments) > 0:
            comment = " (%s)" % ", ".join(comments)
        else:
            comment = ""
        result.append((None, name + comment))
    return result

def type_materials(typeid):
    c = db.cursor()
    c.execute("SELECT mt.typeName, tm.quantity "
              "FROM ccp.invtypematerials tm "
              "     INNER JOIN ccp.invtypes mt "
              "       ON tm.materialtypeid = mt.typeid "
              "WHERE tm.typeid = %s",
              (typeid,))
    if c.rowcount == 0:
        return []
    return ["Reprocessing"] + c.fetchall()

def type_blueprint(typeid):
    c = db.cursor()
    c.execute("SELECT t.typeName "
              "FROM ccp.invBlueprintTypes bt "
              "     INNER JOIN ccp.invTypes t "
              "       ON bt.blueprintTypeID = t.typeID "
              "WHERE productTypeID = %s "
              "  AND blueprintTypeID != productTypeID",
              (typeid,))
    if c.rowcount > 0:
        result = []
        result.append("Blueprints")
        for (bponame,) in c.fetchall():
            result.append((None, bponame))
        return result
    c.execute("""SELECT productionTime, techLevel, researchProductivityTime,
                        researchMaterialTime, researchCopyTime,
                        productivityModifier, wasteFactor,
                        maxProductionLimit
                 FROM ccp.invBlueprintTypes
                 WHERE blueprintTypeID = %s
              """, (typeid,))
    if c.rowcount == 0:
        return ["Blueprint",
                (None, "Not available")]
    (productiontime, techlevel, researchproductivitytime, researchmaterialtime,
     researchcopytime, productivitymodifier, wastefactor,
     maxproductionlimit) = c.fetchone()
    result = ["Blueprint",
              ("Production Time", humane(productiontime)),
              ("Research PE Time", humane(researchproductivitytime)),
              ("Research ME Time", humane(researchmaterialtime)),
              ("Copy Time", humane(researchcopytime)),
              ("Productivity Modifier", humane(productivitymodifier)),
              ("Waste Factor", humane(wastefactor)),
              ("Max Prod. Limit", humane(maxproductionlimit))
              ]
    c.execute("SELECT ra.activityname, rt.typename, rtr.quantity, "
              "       rtr.damageperjob, rtr.recycle "
              "FROM ccp.ramtyperequirements rtr "
              "     INNER JOIN ccp.ramactivities ra "
              "       ON rtr.activityid = ra.activityid "
              "     INNER JOIN ccp.invtypes rt "
              "       ON rtr.requiredtypeid = rt.typeid "
              "WHERE rtr.typeid = %s "
              "ORDER BY rt.typename ASC",
              (typeid,))
    activities = {}
    for (act, reqtype, qty, dpj, recycle) in c.fetchall():
        activities.setdefault(act, [])
        extra = []
        if dpj == 0:
            extra.append("not consumed")
        elif dpj < 1:
            extra.append("%.2f%% damage" % (dpj*100,))
        if recycle == 1:
            extra.append("recycles")
        if len(extra) == 0:
            extra = ""
        else:
            extra = " (" + ", ".join(extra) + ")"
        activities[act].append((reqtype, "%s%s" % (humane(qty), extra)))

    keys = activities.keys()
    keys.sort()
    for key in keys:
        result.append(key)
        result.extend(activities[key])

    # invtypematerials
    # typeID, materialTypeID, quantity
    # typeID, activityID, requiredTypeID, quantity, damagePerJob, recycle
    # c.execute("""SELECT ra.activityName, t.typeName, tam.quantity,
    #                     tam.damagePerJob
    #              FROM typeActivityMaterials tam
    #                   INNER JOIN ramActivities ra
    #                     ON tam.activityID = ra.activityID
    #                   INNER JOIN invTypes t
    #                     ON tam.requiredTypeID = t.typeID
    #              WHERE tam.typeID = %s
    #           """, (typeid,))
    # activities = {}
    # for (act, typename, quantity, damage) in c.fetchall():
    #     if act not in activities:
    #         activities[act] = []
    #     if damage == 1.0:
    #         dam = ""
    #     elif damage == 0.0:
    #         dam = " (not consumed)"
    #     else:
    #         dam = " (%s%% damage)" % humane(damage*100)
    #     activities[act].append((typename, humane(quantity) + dam))
    # for (activity, messages) in activities.items():
    #     result.append(activity)
    #     result.extend(messages)
    return result

###########
# Systems #
###########

def show_system(name):
    c = db.cursor()
    c.execute("""SELECT sys.solarSystemName, sys.solarSystemID,
                        sys.security, sys.radius/1000/150000000 as radius,
                        c.constellationName, r.regionName
-- ,
--                         COALESCE(mwc_sys.wormholeClassID,
--                                  mwc_const.wormholeClassID,
--                                  mwc_reg.wormholeClassID) AS classID
                 FROM ccp.mapSolarSystems sys
                      INNER JOIN ccp.mapConstellations c
                        ON sys.constellationID = c.constellationID
                      INNER JOIN ccp.mapRegions r
                        ON sys.regionID = r.regionID
--                       LEFT JOIN mapWormholeClassLocations mwc_sys
--                         ON sys.solarSystemID = mwc_sys.locationID
--                       LEFT JOIN mapWormholeClassLocations mwc_const
--                         ON sys.constellationID = mwc_const.locationID
--                       LEFT JOIN mapWormholeClassLocations mwc_reg
--                         ON sys.regionID = mwc_reg.locationID
                 WHERE solarSystemName ILIKE %s
              """, (name,))
    if c.rowcount < 1:
        return False
    (sysname, sysid, security, radius, const, region#, sysclass
     ) = c.fetchone()
    sysclass = None

    c.execute("""SELECT COUNT(*)
                 FROM ccp.mapDenormalize d
                      INNER JOIN ccp.invGroups g
                        ON d.groupID = g.groupID
                 WHERE d.solarSystemID = %s AND g.groupName = 'Planet'
              """, (sysid,))
    planets = c.fetchone()[0]

    c.execute("""SELECT t.typeName, COUNT(*)
                 FROM ccp.mapDenormalize d
                      INNER JOIN ccp.invTypes t
                        ON d.typeID = t.typeID
                 WHERE d.solarSystemID = %s
                 GROUP BY t.typeName
              """, (sysid,))
    celestials = dict(c.fetchall())

    c.execute("""SELECT t.typeName
                 FROM ccp.mapDenormalize d
                      INNER JOIN ccp.invTypes t
                        ON d.typeID = t.typeID
                      INNER JOIN ccp.invGroups g
                        ON t.groupID = g.groupID
                 WHERE d.solarSystemID = %s
                   AND g.groupName = 'Secondary Sun'
              """, (sysid,))
    if c.rowcount > 0:
        anomaly = c.fetchone()
    else:
        anomaly = None

    print ("%s (%.1f), %s, %s (SystemID %s)" %
           (sysname, security, const, region, sysid))
    print
    if radius:
        print "Diameter: %s AU" % humane(radius*2)
    if sysclass:
        print "Class:    %s" % sysclass
    if anomaly:
        print "Anomaly:  %s" % anomaly
    print "Planets:  %s" % planets
    print "Belts:    %s ore, %s ice" % (celestials.get('Asteroid Belt', 0),
                                        celestials.get('Ice Field', 0))

    c.execute("SELECT d.itemname, t.typename "
              "FROM ccp.mapdenormalize d "
              "     INNER JOIN ccp.invtypes t ON d.typeid = t.typeid "
              "     INNER JOIN ccp.invgroups g ON t.groupid = g.groupid "
              "WHERE d.solarsystemid = %s "
              "  AND g.groupname = 'Planet' "
              "ORDER BY celestialindex",
              (sysid,))
    if c.rowcount > 0:
        print 
        print "PLANETS"
        print "-------"
        for (planet, typename) in c.fetchall():
            planettype = typename[typename.index("(")+1:-1]
            print "%s (%s)" % (planet, planettype)

    c.execute("""SELECT t.solarSystemName
                 FROM ccp.mapSolarSystemJumps j
                      INNER JOIN ccp.mapSolarSystems t
                        ON j.toSolarSystemID = t.solarSystemID
                 WHERE j.fromSolarSystemID = %s
              """, (sysid,))
    if c.rowcount > 0:
        print
        print "STARGATES"
        print "---------"
        for (neighbor,) in c.fetchall():
            print neighbor
    c.execute("""SELECT st.stationName, st.stationID, t.typeName,
                        st.reprocessingefficiency
                 FROM ccp.staStations st
                      INNER JOIN ccp.invTypes t
                        ON st.stationTypeID = t.typeID
                      LEFT JOIN ccp.mapDenormalize d
                        ON st.stationid = d.itemid
                 WHERE st.solarSystemID = %s
                 ORDER BY d.orbitid ASC
              """, (sysid,))
    if c.rowcount > 0:
        print
        print "STATIONS"
        print "--------"
        for (station, staid, stationtype, refinery) in c.fetchall():
            print station
            if stationtype in INSTA_REDOCK:
                print "  Type: %s (insta-redock)" % stationtype
            else:
                print "  Type: %s (non-insta-redock)" % stationtype
            c.execute("""SELECT s.serviceName
                         FROM ccp.staStations st
                              INNER JOIN ccp.staOperationServices sos
                                ON st.operationID = sos.operationID
                              INNER JOIN ccp.staServices s
                                ON sos.serviceID = s.serviceID
                         WHERE st.stationID = %s
                           AND s.serviceName IN ('Repair Facilities',
                                                 'Factory', 'Laboratory',
                                                 'Cloning')
                      """, (staid,))
            services = [x for (x,) in c.fetchall()]
            if refinery != 0.5:
                services.append("%i%% Refining" % (refinery * 100))
            print "  Services: %s" % ", ".join(services)

            c.execute("""SELECT a.agentID, a.level, a.quality, d.divisionName,
                                at.agentType, a.islocator
                         FROM ccp.agtAgents a
                              INNER JOIN ccp.crpNPCDivisions d
                                ON a.divisionID = d.divisionID
                              INNER JOIN ccp.agtAgentTypes at
                                ON a.agentTypeID = at.agentTypeID
                         WHERE a.locationID = %s
                           AND at.agentType IN ('BasicAgent', 'ResearchAgent',
                                                'GenericStorylineMissionAgent',
                                                'FactionalWarfareAgent',
                                                'EpicArcAgent')
                      """, (staid,))
            agents = []
            for (agtid, level, quality, division, agenttype,
                 islocator) in c.fetchall():
                comments = []
                if islocator != 0:
                    comments.append("locator")
                if agenttype == 'GenericStorylineMissionAgent':
                    comments.append("storyline")
                if agenttype == 'ResearchAgent':
                    comments.append("r&d")
                if agenttype == 'FactionalWarfareAgent':
                    comments.append("fw")
                if agenttype == 'EpicArcAgent':
                    comments.append("epic")
                if len(comments) > 0:
                    comment = " (%s)" % ", ".join(comments)
                else:
                    comment = ""
                agents.append("L%s Q%s %s%s" % (level, quality, division, comment))
            print "  Agents: %s" % "\n          ".join(agents)
            print

    return True

##################
# Constellations #
##################

def show_constellation(name):
    c = db.cursor()

    c.execute("""SELECT c.constellationname, c.constellationid, r.regionname
                 FROM ccp.mapconstellations c
                      INNER JOIN ccp.mapregions r
                        ON c.regionid = r.regionid
                 WHERE c.constellationname ILIKE %s
              """, (name,))
    if c.rowcount == 0:
        return False
    (constname, constid, regionname) = c.fetchone()
    print("%s is a constellation in %s (ConstellationID %s" %
          (constname, regionname, constid))
    print
    print "SYSTEMS"
    print "-------"
    c.execute("""SELECT solarsystemname
                 FROM ccp.mapsolarsystems
                 WHERE constellationid = %s
              """, (constid,))
    for (sysname,) in c.fetchall():
        print sysname
    return True

##########
# Region #
##########

def show_region(name):
    # FIXME:
    # - Constellations and their systems
    return False

###############
# Player Corp #
###############

def show_corp(name):
    charid = get_charid(name)
    if charid == 0:
        return False
    api = characters.api()
    try:
        corp = api.corp.CorporationSheet(corporationID=charid)
    except:
        return False

    print "%s [%s] (CorporationID %s)" % (corp.corporationName, corp.ticker,
                                          corp.corporationID)
    if corp.allianceID:
        allianceName = get_alliancename(corp.allianceID)
        print("Alliance: %s" % allianceName)
    print "Members: %s" % corp.memberCount
    print "CEO: %s" % corp.ceoName
    print "Shares: %s" % corp.shares
    print "HQ: %s" % corp.stationName
    print "Tax: %s%%" % corp.taxRate
    if type(corp.url) == unicode:
        print "URL: %s" % str(corp.url)
    if type(corp.description) == unicode:
        print
        print corp.description.replace("<br>", "\n").encode("utf-8")
    return True

#################
# Alliance Info #
#################

def show_alliance(name):
    api = characters.api()
    a = api.eve.AllianceList()
    for ally in a.alliances:
        if ally.name.lower() == name.lower():
            print ("%s <%s> (AllianceID %s)" %
                   (ally.name, ally.shortName, ally.allianceID))
            print ("%s members in %s corporations"
                   % (humane(ally.memberCount),
                      len(ally.memberCorporations)))
            t = datetime.datetime.utcfromtimestamp(ally.startDate)
            print "Started %s" % t.strftime("%Y-%m-%d %H:%M")
            print
            corplist = []
            for corp in ally.memberCorporations:
                c = api.corp.CorporationSheet(corporationID=corp.corporationID)
                if corp.corporationID == ally.executorCorpID:
                    comment = ", executor"
                else:
                    comment = ""
                corplist.append((c.memberCount,
                                 ("%s [%s], %s members%s"
                                  % (c.corporationName,
                                     c.ticker,
                                     c.memberCount,
                                     comment))))
            corplist.sort()
            corplist.reverse()
            for (members, info) in corplist:
                print info
            return True
    return False

##################
# Character Info #
##################

def show_character(name):
    charid = get_charid(name)
    if charid == 0:
        return False
    api = characters.api()
    try:
        char = api.eve.CharacterInfo(characterID=charid)
    except:
        return False

    print "%s (CharacterID %s)" % (char.characterName,
                                   charid)
    print "Bloodline: %s" % char.bloodline
    print "Race: %s" % char.race
    print "Security: %s" % char.securityStatus
    print "Corporation: %s" % char.corporation
    if hasattr(char, 'allianceID') and char.allianceID:
        print("Alliance: %s" % char.alliance)
    print
    print "Corporation history:"
    for corp in char.employmentHistory:
        names = api.eve.CharacterName(ids=corp.corporationID)
        start = datetime.datetime.utcfromtimestamp(corp.startDate)
        print "- %s (from %s)" % (names.characters[0].name,
                                  start.strftime("%Y-%m-%d %H:%M:%S"))
    return True


############
# Fallback #
############

def find_name(name):
    c = db.cursor()
    c.execute("SELECT typeName FROM ccp.invTypes WHERE typeName ILIKE %s",
              ("%" + name + "%",))
    names = [x for (x,) in c.fetchall()]
    c.execute("SELECT itemName FROM ccp.invNames WHERE itemName ILIKE %s",
              ("%" + name + "%",))
    names.extend([x for (x,) in c.fetchall()])
    names.sort(lambda a, b: cmp(a.lower(), b.lower()))
    for name in names:
        print name

##########
# Helper #
##########

def eveunit(value, unitname, unit):
    if unitname in ('Length', 'Millimeters', 'Milliseconds',
                    'MegaWatts', 'Multiplier', 'Teraflops',
                    'capacitor units', 'Volume', 'Acceleration',
                    'Mass'):
        value = humane(value)
    elif unitname in ('Hitpoints', 'attributePoints', 'Fitting slots',
                      'Drone bandwidth'):
        value = humane(int(value))
    elif unitname == 'Inverse Absolute Percent':
        value = (1 - value)*100
    elif unitname == 'Modifier Relative Percent':
        value = value # Theoretically negative...?
    elif unitname == 'Modifier Percent':
        value = (value - 1)*100
    elif unitname == 'Inversed Modifier Percent':
        if value != 0:
            value = -1*value
    elif unitname == 'typeID':
        c = db.cursor()
        c.execute("SELECT typename FROM ccp.invTypes WHERE typeID = %s",
                  (value,))
        value = c.fetchone()[0]
        unit = ""
    elif unitname == 'attributeID':
        # c = db.cursor()
        # c.execute("SELECT attributeName FROM chrAttributes WHERE attributeID = %s",
        #           (value,))
        # value = c.fetchone()[0]
        # unit = ""
        pass
    elif unitname == 'groupID':
        c = db.cursor()
        c.execute("SELECT groupName FROM ccp.invGroups WHERE groupID = %s",
                  (value,))
        value = c.fetchone()[0]
        unit = ""
    elif unitname is None:
        unit = ""
    if unit == "":
        return str(value)
    else:
        return "%s %s" % (value, unit)

charid_map = {}
def get_charid(name):
    if name not in charid_map:
        api = characters.api()
        n = api.eve.CharacterID(names=name)
        charid_map[name] = n.characters[0].characterID
    return charid_map[name]

charname_map = {}
def get_charname(id):
    if id not in charname_map:
        api = characters.api()
        n = api.eve.CharacterInfo(characterID=id)
        charname_map[id] = n.characterName
    return charname_map[id]

alliancename_map = None
def get_alliancename(id):
    global alliancename_map
    if alliancename_map is None:
        alliancename_map = {}
        api = characters.api()
        al = api.eve.AllianceList()
        for ally in al.alliances:
            alliancename_map[ally.allianceID] = ally.name
    return alliancename_map[id]

main()
