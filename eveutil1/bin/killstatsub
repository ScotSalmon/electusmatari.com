#!/usr/bin/env python

# Read the csv argv[1], substract the kills in argv[2], emit a csv
# like argv[1].
# argv[1] = date,region,1st,2nd,3rd
# argv[2] = datetime,system

import csv
import datetime
import sys

from collections import defaultdict
from lib import evedb

db = evedb.connect()

def main():
    kills = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: 0)))
    for (timestamp, sysname) in csv.reader(file(sys.argv[2])):
        ts = datetime.datetime.strptime(timestamp, "%Y-%m-%d %H:%M")
        hour = ts.hour
        if hour >= 6 and hour < 14:
            shift = 1
        elif hour >= 14 and hour < 22:
            shift = 2
        elif hour >= 22 or hour < 6:
            shift = 3
        else:
            raise RuntimeException, "Bad hour %i" % hour
        datestamp = ts.strftime("%Y-%m-%d")
        kills[datestamp][sysregion(sysname)][shift] += 1
    w = csv.writer(sys.stdout)
    for (timestamp, region, s1, s2, s3) in csv.reader(file(sys.argv[1])):
        ts = datetime.datetime.strptime(timestamp, "%Y-%m-%d")
        s1 = int(s1) - kills[timestamp][region][1]
        s2 = int(s2) - kills[timestamp][region][2]
        s3 = int(s3) - kills[timestamp][region][3]
        w.writerow((timestamp, region, str(s1), str(s2), str(s3)))

sysregion_d = None
def sysregion(sysname):
    global sysregion_d
    if sysregion_d is None:
        c = db.cursor()
        c.execute("SELECT s.solarSystemName, r.regionname "
                  "FROM mapsolarsystems s "
                  "     INNER JOIN mapregions r "
                  "       ON s.regionid = r.regionid")
        sysregion_d = dict(c.fetchall())
    return sysregion_d[sysname]

if __name__ == '__main__':
    main()
