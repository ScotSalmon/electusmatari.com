#!/usr/bin/env python

import pickle
import os


from lib import characters

FILE = "/tmp/forcer/alliances.pickle"

def main():
    new = get_api_alliances()
    old = get_file_alliances()
    show_diff(old, new)
    store_file_alliances(new)

def get_api_alliances():
    api = characters.api()
    ally = api.eve.AllianceList().alliances
    result = {}
    for row in ally:
        corps = [x.corporationID for x in row.memberCorporations]
        result[row.name] = (row.shortName, row.memberCount, corps)
    return result

def get_file_alliances():
    if not os.access(FILE, os.F_OK):
        return {}
    else:
        return pickle.load(file(FILE))

def store_file_alliances(data):
    if os.access(FILE, os.F_OK):
        os.rename(FILE, FILE + "~")
    pickle.dump(data, file(FILE, "w"))

def get_names(data):
    l = [(size, name) for (name, (ticker, size, corps)) in data.items()]
    l.sort()
    l.reverse()
    return [name for (size, name) in l]

def get_id2name(l):
    api = characters.api()
    iddict = {}
    for data in l:
        for (_, _, corps) in data.values():
            for corpid in corps:
                iddict[corpid] = True
    ids = [str(x) for x in iddict.keys()]
    result = {}
    while len(ids) > 0:
        this = ids[:250]
        ids = ids[250:]
        result.update((entry.characterID, entry.name)
                      for entry
                      in api.eve.CharacterName(ids=",".join(this)).characters)
    return result

def show_diff(old, new):
    id2name = get_id2name([old, new])
    first = True
    for name in get_names(new):
        (_, old_size, old_corps) = old.get(name, (0, 0, []))
        (ticker, new_size, new_corps) = new.get(name, (0, 0, []))
        old_corps.sort()
        new_corps.sort()
        if new_size == 0:
            if not first:
                print
            first = False
            print "%s <%s> - disbanded, %i corps, %i pilots" % (name, ticker, len(old_corps), old_size)
        elif old_size == 0:
            if not first:
                print
            first = False
            print "%s <%s> - new, %i corps, %i pilots" % (name, ticker, len(new_corps), new_size)
        elif new_corps != old_corps or abs((new_size / float(old_size)) - 1) > 0.1:
            if not first:
                print
            first = False
            print "%s <%s> - %i corps (%+i), %i pilots (%+i)" % (name, ticker,
                                                                 len(new_corps),
                                                                 len(new_corps) - len(old_corps),
                                                                 new_size,
                                                                 new_size - old_size)

        corps = []
        for oldcorp in old_corps:
            if oldcorp not in new_corps:
                corps.append(id2name[oldcorp])
        if len(corps) > 0:
            print "- %s" % ", ".join([str(x) for x in corps])
        corps = []
        for newcorp in new_corps:
            if newcorp not in old_corps:
                corps.append(id2name[newcorp])
        if len(corps) > 0:
            print "+ %s" % ", ".join([str(x) for x in corps])

if __name__ == "__main__":
    main()
