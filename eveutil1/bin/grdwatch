#!/usr/bin/env python

import collections
import csv
import emcom
import emcom.gmi
import datetime
import optparse

import psycopg2

from lib import characters, cache
from lib import evedb
from lib import util

GOOD_FACTIONS = ['Minmatar Republic',
                 'Thukker Tribe',
                 'Gallente Federation',
                 'The Servant Sisters of EVE',
                 'ORE',
                 'CONCORD Assembly',
                 'Jove Empire',
                 'The InterBus',
                 'The Society',
                 # 'Caldari State',
                 ]

def main():
    parser = optparse.OptionParser(usage="%prog [OPTIONS]",
                                   version="%prog 1.0")
    parser.add_option("--after", dest="after_date", metavar="DATE",
                      help="Ignore entries before DATE",
                      default=None)
    parser.add_option("--before", dest="before_date", metavar="DATE",
                      help="Ignore entries after DATE",
                      default=None)
    parser.add_option("-v", dest="verbose", action="store_true",
                      help="Print journal log",
                      default=False)
    (options, args) = parser.parse_args()
    if options.after_date is not None:
        start = datetime.datetime.strptime(options.after_date, "%Y-%m-%d")
    else:
        start = datetime.datetime.strptime("1990-01-01", "%Y-%m-%d")
    if options.before_date is not None:
        end = datetime.datetime.strptime(options.before_date, "%Y-%m-%d")
    else:
        end = datetime.datetime.utcnow() + datetime.timedelta(days=1)
   
    if len(args) == 0:
        global_report(start, end)
    else:
        character_report(args[0], start, end, options.verbose)

def global_report(start, end):
    db2 = psycopg2.connect("dbname=eve")
    c = db2.cursor()
    # c.execute("SELECT SUM(CASE WHEN transactiontype = 'sell' "
    #           "                THEN price*quantity "
    #           "                ELSE -1*price*quantity "
    #           "           END)/1000/1000 AS vol, "
    #           "       charactername "
    #           "FROM grd_transactions "
    #           "WHERE date >= %s "
    #           "  AND date < %s "
    #           "  AND account in (1000, 1001, 1002) "
    #           "GROUP BY charactername "
    #           "ORDER BY vol DESC ",
    #           (start, end))
    # print "Transaction Sum"
    # print "==============="
    # for vol, name in c.fetchall():
    #     print "%10s M %s" % (util.humane(vol), name)
    # print
    c.execute("SELECT SUM(amount)/1000/1000 AS vol, "
              "       (CASE WHEN reftypeid IN (10, 42, 46, 54, 77, 80, 81, 84) "
              "               THEN ownername1 "
              "             WHEN reftypeid = 79 AND ownername2 != 'Gradient' "
              "               THEN ownername1 "
              "             WHEN reftypeid IN (2, 17, 33, 34, 85) "
              "               THEN ownername2 "
              "             WHEN reftypeid IN (87, 88) "
              "               THEN argname1 "
              "             WHEN reftypeid = 37 AND ownername2 != 'Gradient' "
              "               THEN argname1 "
              "             ELSE NULL "
              "        END) as charactername "
              "FROM grd_journal "
              "WHERE date >= %s "
              "  AND date < %s "
              "  AND account in (1000, 1001, 1002) "
              "GROUP BY charactername "
              "ORDER BY vol DESC ",
              (start, end))
    print "Negative Journal Sum"
    print "===================="
    for vol, name in c.fetchall():
        if name and vol < 0:
            print "%10s M %s" % (util.humane(vol), name)
    print
    report_missions(c, start, end)

def report_missions(c, start, end, charname=None):
    print "Unethical Missions"
    print "=================="
    c.execute("SELECT date, "
              "       argname1 as agent, "
              "       ownername2 as pilot "
              "FROM grd_journal "
              "WHERE reftypeid = 33 "
              "  AND date >= %s "
              "  AND date < %s "
              "ORDER BY date ASC "
              , (start, end))
    if charname:
        for date, agent, pilot in c.fetchall():
            if pilot == charname:
                faction = agent_faction(agent)
                if faction not in GOOD_FACTIONS:
                    print "%s %s, %s" % (date,
                                         faction,
                                         agent)
    else:
        badmissions = collections.defaultdict(lambda: 0)
        for date, agent, pilot in c.fetchall():
            faction = agent_faction(agent)
            if faction not in GOOD_FACTIONS:
                badmissions[pilot] += 1
        badmissions = badmissions.items()
        badmissions.sort()
        for (pilot, count) in badmissions:
            print "%5i %s" % (count, pilot)
        print

def character_report(charname, start, end, do_journal):
    db2 = psycopg2.connect("dbname=eve")
    c = db2.cursor()
    c.execute("SELECT SUM(CASE WHEN transactiontype = 'sell' "
              "                THEN price*quantity "
              "                ELSE -1*price*quantity "
              "           END)/1000/1000 AS vol, "
              "       SUM(quantity), "
              "       typename "
              "FROM grd_transactions "
              "WHERE date >= %s "
              "  AND date < %s "
              "  AND account in (1000, 1001, 1002) "
              "  AND charactername = %s "
              "GROUP BY typename "
              "ORDER BY vol DESC",
              (start, end, charname))
    print "Transaction Sum"
    print "==============="
    for vol, qty, name in c.fetchall():
        print "%10s M %sx %s" % (util.humane(vol), util.humane(qty), name)
    print
    c.execute("SELECT SUM(amount)/1000/1000 AS vol, "
              "       reftypeid "
              "FROM grd_journal "
              "WHERE date >= %s "
              "  AND date < %s "
              "  AND account in (1000, 1001, 1002) "
              "  AND (CASE WHEN reftypeid IN (10, 42, 46, 54, 77, 80, 81, 84) "
              "              THEN ownername1 "
              "            WHEN reftypeid = 79 AND ownername2 != 'Gradient' "
              "              THEN ownername1 "
              "            WHEN reftypeid IN (2, 17, 33, 34, 85) "
              "              THEN ownername2 "
              "            WHEN reftypeid IN (87, 88) "
              "              THEN argname1 "
              "            WHEN reftypeid = 37 AND ownername2 != 'Gradient' "
              "              THEN argname1 "
              "            ELSE NULL "
              "       END) = %s "
              "GROUP BY reftypeid "
              "ORDER BY vol DESC",
              (start, end, charname))
    print "Journal Sum"
    print "==========="
    for vol, name in c.fetchall():
        if name:
            print "%10s M %s" % (util.humane(vol), reftypename(name))

    c.execute("SELECT date, quantity, typename, price, stationname, "
              "       transactiontype "
              "FROM grd_transactions "
              "WHERE date >= %s "
              "  AND date < %s "
              "  AND account in (1000, 1001, 1002) "
              "  AND charactername = %s "
              "ORDER BY date DESC",
              (start, end, charname))
    pricelist = emcom.gmi.current()
    pricelist.update(dict((row[0], float(row[1])) for row
                          in csv.reader(file("/home/forcer/public_html/eve/grd-pricelist.txt"))))
    print
    print "Profit"
    print "======"
    for (date, qty, typename, price, sta, transtype) in c.fetchall():
        indexprice = pricelist.get(typename, 0)
        if transtype == 'sell':
            profit = ((price - indexprice)/float(price))*100
        else:
            if indexprice == 0:
                profit = 1
            else:
                profit = ((indexprice - price)/float(indexprice))*100
        print "%s %15s %6.2f%% %s x%s (%s)" % (
            date.strftime("%Y-%m-%d %H:%M"),
            emcom.humane(price * qty),
            profit,
            typename,
            qty,
            transtype)
    if do_journal:
        c.execute("SELECT date, ownername1, ownername2, argname1, reason, "
                  "       amount/1000/1000, reftypeid "
                  "FROM grd_journal "
                  "WHERE date >= %s "
                  "  AND date < %s "
                  "  AND account in (1000, 1001, 1002) "
                  "  AND (CASE WHEN reftypeid IN (10, 42, 46, 54, 77, 80, 81, 84) "
                  "              THEN ownername1 "
                  "            WHEN reftypeid = 79 AND ownername2 != 'Gradient' "
                  "              THEN ownername1 "
                  "            WHEN reftypeid IN (2, 17, 33, 34, 85) "
                  "              THEN ownername2 "
                  "            WHEN reftypeid IN (87, 88) "
                  "              THEN argname1 "
                  "            WHEN reftypeid = 37 AND ownername2 != 'Gradient' "
                  "              THEN argname1 "
                  "            ELSE NULL "
                  "       END) = %s "
                  "ORDER BY amount DESC",
                  (start, end, charname))
        print
        print "Journal Entries"
        print "==============="
        for (date, owner1, owner2, arg1,
             reason, amount, reftypeid) in c.fetchall():
            print "%s %10s M %s" % (date.strftime("%Y-%m-%d %H:%M"),
                                    util.humane(amount),
                                    reftypename(reftypeid))
            print "                              Owner1: %s" % owner1
            print "                              Owner2: %s" % owner2
            print "                              Arg1: %s" % arg1
            print "                              Reason: %s" % reason
    print
    report_missions(c, start, end, charname)

reftypes = None
def reftypename(reftypeid):
   global reftypes
   if reftypes is None:
      try:
         api = characters.api(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
         rt = api.eve.RefTypes()
         reftypes = dict((x.refTypeID, x.refTypeName) for x in rt.refTypes)
      except:
         reftypes = {}
   return reftypes.get(reftypeid, str(reftypeid))

agtfaction = None
def agent_faction(agentname):
   global agtfaction
   if agtfaction is None:
      db = evedb.connect()
      c = db.cursor()
      c.execute("SELECT an.itemname, f.factionname "
                "FROM ccp.agtagents a "
                "     INNER JOIN ccp.invnames an "
                "       ON a.agentid = an.itemid "
                "     INNER JOIN ccp.crpnpccorporations c "
                "       ON a.corporationid = c.corporationid "
                "     INNER JOIN ccp.chrfactions f "
                "       ON c.factionid = f.factionid")
      agtfaction = dict(c.fetchall())
   return agtfaction[agentname]

if __name__ == '__main__':
    main()
