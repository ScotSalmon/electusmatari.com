#!/usr/bin/env python

import optparse
import os
import sys

from lib import machonet

BASEDIR = "/space/private/forcer/EVE/clients/"

def main():
    parser = optparse.OptionParser(usage="%prog [OPTIONS] itemname",
                                   version="%prog 0.9")
    parser.add_option("-d", "--data", dest="datadir", metavar="DIRECTORY",
                      help="The client data directory",
                      default=None)
    (options, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("Please specify a typename.")
    if options.datadir is None:
        directories = [extractversion(d) for d in os.listdir(BASEDIR)]
        directories.sort()
        options.datadir = os.path.join(BASEDIR, directories[-1][1])
    bulk = machonet.load(options.datadir)
    invtypes = bulk['config.BulkData.types'].table()
    dgmattribs = bulk['config.BulkData.dgmattribs'].table()
    dgmtypeattribs = bulk['config.BulkData.dgmtypeattribs'].table()
    
    typeinfo = None
    for t in invtypes:
        if t.typeName.lower() == args[0].lower():
            typeinfo = t
    if typeinfo is None:
        for t in invtypes:
            if args[0].lower() in t.typeName.lower():
                print t.typeName
        return
    attrname = {}
    for attr in dgmattribs:
        attrname[attr.attributeID] = attr.attributeName
    attribs = []
    for attr in dgmtypeattribs:
        if attr.typeID == typeinfo.typeID:
            attribs.append((attrname[attr.attributeID], attr.value))
    
    attribs.sort(lambda a, b: cmp(a[0].lower(), b[0].lower()))

    print "%s (typeID %s)%s" % (typeinfo.typeName,
                                typeinfo.typeID,
                                (" - NOT PUBLISHED"
                                 if not typeinfo.published
                                 else ""))
    print typeinfo.description.encode("utf-8")
    print
    for k in ['mass', 'volume', 'capacity', 'portionSize']:
        print "%s: %s" % (k, getattr(typeinfo, k))
    for (k, v) in attribs:
        print "%s: %s" % (k, v)

def extractversion(dirname):
    if " " in dirname:
        version = dirname[:dirname.index(" ")]
    else:
        version = dirname
    return (int(version), dirname)

if __name__ == '__main__':
    main()
