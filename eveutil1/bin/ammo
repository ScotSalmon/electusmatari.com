#!/usr/bin/env python

import getopt
import sys

t1ammo = [# Name               Em  Th  Ki  Ex
          ("EMP",               9,  0,  1,  2),
          ("Phased Plasma",     0, 10,  2,  0),
          ("Fusion",            0,  0,  2, 10),
          ("Titanium Sabot",    0,  0,  6,  2),
          ("Depleted Uranium",  0,  3,  2,  3),
          ("Proton",            3,  0,  2,  0),
          ("Nuclear",           0,  0,  1,  4),
          ("Carbonized Lead",   0,  0,  4,  1)
#           ("EMP",              5, 0, 2, 4),
#           ("Phased Plasma",    0, 8, 2, 0),
#           ("Fusion",           0, 0, 2, 8),
#           ("Titanium Sabot",   0, 0, 6, 3),
#           ("Depleted Uranium", 0, 2, 3, 3),
#           ("Proton",           3, 0, 4, 0),
#           ("Nuclear",          0, 0, 2, 5),
#           ("Carbonized Lead",  0, 0, 3, 3)
          ]
t2ammo = [("Barrage",          0, 0, 5, 6),
          ("Hail",             0, 0, 3, 11),
          ("Tremor",           0, 0, 3, 5),
          ("Quake",            0, 0, 5, 9)
          ]

def_res = {"armor":           (0.50, 0.35, 0.25, 0.10),
           "shield":          (0.00, 0.20, 0.40, 0.50),
           "amarr":           (0.50, 0.35, 0.25, 0.20),
           "caldari":         (0.50, 0.45, 0.25, 0.10),
           "gallente":        (0.50, 0.35, 0.35, 0.10),
           "minmatar":        (0.60, 0.35, 0.25, 0.10),
           "amarrt2":         (0.50, 0.35, 0.625, 0.80),
           "caldarit2":       (0.00, 0.80, 0.70, 0.50),
           "gallentet2":      (0.50, 0.675, 0.8375, 0.10),
           "minmatart2":      (0.75, 0.60, 0.40, 0.50)}

def main():
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:],
                                       "smlxfr:",
                                       ["small", "medium",
                                        "large", "xlarge",
                                        "faction", "resist=",
                                        "help"])
    except getopt.GetoptError, err:
        print str(err)
        usage()
        sys.exit(1)
    size = "S"
    multiplier = 1
    faction = False
    res = (0, 0, 0, 0)
    for opt, arg in opts:
        if opt in ("-s", "--small"):
            size = "S"
            multiplier = 1
        elif opt in ("-m", "--medium"):
            size = "M"
            multiplier = 2
        elif opt in ("-l", "--large"):
            size = "L"
            multiplier = 4
        elif opt in ("-x", "--xlarge"):
            size = "XL"
            multiplier = 8
        elif opt in ("-f", "--faction"):
            faction = True
        elif opt in ("-r", "--resist"):
            arg.lower()
            if def_res.has_key(arg):
                res = def_res[arg]
        elif opt == "--help":
            usage()
            return
    ammo(parse_resists(res, args), size, multiplier, faction)

def usage():
    print """\
usage: ammo [OPTIONS] <resistspec>

Options:
  -s, --small    Use small rounds
  -m, --medium   Use medium rounds
  -l, --large    Use large rounds
  -x, --xlarge   Use X-large rounds
  -f, --faction  Use faction ammo
  -r, --resist=X Use X as base resist.

Possible base resists:
  armor shield
  amarr caldari gallente minmatar
  amarrt2 caldarit2 gallentet2 minmatart2

Resistspec looks like this:
  em+20%+2*15% ex+50%+3*20%+10%

Add a percentage with ":" instead of with "+" to prevent stacking
penalty calculation.
"""

def ammo(resists, size, multiplier, faction):
    rounds = get_rounds(multiplier, faction)
    (em_r, th_r, ki_r, ex_r) = resists
    print "Damage amounts for %s ammo." % size
    print ("Resists are %.1f%% EM, %.1f%% thermal, %.1f%% kinetic and %.1f%% explosive."
           % (em_r*100, th_r*100, ki_r*100, ex_r*100))
    damage = []
    for (name, em, th, ki, ex) in rounds:
        damage.append((name,
                       (em*(1-em_r) + th*(1-th_r)
                        + ki*(1-ki_r) + ex*(1-ex_r))))
    damage.sort(lambda a, b: cmp(b[1], a[1]))
    for (name, dam) in damage:
        print "%5.1f %s" % (dam, name)

def parse_resists(base, args):
    (em_base, th_base, ki_base, ex_base) = base
    em = [(em_base, False)]
    th = [(th_base, False)]
    ki = [(ki_base, False)]
    ex = [(ex_base, False)]
    for spec in args:
        (name, summands) = parse_spec(spec)
        if name == "em":
            em.extend(summands)
        elif name == "t":
            th.extend(summands)
        elif name == "k":
            ki.extend(summands)
        elif name == "ex":
            ex.extend(summands)
        elif name == "all":
            em.extend(summands)
            th.extend(summands)
            ki.extend(summands)
            ex.extend(summands)
    return (resistsum(em),
            resistsum(th),
            resistsum(ki),
            resistsum(ex))

def get_rounds(multiplier, faction):
    rounds = []
    if faction:
        rounds = [("Republic Fleet " + name,
                   em*1.15, th*1.15, ki*1.15, ex*1.15)
                  for (name, em, th, ki, ex) in t1ammo]
    else:
        rounds = t1ammo[:] # copy
    rounds.extend(t2ammo)
    rounds = [(name,
               em*multiplier, th*multiplier, ki*multiplier, ex*multiplier)
              for (name, em, th, ki, ex) in rounds]
    return rounds

def parse_spec(spec):
    l = split_spec(spec)
    name = resist_shorthand(l[0][0])
    summands = l[1:]
    result = []
    for (summand, is_stacked) in summands:
        if "*" in summand:
            (multiplier, percentage) = summand.split("*")
            multiplier = int(multiplier)
        else:
            (multiplier, percentage) = (1, summand)
        multiplier = int(multiplier)
        if percentage.endswith("%"):
            percentage = float(percentage[:-1])
            percentage = percentage/100
        else:
            percentage = float(percentage)
        result.extend([(percentage, is_stacked)]*multiplier)
    return (name, result)

def split_spec(spec):
    l = [summands.split(":") for summands in spec.split("+")]
    result = []
    for summand in spec.split("+"):
        colons = summand.split(":")
        result.append((colons[0], True))
        result.extend([(value, False) for value in colons[1:]])
    return result

def resistsum(summands):
    resist = 0
    summands.sort(lambda a, b: cmp(b[0], a[0]))
    i = 1
    for (percentage, is_stacked) in summands:
        if is_stacked:
            resist = resist + (1-resist)*(percentage*stacking(i))
            i = i + 1
        else:
            resist = resist + (1-resist)*percentage
    return resist

def stacking(i):
    return 0.5 ** (( (i-1) / 2.22292081) ** 2)

def resist_shorthand(res):
    res = res.lower()
    if res.startswith("em"):
        res = "em"
    elif res.startswith("t"):
        res = "t"
    elif res.startswith("k"):
        res = "k"
    elif res.startswith("ex"):
        res = "ex"
    elif res.startswith("a"):
        res = "all"
    else:
        raise RuntimeError, "Unknown resist", res
    return res

main()
