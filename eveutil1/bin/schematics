#!/usr/bin/env python

import sys

from lib import machonet

def main():
    cache = machonet.load(sys.argv[1])
    schematics = cache['config.BulkData.schematics'].table()
    schematicname = dict((x["schematicID"], x["schematicName"])
                         for x in schematics)
    stypemap = cache['config.BulkData.schematicstypemap'].table()
    spinmap = cache['config.BulkData.schematicspinmap'].table()
    invtypes = cache['config.BulkData.types'].table()
    typename = dict((x["typeID"], x["typeName"]) for x in invtypes)
    pins = {}
    for row in spinmap:
        sname = schematicname[row["schematicID"]]
        pins.setdefault(sname, [])
        pins[sname].append(typename[row["pinTypeID"]])
    cycletimes = dict((schematicname[x["schematicID"]], x["cycleTime"])
                      for x in schematics)
    schematics = [(typename.get(x["typeID"], str(x["typeID"])),
                   schematicname.get(x["schematicID"], str(x["schematicID"])),
                   x["isInput"],
                   x["quantity"]
                   )
                  for x in stypemap
                  if x["typeID"] in typename
                  and x["schematicID"] in schematicname]
    gendot(schematics, pins, cycletimes)
    gentxt(schematics, pins, cycletimes)

def gentxt(schematics, pins, cycletimes):
    f = file("/home/forcer/schematics.txt", "w")
    inputs = {}
    outputs = {}
    for (tname, sname, isinput, qty) in schematics:
        if isinput:
            inputs.setdefault(sname, [])
            inputs[sname].append((tname, qty))
        else:
            outputs.setdefault(sname, [])
            outputs[sname].append((tname, qty))
    names = uniq(inputs.keys() + outputs.keys())
    names.sort()
    for name in names:
        f.write("[b]%s[/b]\n" % name)
        f.write("Cycletime: %s\n" % cycletimes[name])
        for (tname, qty) in outputs[name]:
            f.write("Produces: %sx %s\n" % (qty, tname))
        f.write("Requires:\n")
        for (tname, qty) in inputs[name]:
            f.write("- %sx %s\n" % (qty, tname))
        print

def uniq(l):
    return dict((x, True) for x in l).keys()

def gendot(schematics, pins, cycletimes):
    snodes = {}
    tnodes = {}
    i = 0
    f = file("/home/forcer/schematics.dot", "w")
    f.write("digraph schematics {\n")
    for tname in uniq([x[0] for x in schematics]):
        nodename = "n%i" % i
        f.write('  %s [shape=box, label="%s"];\n' % (nodename, tname))
        tnodes[tname] = nodename
        i += 1
    for sname in uniq([x[1] for x in schematics]):
        nodename = "n%i" % i
        f.write('  %s [shape=ellipse, label="%s\\n%s\\n%ss"];\n' % (
                nodename,
                "\\n".join(pins[sname]),
                sname,
                cycletimes[sname]))
        snodes[sname] = nodename
        i += 1
    output = dict((sname, tname) for (tname, sname, isinput, qty) in schematics
                  if not isinput)
    for tname, sname, isinput, qty in schematics:
        if isinput:
            f.write('  %s -> %s [label="%sx"];\n' % (
                    tnodes[tname],
                    snodes[sname],
                    qty))
        else:
            f.write('  %s -> %s [label="%sx"];\n' % (
                    snodes[sname],
                    tnodes[tname],
                    qty))
    f.write("}\n")
    f.close()


if __name__ == '__main__':
    main()
