#!/usr/bin/env python

import csv
import datetime
import gdbm
import gzip
import os
import pickle
import psycopg2
import re
import sys
import urllib

from optparse import OptionParser
from xml.etree import ElementTree

from lib import characters, eveapi, cache
from lib import killinfo
from lib.util import humane, showinfo

KMDIR = "/home/forcer/Depot/killboards/militia/"

def main():
    parser = OptionParser(usage="%prog [OPTIONS]",
                          version="%prog 1.0")
    parser.add_option("--check", dest="check", action="store_true",
                      default=False,
                      help="Check for new militia corps")
    parser.add_option("--csv", dest="csv", action="store_true",
                      default=False,
                      help="Emit a CSV with intel information")
    parser.add_option("--html", dest="html", action="store_true",
                      default=False,
                      help="Emit a HTML file with intel information")
    parser.add_option("--info", dest="info", action="store_true",
                      default=False,
                      help="Print some statistics")
    parser.add_option("-l", dest="dolist", action="store_true",
                      default=False,
                      help="List active corporations")
    parser.add_option("--joined", dest="joined", default=None,
                      help="Mark a corp as having joined the Amarr militia")
    parser.add_option("--left", dest="left", default=None,
                      help="Mark a corp as having left the Amarr militia")
    (options, args) = parser.parse_args()

    if options.check:
        check()
    elif options.csv:
        emit_csv(corp_data())
    elif options.html:
        emit_html(corp_data())
    elif options.joined:
        joined(options.joined)
    elif options.left:
        left(options.left)
    elif options.dolist:
        d = Data()
        names = d.corpnames(active=True)
        names.sort(lambda a, b: cmp(a.lower(), b.lower()))
        for n in names:
            print n
    elif options.info:
        d = Data()
        total = len(d.corpnames())
        active = len(d.corpnames(active=True))
        inactive = total - active
        active_14d = len(d.corpnames(active=14))
        print "Total:    %i" % total
        print "Inactive: %i" % inactive
        print "Active:   %i" % active
        print "14d act:  %i" % active_14d

def check():
    d = Data()
    for (dirpath, dirnames, filenames) in os.walk(KMDIR):
        for f in filenames:
            kmfile = os.path.join(dirpath, f)
            if d.is_knownkill(kmfile):
                continue
            try:
                ki = killinfo.load(file(kmfile))
            except:
                continue
            if ki.victim.get("Faction", "") == 'Amarr Empire':
                d.addcorp(ki.victim["Corp"], ki.timestamp)
            for inv in ki.involved:
                if inv.get("Faction", "") == 'Amarr Empire':
                    d.addcorp(inv["Corp"], ki.timestamp)
            d.add_knownkill(kmfile)
    d.save()

def corp_data():
    sys.stderr.write("Getting FW API data ... ")
    (fwkranks, fwvpranks) = get_fwranks()
    sys.stderr.write("ok.\n")
    sys.stderr.write("Getting Amarr Killboard ranks ... ")
    marykbranks = get_kbranks('http://www.amarr-empire.net/killboard/?a=alliance_detail&all_id=499&view=corp_kills')
    sys.stderr.write("ok.\n")
    sys.stderr.write("Getting Minmatar Killboard ranks ... ")
    matarikbranks = get_kbranks('http://www.minmatar-militia.org/kb/?a=alliance_detail&all_id=79&view=corp_kills')
    sys.stderr.write("ok.\n")
    sys.stderr.write("Getting Electus Matari standings ... ")
    standings = get_standings()
    sys.stderr.write("ok.\n")


    conn = psycopg2.connect("dbname=eve")
    c = conn.cursor()
    c.execute("""
SELECT cn.name
FROM ki_corp c
     INNER JOIN ki_name cn ON c.corp_id = cn.id
     INNER JOIN ki_name fn ON c.faction_id = fn.id
WHERE fn.name = 'Amarr Empire'
""")
    corpnames = [name for (name,) in c.fetchall()]
    corpnames.sort(lambda a, b: cmp(a.lower(), b.lower()))

    api = characters.api(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    sys.stderr.write("Getting %i CorporationIDs ... " % len(corpnames))
    corpids = dict((x.name, x.characterID)
                   for x in
                   api.eve.CharacterID(names=",".join(corpnames)).characters)
    sys.stderr.write("ok.\n")

    i = 1
    data = []
    for corp in corpnames:
        sys.stderr.write("\rGetting %i / %i Corporation Sheets ... " %
                         (i, len(corpnames)))
        i += 1
        st = standings.get(corp, 0)
        if corp in corpids:
            corpid = corpids[corp]
            try:
                cs = api.corp.CorporationSheet(corporationID=corpids[corp])
            except eveapi.Error:
                sys.stderr.write("Error for corp %s\n" % corp)
                continue
            size = cs.memberCount
        else:
            corpid = 0
            size = 0
        
        data.append((corp, corpid, st, size,
                     datetime.datetime.now(),
                     matarikbranks.get(corp, "0"),
                     marykbranks.get(corp, "0"),
                     fwkranks.get(corp, "0"),
                     fwvpranks.get(corp, "0")))
    sys.stderr.write("ok.\n")
    return data

def emit_csv(data):
    out = csv.writer(sys.stdout)
    for (corp, corpid, st, size, lastseen,
         matarikb, marykb, fwk, fwvp) in data:
        out.writerow([corp, corpid, st, size,
                      lastseen.strftime("%Y-%m-%d"),
                      matarikb, marykb, fwk, fwvp])

def emit_html(data):
    out = sys.stdout
    out.write("<html><head><title>Amarr Militia Intel from %s</title>" %
              datetime.datetime.utcnow().strftime("%Y-%m-%d"))
    out.write('<script type="text/javascript" src="js/jquery.js"></script>'
              '<script type="text/javascript" src="js/jquery.tablesorter.js">'
              '</script>'
              '<script type="text/javascript">'
              '$(document).ready(function() {'
              "  $('table').tablesorter({widgets: ['zebra'],"
              "                          1: 'digit',"
              "                          2: 'digit',"
              "                          3: 'digit',"
              "                          5: 'digit',"
              "                          6: 'digit',"
              "                          7: 'digit',"
              "                          8: 'digit',"
              "                         });"
              '});'
              '</script>')
    out.write('<style type="text/css">\n'
              'table {\n'
              '  border-collapse: collapse;\n'
              '}\n'
              'td, th {\n'
              '  padding: 0.1em 0.3em;\n'
              '  white-space: nowrap;\n'
              '}\n'
              'td.numeric {\n'
              '  text-align: right\n'
              '}\n'
              '.empty {\n'
              '  color: white;\n'
              '}\n'
              '</style>\n')
    out.write('</head><body>')
    out.write('<table border="1">'
              '<thead>\n'
              '<tr><th>Corp</th><th>New</th><th>Standing</th>'
              '<th>Size</th><th>Last Seen</th><th>MatarKB</th>'
              '<th>MaryKB</th><th>FWK</th><th>FWVP</th></tr>\n'
              '</thead>\n'
              '<tbody>')
    for (corp, corpid, st, size, lastseen,
         matarikb, marykb, fwk, fwvp) in data:
        out.write('<tr>'
                  '<td>%(showinfo)s'
                  '</td>'
                  '<td>%(newstanding)s</td>'
                  '<td>%(standing)s</td>'
                  '<td class="numeric">%(size)s</td>'
                  '<td>%(lastseen)s</td>'
                  '<td class="numeric">%(matarikb)s</td>'
                  '<td class="numeric">%(marykb)s</td>'
                  '<td class="numeric">%(fwk)s</td>'
                  '<td class="numeric">%(fwvp)s</td>'
                  '</tr>\n'
                  % {'showinfo': showinfo(2, corpid, corp),
                     'newstanding': "",
                     'standing': humane_empty(int(st)),
                     'size': size, # humane_empty(size),
                     'lastseen': lastseen.strftime("%Y-%m-%d"),
                     'matarikb': humane_empty(int(matarikb)),
                     'marykb': humane_empty(int(marykb)),
                     'fwk': humane_empty(int(fwk)),
                     'fwvp': humane_empty(int(fwvp))
                     })
    known = sum(entry[3] for entry in data)
    api = characters.api(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    fws = api.eve.FacWarStats()
    size = [x.pilots for x in fws.factions
            if x.factionName == 'Amarr Empire'][0]
    out.write('</tbody><tfoot>'
              '<tr><td></td><td></td><td colspan="6">%s / %s (%.1f%%)</td>'
              '</tr></tfoot>' % (humane(known),
                                humane(size),
                                ((known/float(size))*100)))
    out.write("</table></body></html>")

def joined(name):
    api = characters.api(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    res = api.eve.CharacterID(names=name)
    if len(res.characters) != 1:
        sys.stderr.write("Corporation %s not found.\n" % name)
    else:
        d = Data()
        d.addcorp(str(res.characters[0].name),
                  datetime.datetime.utcnow())
        d.save()

def left(name):
    d = Data()
    if not d.is_knowncorp(name):
        sys.stderr.write("Corporation %s not known.\n" % name)
    else:
        d.set_corp_activity(name, False)
        d.save()

def get_fwranks():
    api = characters.api(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    fwts = api.eve.FacWarTopStats()
    killranks = dict((name, num+1)
                     for (num, name)
                     in enumerate([x.corporationName for x in
                                   fwts.corporations.KillsLastWeek]))
    vpranks = dict((name, num+1)
                   for (num, name)
                   in enumerate([x.corporationName for x in
                                 fwts.corporations.VictoryPointsLastWeek]))
    return killranks, vpranks

CORP_RX = re.compile('<a href="\\?a=corp_detail&amp;crp_id=[0-9]+">(.*?)</a>')

def get_kbranks(url):
    now = datetime.datetime.utcnow()
    if now.day < 15:
        date = now - datetime.timedelta(days=30)
        url += "&m=%s&y=%s" % (date.month, date.year)
    try:
        data = urllib.urlopen(url).read()
    except Exception, e:
        print "ERROR: %s" % str(e)
        return []
    data = data[:data.index("All time")]
    corps = CORP_RX.findall(data)
    ranks = dict((name, num+1)
                 for (num, name)
                 in enumerate(corps))
    return ranks

def get_standings():
    u = urllib.urlopen('http://www.electusmatari.com/standings/?format=xml')
    xml = ElementTree.fromstring(u.read())
    return dict((elt.find("entity").text, elt.find("value").text)
                for elt in xml.findall("standing"))

def humane_empty(n):
    if n == 0:
        return ""
    else:
        return humane(n)

class Data(object):
    def __init__(self):
        self.db = psycopg2.connect("dbname=eve")
        self.c = self.db.cursor()
        self.kills = None

    def __del__(self):
        self.db.commit()

    def is_knownkill(self, name):
        if self.kills is None:
            self.c.execute("SELECT filename FROM mary_known_killmails ")
            self.kills = dict((x, True) for (x,) in self.c.fetchall())
        return name in self.kills

    def add_knownkill(self, name):
        self.c.execute("INSERT INTO mary_known_killmails (filename) "
                       "VALUES (%s)",
                       (name,))

    def save(self):
        pass

    def addcorp(self, name, seen):
        corp = self.getcorp(name)
        if corp is None:
            self.c.execute("INSERT INTO mary_corps (name, seen, is_active) "
                           "VALUES (%s, %s, %s)", (name, seen, True))
            sys.stderr.write("New corp: %s\n" % name)
        else:
            (name, lastseen, is_active) = corp
            if seen > lastseen and not is_active:
                sys.stderr.write("Corp is active again: %s\n" % name)
                self.c.execute("UPDATE mary_corps "
                               "SET seen = %s, is_active = 't' "
                               "WHERE name = %s ",
                               (seen, name,))
            elif seen > lastseen:
                self.c.execute("UPDATE mary_corps "
                               "SET seen = %s "
                               "WHERE name = %s ",
                               (seen, name,))

    def getcorp(self, name):
        self.c.execute("SELECT name, seen, is_active "
                       "FROM mary_corps "
                       "WHERE name = %s ",
                       (name,))
        if self.c.rowcount == 1:
            return self.c.fetchone()
        else:
            return None

    def corpnames(self, active=False):
        sql = "SELECT name FROM mary_corps "
        if active:
            sql += "WHERE is_active "
        if type(active) is int and active > 0:
            sql += "AND seen > NOW() - INTERVAL '%i days'" % active
        self.c.execute(sql)
        return [x for (x,) in self.c.fetchall()]

    def is_knowncorp(self, name):
        return self.getcorp(name) is not None

    def set_corp_activity(self, name, is_active):
        self.c.execute("UPDATE mary_corps "
                       "SET is_active = %s "
                       "WHERE name = %s ",
                       (is_active, name))

    def lastseen(self, name):
        self.c.execute("SELECT seen FROM mary_corps WHERE name = %s",
                       (name,))
        return self.c.fetchone()[0]

if __name__ == '__main__':
   main()
