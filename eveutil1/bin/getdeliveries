#!/usr/bin/env python

import collections
import csv
import StringIO
import sys
import urllib

from ftplib import FTP

from lib import characters, cache
from lib import eveapi, evedb

db = evedb.connect()

# The itemID of the reimbursement fund can
REIMBURSEMENT_FUND_CAN = 1142760065

def main():
    buyorders = get_buy_orders()
    flag_deliveries = flag('CorpMarket')
    type_office = typeid_lookup('Office')
    flag_outgoing = flag('CorpSAG7') # This is Outgoing in GRD
    grd = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    data = grd.AssetList()
    
    # Hack for Teo
    import gzip
    src = file("/tmp/forcer/eveapicache/b1aacefff5be9f5026d526494b6fd430")
    dst = gzip.open("/home/forcer/public_html/eve/grdassets/assets.xml.gz",
                    "wb")
    xmldata = src.read()
    dst.write(xmldata[xmldata.index("\n")+1:])
    dst.close()
    xmldata = StringIO.StringIO(file("/home/forcer/public_html/eve/grdassets/assets.xml.gz").read())

    csvdata = StringIO.StringIO()
    out = csv.writer(csvdata)
    rfundcsv = StringIO.StringIO()
    rfundout = csv.writer(rfundcsv)
    for row in data.assets:
        if row.flag == flag_deliveries:
            (system, systemid, station, stationid, statypeid) = location(row.locationID)
            (typename, m3) = type_lookup(row.typeID)
            system_buying = False
            item_buying = False
            if system in buyorders:
                system_buying = True
                if row.typeID in buyorders[system]:
                    item_buying = True
            out.writerow([system, systemid, station, stationid, statypeid,
                          typename, row.typeID,
                          row.quantity, m3*row.quantity,
                          system_buying, item_buying])
        elif row.typeID == type_office and hasattr(row, 'contents'):
            for row2 in row.contents:
                if row2.itemID == REIMBURSEMENT_FUND_CAN and hasattr(row2, 'contents'):
                    items = collections.defaultdict(lambda: 0)
                    for item in row2.contents:
                        (typename, m3) = type_lookup(item.typeID)
                        items[typename] += item.quantity
                    for typename, quantity in items.items():
                        rfundout.writerow([typename,
                                           category_lookup(typename),
                                           quantity])
                if row2.flag == flag_outgoing:
                    (system, systemid, station, stationid, statypeid) = location(row.locationID)
                    if row2.typeID == 17366: # station container
                        continue
                    (typename, m3) = type_lookup(row2.typeID)
                    out.writerow([system, systemid,
                                  station + " (Office)", stationid,
                                  statypeid, typename, row2.typeID,
                                  row2.quantity, m3*row2.quantity,
                                  True, True])

    # FTP
    f = file("/home/forcer/.private.txt")
    lines = [line.strip().split(":") for line in f.readlines()]
    pws = dict((s, (u, p)) for (s, u, p) in lines)
    (u, p) = pws['deliveries']
    ftp = FTP('www.electusmatari.com')
    ftp.login(u, p)
    csvdata.seek(0)
    ftp.storbinary("STOR grd-deliveries.csv", csvdata)
    rfundcsv.seek(0)
    ftp.storbinary("STOR reimbursementfund.csv", rfundcsv)
    ftp.quit()
    # Teo's FTP
    (u, p) = pws['teo']
    ftp = FTP('www.electusmatari.com')
    ftp.login(u, p)
    xmldata.seek(0)
    ftp.storbinary("STOR assets.xml.gz", xmldata)
    ftp.quit()

def typeid_lookup(typename):
    "Return the type id for this type name."
    c = db.cursor()
    c.execute("SELECT typeid FROM ccp.invtypes WHERE typename = %s",
              (typename,))
    return c.fetchone()[0]

typemap = {}
def type_lookup(typeid):
    "Return the type name for this type id."
    if typeid not in typemap:
        c = db.cursor()
        c.execute("SELECT typename, volume FROM ccp.invtypes WHERE typeid = %s",
                  (typeid,))
        typemap[typeid] = c.fetchone()
    return typemap[typeid]

categorymap = {}
def category_lookup(typename):
    "Return the category name for this type name."
    if typename not in categorymap:
        c = db.cursor()
        c.execute("SELECT c.categoryname "
                  "FROM ccp.invtypes t "
                  "     INNER JOIN ccp.invgroups g "
                  "       ON t.groupid = g.groupid "
                  "     INNER JOIN ccp.invcategories c "
                  "       ON g.categoryid = c.categoryid "
                  "WHERE t.typename = %s",
                  (typename,))
        categorymap[typename] = c.fetchone()[0]
    return categorymap[typename]

locationmap = {}
def location(locationID):
    """
    Return a tuple of (system, systemid, stationname, stationid).
    stationname can be None if this is in space.
    """
    if locationID not in locationmap:
        if locationID >= 66000000 and locationID < 67000000:
            locationmap[locationID] = location_station(locationID - 6000001)
        elif locationID >= 67000000 and locationID < 68000000:
            locationmap[locationID] = location_outpost(locationID - 6000000)
        else:
            locationmap[locationID] = (location_station(locationID) or
                                       (location_system(locationID),
                                        locationID, None, None, None))
    return locationmap[locationID]

def location_station(stationid):
    """
    Return a tuple of (system, stationname) representing this stationid.
    """
    c = db.cursor()
    c.execute("SELECT stationname, stationtypeid, solarsystemid FROM ccp.stastations WHERE stationid = %s",
              (stationid,))
    result = c.fetchone()
    if result is None:
        return None
    else:
        (staname, statypeid, sysid) = result
        return (location_system(sysid), sysid, staname, stationid, statypeid)

def location_system(systemid):
    """
    Return the system name of this system.
    """
    c = db.cursor()
    c.execute("SELECT solarsystemname FROM ccp.mapsolarsystems WHERE solarsystemid = %s",
              (systemid,))
    result = c.fetchone()
    if result is None:
        return None
    else:
        return result[0]

def location_outpost(stationid):
    """
    Return a tuple of (system, stationname) representing this stationid.
    """
    raise RuntimeException, "Outposts not supported yet."

def flag(name):
    "Return the flagid of this invFlag."
    c = db.cursor()
    c.execute("SELECT flagid FROM ccp.invFlags WHERE flagname = %s",
              (name,))
    return c.fetchone()[0]

##################################################################

def get_buy_orders():
    api = characters.api()
    corp = characters.corp(cacheHandler=cache.FileCache("/tmp/forcer/eveapicache/"))
    (jumps, region) = get_sysinfo()
    systems = {}
    for order in corp.MarketOrders().orders:
        if order.bid != 1:
            continue
        order_system = stationid2system(order.stationID)
        for system in systemrange(order_system, order.range):
            if system not in systems:
                systems[system] = []
            systems[system].append(order.typeID)
    return systems

def stationid2system(stationid):
    c = db.cursor()
    c.execute("SELECT n.itemname FROM ccp.stastations AS st INNER JOIN ccp.invnames AS n ON st.solarsystemid = n.itemid WHERE stationid = %s",
              (stationid,))
    return c.fetchone()[0]

def systemrange(startsystem, maxrange):
    (jumps, region) = get_sysinfo()
    if maxrange <= 0:
        return [startsystem]
    if maxrange == 32767:
        return region_systems(region[startsystem])
    systems = {}
    agenda = [(startsystem, 0)]
    while len(agenda) > 0:
        (system, distance) = agenda[0]
        agenda = agenda[1:]
        if distance <= maxrange:
            systems[system] = True
            for neighbor in jumps[system]:
                if neighbor not in systems:
                    agenda.append((neighbor, distance+1))
    for name in systems.keys():
        if region[name] != region[startsystem]:
            del systems[name]
    return systems.keys()

def region_systems(regionname):
    c = db.cursor()
    c.execute(region_query, (regionname,))
    return [sysname for (sysname,) in c.fetchall()]

region_query = """
SELECT solarsystemname
FROM ccp.mapsolarsystems AS sys
     INNER JOIN ccp.mapregions AS r
       ON sys.regionid = r.regionid
WHERE r.regionname = %s;
"""

sysinfo = None
def get_sysinfo():
    global sysinfo
    if sysinfo is not None:
        return sysinfo
    jumps = {}
    region = {}
    c = db.cursor()
    c.execute(alljumps)
    for (f, r, t) in c.fetchall():
        region[f] = r
        if f not in jumps:
            jumps[f] = []
        jumps[f].append(t)
    sysinfo = (jumps, region)
    return sysinfo

alljumps = """
SELECT f.itemname, fr.itemname, t.itemname
FROM ccp.mapsolarsystemjumps AS j
     INNER JOIN ccp.invnames AS f
       ON j.fromsolarsystemid = f.itemid
     INNER JOIN ccp.invnames AS fr
       ON j.fromregionid = fr.itemid
     INNER JOIN ccp.invnames AS t
       ON j.tosolarsystemid = t.itemid
"""

main()
