#!/usr/bin/env python

import csv
import optparse

DATAFILE = "/home/forcer/public_html/eve/fwnumbers.txt"

def main():
    opt = optparse.OptionParser()
    opt.add_option("-l", "--lines", dest="lines",
                   type="int", default=14,
                   help="Number of lines to emit (defaults to 14)")
    opt.add_option("-r", "--run", dest="runlength",
                   type="int", default=1,
                   help="Number of days for the running average")
    opt.add_option("-t", "--type", dest="type",
                   type="string", default="size",
                   help="Which numbers to emit: size, kills, vp (defaults to size")
    (options, args) = opt.parse_args()
    rows = get_rows()
    if options.type == 'size':
        data = [(row.ts, row.mp, row.ap) for row in rows]
    elif options.type == 'kills':
        data = [(row.ts, row.mk, row.ak) for row in rows]
    elif options.type == 'vp':
        data = [(row.ts, row.mvp, row.avp) for row in rows]
    elif options.type == 'kps':
        data = [(row.ts,
                 (row.mk/float(row.mp))*10000,
                 (row.ak/float(row.ap))*10000)
                for row in rows]
    elif options.type == 'kpes':
        data = [(row.ts,
                 (row.mk/float(row.ap))*10000,
                 (row.ak/float(row.mp))*10000)
                for row in rows]
    print_fw(fw(data, options.runlength)[-(options.lines+1):])

def get_rows():
    return [Row(row) for row
            in csv.reader(file(DATAFILE))
            if row[0] != 'Timestamp']

def print_fw(data):
    (last_ts, last_m, last_a) = data[0]
    #     "2009-09-24    3679   +10    3263  -406   112.7%"
    print "               Minmatar        Amarr"
    print "              =========       ======="
    for timestamp, minmatar, amarr in data[1:]:
        print ("%s   %5i %+5i   %5i %+5i   %5.1f%%" %
               (timestamp,
                minmatar, minmatar - last_m,
                amarr, amarr - last_a,
                (minmatar/float(amarr))*100))
        last_m = minmatar
        last_a = amarr

def fw(data, runlength):
    return [fwavg(data[i][0], data[i-runlength+1:i+1])
            for i in range(runlength, len(data))]

def fwavg(timestamp, data):
    return (timestamp,
            sum(entry[1] for entry in data) / float(len(data)),
            sum(entry[2] for entry in data) / float(len(data)))

class Row(object):
    def __init__(self, row):
        (ts, mp, mk, mvp, ap, ak, avp) = row
        self.ts = ts
        self.mp = int(mp)
        self.mk = int(mk)
        self.mvp = int(mvp)
        self.ap = int(ap)
        self.ak = int(ak)
        self.avp = int(avp)

if __name__ == '__main__':
    main()
