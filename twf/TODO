- environ["twf.form"] = cgi.FieldStorage()

twf.contrib.mail
================
mail(to_addr, subject, body)
sendmail(from_addr, to_addr, msg)

[mail]
smtphost: | sendmail:
from:

twf.http
========
Set up logging
- Config:
  [logging]
  level: DEBUG | INFO | WARNING | ERROR | CRITICAL | FATAL | <number>
  database:
  table:
  filename:

- When we catch an exception (500.html), handle this
- log:
  (etype, evalue, tb) = sys.exc_info()
  log.fatal("%s at %s:%s: %s" % (
      e.__class__.__name__,
      tb.tb_frame.f_code.co_filename,
      tb.tb_lineno,
      str(e)))
- traceback.format_exc() => full traceback string
- When twf/debug = True
  - pass the traceback to 500.html
- else:
  - Send a mail to twf/admin

twf.hooks
=========
- add_hook("name", function)
- hook("name")(function)
- run_hook("name", *args, **kwargs)
- Provide some default hooks:
  - "initialize": To initialize the environ
  - "cleanup": Before we return successfully
  - "exception": We caught an exception

twf.contrib.auth
================
- environ["twf.user"] => User()
- login_user(user) => set the user session and the twf.user environ
- User:
  - has_permission(name)
  - groups(), add_group(), remove_group()
  - permissions()
  - messages(), add_message()
- Group:
  - permissions(), add_permission(), remove_permission()
  - users(), add_user(), remove_user()
- Database:
  - twf_user: (id, name, password)
  - twf_group: (id, name)
  - twf_usergroups: (id, user_id, group_id)
  - twf_permission: (id, name)
  - twf_grouppermissions: (id, group_id, permission_id)
  - twf_message: (id, user_id, message)

twf.contrib.session
===================
Future, not needed for emapps

- twf_session: (id, session_key, remote_addr, session_data, expire_date)
- cookies[config.get("session", "cookie")] => session_key
- environ["twf.contrib.session"] => Session object
  - Like a dictionary, but remembers when it was changed
  - in the cleanup hook, save the session object
- set_session_cookie(environ, headers)
  - set cookie (use Cookie.SimpleCookie)

Forms framework?
================
- f = Form([(field, validator[, defaultvalue]), ...])
- f.is_valid()
- CSRF protection?
